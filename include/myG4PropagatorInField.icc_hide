// This code implementation is the intellectual property of
// the GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: myG4PropagatorInField.icc_hide,v 1.1.1.1 2004/12/14 18:57:41 agapov Exp $
// GEANT4 tag $Name:  $
//
// 
// ------------------------------------------------------------------------
//	GEANT 4  include file implementation
//
//	For information related to this code contact:
//	CERN, IT Division (formely CN), ASD group
// ------------------------------------------------------------------------
// 
// 25.10.96 John Apostolakis, design and implementation 
// 25.03.97 John Apostolakis, adaptation for G4Transportation and cleanup
//
//  To create an object, must have 
//      an object that calculates the Curved paths 
//      the navigator to find (linear) intersections
//     and ?? also must know the value of the maximum displacement allowed
//

inline myG4PropagatorInField::
myG4PropagatorInField( G4Navigator    *theNavigator, 
		     G4FieldManager *detectorFieldMgr) :
    fNavigator(theNavigator),
    fDetectorFieldMgr(detectorFieldMgr), 
    fmax_loop_count(10000),
    End_PointAndTangent(G4ThreeVector(0.,0.,0.),
			G4ThreeVector(0.,0.,0.),0.0,0.0),
    fDelta_One_Step_Value(fDefault_Delta_One_Step_Value),
    fDelta_Intersection_Val(fDefault_Delta_Intersection_Val),
    fVerboseLevel(0)
{
     // this->fChordFinder = new G4ChordFinder( (G4MagneticField*)0, 1e-6 );

     fNoZeroStep=0;                
     fThresholdNo_ZeroSteps= 2; 
     // fMidPoint_CurveLen_of_LastAttempt= -1;
     fFull_CurveLen_of_LastAttempt= -1; 
     fLast_ProposedStepLength= -1; 
}

inline
G4ChordFinder* myG4PropagatorInField::GetChordFinder()
{
      // Now only the "Chord Finder" of the global Field Mgr is used
      //  ... 
      return fDetectorFieldMgr->GetChordFinder(); 
}

inline void myG4PropagatorInField::SetChargeMomentumMass( 
			G4double Charge,            // in e+ units
		        G4double Momentum,          // in GeV/c 
		        G4double Mass)              // in ? units
{
   GetChordFinder()->SetChargeMomentumMass(Charge, Momentum, Mass); 
}

//  Obtain the final space-point and velocity (normal) at the end of the Step
//
inline
G4ThreeVector  myG4PropagatorInField::EndPosition()
{
      return   End_PointAndTangent.Position(); 
}

inline
G4ThreeVector  myG4PropagatorInField::EndMomentumDir()
{
      return   End_PointAndTangent.GetMomentumDir(); 
}

inline G4double myG4PropagatorInField::GetEpsilonStep() 
{ 
      return fEpsilonStep; 
}
inline void     myG4PropagatorInField::SetEpsilonStep(G4double newEps)
{
      fEpsilonStep=newEps;
}
inline G4bool   myG4PropagatorInField::IsParticleLooping()
{
      return fParticleIsLooping;
}

inline G4int    myG4PropagatorInField::GetMaxLoopCount() 
{
      return fmax_loop_count;
}

inline void     myG4PropagatorInField::SetMaxLoopCount(G4int new_max) 
{
      fmax_loop_count= new_max;
}

// inline void     myG4PropagatorInField::SetChordFinder(G4ChordFinder* newCF)


inline G4double myG4PropagatorInField::GetDeltaIntersection()
{ return fDelta_Intersection_Val; } 
inline G4double myG4PropagatorInField::     GetDeltaOneStep()    
{ return fDelta_One_Step_Value;  }                                    

// void  SetDeltaIntersection(G4double);   
inline void myG4PropagatorInField::SetAccuraciesWithDeltaOneStep(G4double valDeltaOneStep)
{ 
  fDelta_One_Step_Value= valDeltaOneStep;  
  fDelta_Intersection_Val = 0.4 * fDelta_One_Step_Value;
}

inline void myG4PropagatorInField::SetDeltaOneStep(G4double valDeltaOneStep)
{ 
  fDelta_One_Step_Value= valDeltaOneStep;  
}

inline void myG4PropagatorInField::SetDeltaIntersection(G4double valDeltaIntersection)
{
  fDelta_Intersection_Val = valDeltaIntersection;
}

inline
G4int myG4PropagatorInField::SetVerboseLevel( G4int Verbose )
{
  return fVerboseLevel=Verbose;
}

inline
G4int myG4PropagatorInField::Verbose()
{
  return fVerboseLevel;
}

inline
G4FieldTrack myG4PropagatorInField::GetEndState()
{
  return End_PointAndTangent;
}


inline void     myG4PropagatorInField::SetFieldManager(G4FieldManager *newFieldManager)
{
   fDetectorFieldMgr=newFieldManager; 

}
