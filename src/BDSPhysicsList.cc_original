/* BDSIM code.    Version 1.0
   Author: Grahame A. Blair, Royal Holloway, Univ. of London.
   Last modified 24.7.2002
   Copyright (c) 2002 by G.A.Blair.  ALL RIGHTS RESERVED. 
*/
// This code implementation is the intellectual property of
// the GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: BDSPhysicsList.cc_original,v 1.1.1.1 2004/12/14 18:57:39 agapov Exp $
// GEANT4 tag $Name:  $
//
// 
#include "BDSGlobalConstants.hh" // must be first in include list

#include "BDSPhysicsList.hh"

#include "G4ParticleDefinition.hh"
#include "G4ParticleWithCuts.hh"
#include "G4ProcessManager.hh"
#include "G4ProcessVector.hh"
#include "G4ParticleTypes.hh"
#include "G4ParticleTable.hh"
#include "G4Material.hh"
#include "G4ios.hh"              
#include "BDSAcceleratorType.hh"


#include "G4ComptonScattering.hh"
#include "G4GammaConversion.hh"
#include "G4PhotoElectricEffect.hh"
#include "G4MultipleScattering.hh"
#include "G4eIonisation.hh"
#include "G4eBremsstrahlung.hh"
#include "G4eplusAnnihilation.hh"
#include "G4MuIonisation.hh"
#include "G4MuBremsstrahlung.hh"
#include "G4MuPairProduction.hh"


#include "G4hIonisation.hh"
// gab:
#include "BDSUserSpecialCuts.hh" 
#include "BDSLaserWire.hh"
#include "BDSPlanckScatter.hh"
#include "BDSSynchrotronRadiation.hh"
#include "BDSAcceleration.hh"
#include "BDSeBremsstrahlung.hh"
#include "BDSGammaConversion.hh"


// from Hans-Peter Wellisch:
#include "GeneralPhysics.hh"
#include "EM_GNPhysics.hh"
#include "MuonPhysics.hh"
#include "HadronPhysicsQGSP_HP.hh"
#include "IonPhysics.hh"



extern  BDSLaserWire* TheBDSLaserWire;

BDSPhysicsList::BDSPhysicsList():  G4VModularPhysicsList()
//BDSPhysicsList::BDSPhysicsList():  G4VUserPhysicsList()
{
  currentDefaultCut = defaultCutValue = 0.7*mm;
  cutForGamma       = defaultCutValue;
  cutForElectron    = defaultCutValue;
  cutForProton      = defaultCutValue;
  
  SetVerboseLevel(1);

}

BDSPhysicsList::~BDSPhysicsList()
{}

void BDSPhysicsList::ConstructParticle()
{
  // In this method, static member functions should be called
  // for all particles which you want to use.
  // This ensures that objects of these particle types will be
  // created in the program. 

    ConstructBosons();
    ConstructLeptons();
    ConstructMesons();
    ConstructBaryons();
}

void BDSPhysicsList::ConstructBosons()
{
  // pseudo-particles
  G4Geantino::GeantinoDefinition();
  G4ChargedGeantino::ChargedGeantinoDefinition();

  // gamma
  G4Gamma::GammaDefinition();

  // optical photon
  G4OpticalPhoton::OpticalPhotonDefinition();
}

void BDSPhysicsList::ConstructLeptons()
{
  // leptons
  G4Electron::ElectronDefinition();
  G4Positron::PositronDefinition();
  G4MuonPlus::MuonPlusDefinition();
  G4MuonMinus::MuonMinusDefinition();

  G4NeutrinoE::NeutrinoEDefinition();
  G4AntiNeutrinoE::AntiNeutrinoEDefinition();
  G4NeutrinoMu::NeutrinoMuDefinition();
  G4AntiNeutrinoMu::AntiNeutrinoMuDefinition();
}

void BDSPhysicsList::ConstructMesons()
{
 //  mesons
  G4PionPlus::PionPlusDefinition();
  G4PionMinus::PionMinusDefinition();
  G4PionZero::PionZeroDefinition();
  G4Eta::EtaDefinition();
  G4EtaPrime::EtaPrimeDefinition();
  G4KaonPlus::KaonPlusDefinition();
  G4KaonMinus::KaonMinusDefinition();
  G4KaonZero::KaonZeroDefinition();
  G4AntiKaonZero::AntiKaonZeroDefinition();
  G4KaonZeroLong::KaonZeroLongDefinition();
  G4KaonZeroShort::KaonZeroShortDefinition();
}

void BDSPhysicsList::ConstructBaryons()
{
//  barions
  G4Proton::ProtonDefinition();
  G4AntiProton::AntiProtonDefinition();
  G4Neutron::NeutronDefinition();
  G4AntiNeutron::AntiNeutronDefinition();
}

void BDSPhysicsList::ConstructProcess()
{
  BDSAddTransportation();

  if(BDSGlobals->GetTurnOnInteractions())
    {
      // General Physics
      RegisterPhysics( new GeneralPhysics("general") );
      // Muon Physics
      //RegisterPhysics(  new MuonPhysics("muon"));

      // ConstructGeneral();
      //ConstructEM();
    }
  if(BDSGlobals->GetSynchRadOn()) ConstructSynchRad();
  if(TheBDSLaserWire) ConstructLaserWire();
  if(BDSGlobals->GetPlanckOn()) ConstructPlanckScatt();
  //  if(BDSGlobals->GetTrackWeightFactor()!=1) ConstructTrackStop();


  if(BDSGlobals->GetUseEMHadronic())
    {
      G4cout<<" constructing EMHadronic"<<G4endl;
      // EM Physics
      RegisterPhysics( new EM_GNPhysics("standard EM plus electro nuclear"));
      
      // Hadron Physics
      RegisterPhysics(  new HadronPhysicsQGSP_HP("hadron"));

      // Ion Physics
      RegisterPhysics( new IonPhysics("ion"));

  //ConstructEMHadronic();
    }

  if(BDSGlobals->GetUseMuonPairProduction())ConstructMuonPairProduction();

  if(BDSGlobals->GetBDSeBremOn())ConstructBDSeBremsstrahlung();
}


void BDSPhysicsList::ConstructBDSeBremsstrahlung()
{
  theParticleIterator->reset();
  G4cout<<"Constructing BDS Bremsstrahlung Process"<<G4endl;
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();

    if (particleName == "e-") 
      {    
	G4VProcess* theEMinusBDSeBrem = new BDSeBremsstrahlung();	  
	pmanager->AddProcess(theEMinusBDSeBrem);
	pmanager->SetProcessOrderingToLast(theEMinusBDSeBrem,idxPostStep);
      }
    else if (particleName == "e+") 
      {
	G4VProcess* theEPlusBDSeBrem = new BDSeBremsstrahlung();
	pmanager->AddProcess(theEPlusBDSeBrem);
	pmanager->
	  SetProcessOrderingToLast(theEPlusBDSeBrem,idxPostStep);
      }   
  }

}


void BDSPhysicsList::ConstructEMHadronic()
{
  // EM Physics
  //  RegisterPhysics(  new HadronPhysicsLHEP_GN("hadron"));

  /*  
  G4ProcessManager * pManager = 0;
  
  // Gamma Physics

  pManager = G4Gamma::Gamma()->GetProcessManager();
  G4PhotoNuclearProcess* thePhotoNuclearProcess = new G4PhotoNuclearProcess();
  G4GammaNuclearReaction* theGammaReaction = new G4GammaNuclearReaction();
  thePhotoNuclearProcess->RegisterMe(theGammaReaction);
  pManager->AddDiscreteProcess(thePhotoNuclearProcess);
  */


  // Electron Physics
  // pManager = G4Electron::Electron()->GetProcessManager();
  // add processes
  //  theElectronNuclearProcess.RegisterMe(&theElectroReaction);
  //  pManager->AddDiscreteProcess(&theElectronNuclearProcess);

  //Positron Physics
  // pManager = G4Positron::Positron()->GetProcessManager();
  // add processes
  // thePositronNuclearProcess.RegisterMe(&theElectroReaction);
  // pManager->AddDiscreteProcess(&thePositronNuclearProcess);
}

void BDSPhysicsList::ConstructMuonPairProduction()
{

  G4ProcessManager * pManager = 0;
  
  // Gamma Physics
  pManager = G4Gamma::Gamma()->GetProcessManager();

  G4GammaConversionToMuons* theMuonPairProductionProcess = 
    new G4GammaConversionToMuons();

  theMuonPairProductionProcess->
    SetCrossSecFactor(BDSGlobals->GetMuonProductionScaleFactor());

  pManager->AddDiscreteProcess(theMuonPairProductionProcess);

}


void BDSPhysicsList::ConstructSynchRad()
{
  theParticleIterator->reset();
  G4cout<<"Constructing Synchrotron Radiation Process"<<G4endl;
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();

    if (particleName == "e-") 
      {    
	G4VProcess* theEMinusSynchrotronRadiation  = 
	  new BDSSynchrotronRadiation();
	  
	pmanager->AddProcess(theEMinusSynchrotronRadiation);
	pmanager->
	  SetProcessOrderingToLast(theEMinusSynchrotronRadiation,
				   idxPostStep);
      }
    else if (particleName == "e+") 
      {
	G4VProcess* theEPlusSynchrotronRadiation  = 
	  new BDSSynchrotronRadiation();
	
	pmanager->AddProcess(theEPlusSynchrotronRadiation);
	pmanager->
	  SetProcessOrderingToLast(theEPlusSynchrotronRadiation,
				   idxPostStep);
      }   
  }
}

void BDSPhysicsList::ConstructPlanckScatt()
{
  BDSAcceleratorType* TheAccelerator=BDSGlobals->GetAcceleratorType();
  theParticleIterator->reset();

  G4cout<<"Constructing Planck Scattering Process"<<G4endl;

  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();

    if (particleName == "e-") 
      {
	G4VProcess* theEMPlanckScatter  = 
	  new BDSPlanckScatter(TheAccelerator->GetTemperature());
	pmanager->AddProcess(theEMPlanckScatter);
	pmanager->
	  SetProcessOrderingToLast(theEMPlanckScatter,idxPostStep);
      }
    else if (particleName == "e+") 
      {
	G4VProcess* theEPPlanckScatter  = 
	  new BDSPlanckScatter(TheAccelerator->GetTemperature());
	pmanager->AddProcess(theEPPlanckScatter);
	pmanager->
	  SetProcessOrderingToLast(theEPPlanckScatter,idxPostStep);
      }   
  }
}

void BDSPhysicsList::ConstructLaserWire()
{
  theParticleIterator->reset();

  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();

    if (particleName == "e-") 
      { 
	G4VProcess* theEMinusLaserwire=TheBDSLaserWire->GetLaserWireProcess();
	pmanager->AddProcess(theEMinusLaserwire);
	pmanager->
	  SetProcessOrderingToLast(theEMinusLaserwire,
				   idxPostStep);
      }
    else if (particleName == "e+") 
      {
	G4VProcess* theEPlusLaserwire=TheBDSLaserWire->GetLaserWireProcess();
	pmanager->AddProcess(theEPlusLaserwire);
	pmanager->
	  SetProcessOrderingToLast(theEPlusLaserwire,
				   idxPostStep);
      }   
  }
}



void BDSPhysicsList::ConstructEM()
{
  

  theParticleIterator->reset();


  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();

     
    if (particleName == "gamma") {
    // gamma
      if(BDSGlobals->GetUseMuonShowers())
	{
	  G4cout<<" adding BDSGammaConversion Process"<<G4endl;
	  pmanager->AddDiscreteProcess(new BDSGammaConversion());
	}
      else
       pmanager->AddDiscreteProcess(new G4GammaConversion());

      pmanager->AddDiscreteProcess(new G4ComptonScattering());      
      pmanager->AddDiscreteProcess(new G4PhotoElectricEffect());


    } else if (particleName == "e-") {
    //electron

      // gab:
      G4VProcess* theCutsProcess = new BDSUserSpecialCuts();
      pmanager->AddProcess(theCutsProcess);

      G4VProcess* theeminusMultipleScattering = new G4MultipleScattering();
      G4VProcess* theeminusIonisation         = new G4eIonisation();
      G4VProcess* theeminusBremsstrahlung     = new G4eBremsstrahlung();

      // add processes
      pmanager->AddProcess(theeminusMultipleScattering);
      pmanager->AddProcess(theeminusIonisation);
      pmanager->AddProcess(theeminusBremsstrahlung);


      // set ordering for AlongStepDoIt
      pmanager->
	SetProcessOrdering(theeminusMultipleScattering, idxAlongStep,1);
      pmanager->
      	SetProcessOrdering(theeminusIonisation,         idxAlongStep,2);
 
      // set ordering for PostStepDoIt
      pmanager->SetProcessOrdering(theCutsProcess,              idxPostStep,1);
      pmanager->SetProcessOrdering(theeminusMultipleScattering, idxPostStep,2);
      pmanager->SetProcessOrdering(theeminusIonisation,         idxPostStep,3);
      pmanager->SetProcessOrdering(theeminusBremsstrahlung,     idxPostStep,4);


      /*
      // tmp
	  G4VProcess* theEMinusAcceleration  = new BDSAcceleration();

	  pmanager->AddProcess(theEMinusAcceleration);
	  pmanager->
	    SetProcessOrdering(theEMinusAcceleration,idxPostStep,
			       ++nproc);
      */



    } else if (particleName == "e+") {
    //positron
      G4VProcess* theeplusMultipleScattering = new G4MultipleScattering();
      G4VProcess* theeplusIonisation         = new G4eIonisation();
      G4VProcess* theeplusBremsstrahlung     = new G4eBremsstrahlung();
      G4VProcess* theeplusAnnihilation       = new G4eplusAnnihilation();
      //
      // add processes
      pmanager->AddProcess(theeplusMultipleScattering);
      pmanager->AddProcess(theeplusIonisation);
      pmanager->AddProcess(theeplusBremsstrahlung);
      pmanager->AddProcess(theeplusAnnihilation);

      // gab:
      G4VProcess* theCutsProcess = new BDSUserSpecialCuts();
           pmanager->AddProcess(theCutsProcess);

      // set ordering for AtRestDoIt
      pmanager->SetProcessOrderingToFirst(theeplusAnnihilation, idxAtRest);
      //
      // set ordering for AlongStepDoIt
      pmanager->SetProcessOrdering(theeplusMultipleScattering, idxAlongStep,1);
      pmanager->SetProcessOrdering(theeplusIonisation,         idxAlongStep,2);
      //
      // set ordering for PostStepDoIt
     pmanager->SetProcessOrdering(theCutsProcess,             idxPostStep,1);  
     pmanager->SetProcessOrdering(theeplusMultipleScattering, idxPostStep,2);
     pmanager->SetProcessOrdering(theeplusIonisation,         idxPostStep,3);
     pmanager->SetProcessOrdering(theeplusBremsstrahlung,     idxPostStep,4);
     pmanager->SetProcessOrdering(theeplusAnnihilation,       idxPostStep,5);


    } else if( particleName == "mu+" || 
               particleName == "mu-"    ) {
    //muon  
      G4VProcess* aMultipleScattering = new G4MultipleScattering();
      G4VProcess* aBremsstrahlung     = new G4MuBremsstrahlung();
      G4VProcess* aPairProduction     = new G4MuPairProduction();
      G4VProcess* anIonisation        = new G4MuIonisation();
      //
      // add processes
      pmanager->AddProcess(anIonisation);
      pmanager->AddProcess(aMultipleScattering);
      pmanager->AddProcess(aBremsstrahlung);
      pmanager->AddProcess(aPairProduction);
      //
      // set ordering for AlongStepDoIt
      pmanager->SetProcessOrdering(aMultipleScattering, idxAlongStep,1);
      pmanager->SetProcessOrdering(anIonisation,        idxAlongStep,2);
      //
      // set ordering for PostStepDoIt
      pmanager->SetProcessOrdering(aMultipleScattering, idxPostStep,1);
      pmanager->SetProcessOrdering(anIonisation,        idxPostStep,2);
      pmanager->SetProcessOrdering(aBremsstrahlung,     idxPostStep,3);
      pmanager->SetProcessOrdering(aPairProduction,     idxPostStep,4);

     } else if ((!particle->IsShortLived()) &&
	       (particle->GetPDGCharge() != 0.0) && 
	       (particle->GetParticleName() != "chargedgeantino")) {
     // all others charged particles except geantino     
     G4VProcess* aMultipleScattering = new G4MultipleScattering();
     G4VProcess* anIonisation        = new G4hIonisation();
     //
     // add processes
     pmanager->AddProcess(anIonisation);
     pmanager->AddProcess(aMultipleScattering);
     //
     // set ordering for AlongStepDoIt
     pmanager->SetProcessOrdering(aMultipleScattering, idxAlongStep,1);
     pmanager->SetProcessOrdering(anIonisation,        idxAlongStep,2);
     //
     // set ordering for PostStepDoIt
     pmanager->SetProcessOrdering(aMultipleScattering, idxPostStep,1);
     pmanager->SetProcessOrdering(anIonisation,        idxPostStep,2);


    }
    //  pmanager->DumpInfo();
    //  pmanager->SetVerboseLevel(2);
  }

}


#include "G4Decay.hh"

void BDSPhysicsList::ConstructGeneral()
{
  // Add Decay Process
  G4Decay* theDecayProcess = new G4Decay();
  theParticleIterator->reset();
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    if (theDecayProcess->IsApplicable(*particle)) { 
      pmanager ->AddProcess(theDecayProcess);
      // set ordering for PostStepDoIt and AtRestDoIt
      pmanager ->SetProcessOrdering(theDecayProcess, idxPostStep);
      pmanager ->SetProcessOrdering(theDecayProcess, idxAtRest);
    }
  }
}

void BDSPhysicsList::SetCuts()
{
 SetCutsWithDefault();   
  
 /*
  SetCutValue(kNuCut,"nu_e");
  SetCutValue(kNuCut,"nu_tau");
  SetCutValue(kNuCut,"nu_mu");
  SetCutValue(kNuCut,"anti_nu_e");
  SetCutValue(kNuCut,"anti_nu_tau");
  SetCutValue(kNuCut,"anti_nu_mu");
 
  DumpCutValues(G4Electron::ElectronDefinition() ); 
  DumpCutValues(G4Positron::PositronDefinition()); 
  DumpCutValues(G4MuonPlus::MuonPlusDefinition() ); 
  DumpCutValues(G4MuonMinus::MuonMinusDefinition()); 
  DumpCutValues(G4Gamma::GammaDefinition() ) ;
 */


  /*
  // reactualise cutValues
  if (currentDefaultCut != defaultCutValue)
    {
      if(cutForGamma    == currentDefaultCut) cutForGamma    = defaultCutValue;
      if(cutForElectron == currentDefaultCut) cutForElectron = defaultCutValue;
      if(cutForProton   == currentDefaultCut) cutForProton   = defaultCutValue;
      currentDefaultCut = defaultCutValue;
    }
  
  if (verboseLevel >0){
    G4cout << "BDSPhysicsList::SetCuts:";
    G4cout << "CutLength : " << G4BestUnit(defaultCutValue,"Length") << G4endl;

  }  


  // set cut values for gamma at first and for e- second and next for e+,
  // because some processes for e+/e- need cut values for gamma 
  SetCutValue(cutForGamma, "gamma");
  SetCutValue(cutForElectron, "e-");
  SetCutValue(cutForElectron, "e+");
 
  // set cut values for proton and anti_proton before all other hadrons
  // because some processes for hadrons need cut values for proton/anti_proton 
  SetCutValue(cutForProton, "proton");
  SetCutValue(cutForProton, "anti_proton");
  
  SetCutValueForOthers(defaultCutValue);

  if (verboseLevel>0) DumpCutValuesTable();
  */    

}

void BDSPhysicsList::SetCutForGamma(G4double cut)
{
  ResetCuts();
  cutForGamma = cut;
}

void BDSPhysicsList::SetCutForElectron(G4double cut)
{
  ResetCuts();
  cutForElectron = cut;
}

void BDSPhysicsList::SetCutForProton(G4double cut)
{
  ResetCuts();
  cutForProton = cut;
}

G4double BDSPhysicsList::GetCutForGamma() const
{
  return cutForGamma;
}

G4double BDSPhysicsList::GetCutForElectron() const
{
  return cutForElectron;
}

G4double BDSPhysicsList::GetCutForProton() const
{
  return cutForProton;
}




////////////////////////////////////////////////////////
#include "BDSTransportation.hh"
//#include "G4Transportation.hh"
void BDSPhysicsList::BDSAddTransportation()
{

  BDSTransportation* theTransportationProcess= new BDSTransportation();
  //G4Transportation* theTransportationProcess= new G4Transportation();

  // loop over all particles in G4ParticleTable 
  theParticleIterator->reset();
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    if (!particle->IsShortLived()) {
      // Add transportation process for all particles other than  "shortlived"
      if ( pmanager == 0) {
	// Error !! no process manager
	G4Exception("G4VUserPhysicsList::AddTransportation : no process manager!");
      } else {
	// add transportation with ordering = ( -1, "first", "first" )
	pmanager ->AddProcess(theTransportationProcess);
	pmanager ->SetProcessOrderingToFirst(theTransportationProcess, idxAlongStep);
	pmanager ->SetProcessOrderingToFirst(theTransportationProcess, idxPostStep);
      }
    } else {
      // shortlived particle case
    }
  }
}


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....











