/* BDSIM code.    Version 1.0
   Author: Grahame A. Blair, Royal Holloway, Univ. of London.
   Last modified 24.7.2002
   Copyright (c) 2002 by G.A.Blair.  ALL RIGHTS RESERVED. 
*/

// This code implementation is the intellectual property of
// the GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: BDSEventAction.cc_paw,v 1.1.1.1 2004/12/14 18:57:39 agapov Exp $
// GEANT4 tag $Name:  $
//
// 

//======================================================
//======================================================
#include "BDSGlobalConstants.hh" // must be first in include list

// link to G4eBremsstrahlung.cc and G4GammaConversion.cc for muon studies
extern G4bool BDSeBremsFiredThisEvent;
extern G4double BDSeBremFireDist;

#include "BDSEventAction.hh"

//#include "BDSCalorHit.hh"
#include "BDSEventActionMessenger.hh"

#include "G4Event.hh"
#include "G4EventManager.hh"
#include "G4HCofThisEvent.hh"
#include "G4VHitsCollection.hh"
#include "G4TrajectoryContainer.hh"
#include "G4Trajectory.hh"
#include "G4VVisManager.hh"
#include "G4SDManager.hh"
#include "G4UImanager.hh"
#include "G4ios.hh"
#include "G4UnitsTable.hh"
#include "Randomize.hh"

#include "G4FieldManager.hh"
#include "G4ChordFinder.hh"

#include "BDSSampler.hh"
#include "BDSSamplerHit.hh"
#include "BDSEnergyCounterHit.hh"
//#include <cfortran.h>
//#include <packlib.h>

//#define mips 1
//#include"/cern/2000/include/cfortran/cfortran.h"
//#include"/cern/2000/include/cfortran/packlib.h"

// Root:
#include "TObject.h"
#include "TClonesArray.h"

typedef std::map<G4String,int> LogVolCountMap;
extern LogVolCountMap* LogVolCount;

typedef list<BDSEnergyCounterSD*>  ECList;
extern ECList* theECList;

// gab tmp:
//extern G4String LastVolName;
//extern G4ThreeVector LastPos;
//extern G4ThreeVector LastMom;

// gab tmp
G4double htot;

G4int event_number;

G4bool FireLaserCompton;

//======================================================

BDSEventAction::BDSEventAction()
:SamplerCollID(-1),drawFlag("all"),
eventMessenger(NULL)
{  eventMessenger = new BDSEventActionMessenger(this);
 if(BDSGlobals->GetWriteBunchFile())
   {BunchOutputFile=new ofstream("Bunch.output");}
 else BunchOutputFile=NULL;

 if(BDSGlobals->GetUseBatch())printModulo=1000;
 else printModulo=1;

 itsOutputFileNumber=0;

 itsRecordSize=1024;

}

//======================================================

BDSEventAction::~BDSEventAction()
{
  delete eventMessenger;
}

//======================================================

void BDSEventAction::BeginOfEventAction(const G4Event* evt)
{
  
 event_number = evt->GetEventID();
 htot=0.;

 if(BDSGlobals->GetBDSeBremOn())
   {
     BDSeBremFireDist=BDSGlobals->GetTotalS()*(0.5-G4UniformRand());
     BDSeBremsFiredThisEvent=false;
     G4cout<<" G4EventAction: BDSeBremFireDist="<<BDSeBremFireDist/m<<G4endl;
   }

 if (event_number == 0)
   {
     G4int istat;
     G4String filename=BDSGlobals->GetOutputNtupleFileName()+"_"+
       StringFromInt(itsOutputFileNumber++)+".rz";
     char* cfile=filename.data();
     //G4String pawD="sampler"+StringFromInt(itsOutputFileNumber);
     //char* pawDir=pawD.data();
     char* pawDir="sampler";
     HROPEN(itsOutputFileNumber,pawDir,cfile,"N",itsRecordSize,istat);
     
   }

 if ((event_number+1)%printModulo == 0)
   { 
         G4cout << "\n---> Begin of event: " << event_number ;
	 if(BDSGlobals->GetUseTimer())
	   { 
	     BDSGlobals->GetTimer()->Stop();
	     G4cout<<" Time: "<<*BDSGlobals->GetTimer();
	     BDSGlobals->GetTimer()->Start();
	   }
	 G4cout<<G4endl;

    //    HepRandom::showEngineStatus();
	 // tmp
   }
 
 G4SDManager * SDman = G4SDManager::GetSDMpointer();

    
 if (SamplerCollID==-1)
   SamplerCollID = SDman->GetCollectionID("SamplerCollection");

 /*
 // gab new:
  list<BDSAcceleratorComponent*>::const_iterator iBeam;

  for(iBeam=theBeamline.begin();iBeam!=theBeamline.end();iBeam++)
    {
      G4FieldManager* FldMgr= 
	(*iBeam)->GetG4LogicalVolume()->GetFieldManager();
      if(FldMgr)
	{ 
	  G4ChordFinder* ChrdFnd= FldMgr->GetChordFinder();
	  if(ChrdFnd) ChrdFnd->ResetStepEstimate();
	}
    }

 */

  // end gab new
   
 // if (BDSEnergyCounterCollID==-1)
 //  {
 //    G4SDManager * SDman = G4SDManager::GetSDMpointer();
 //    BDSEnergyCounterCollID = SDman->GetCollectionID("BDSEnergyCounterCollection");
 //  } 

 /*
     for(iEC=theECList->begin();iEC!=theECList->end();iEC++)
     {
      BDSEnergyCounterSD* BDSEnergyCounter= (*iEC);
      if(BDSEnergyCounter)
	{
         G4String name=BDSEnergyCounter->GetCollectionName(0);
         SDman->GetCollectionID(name);
	}
     }
 */

 FireLaserCompton=true;

}

//======================================================

void BDSEventAction::EndOfEventAction(const G4Event* evt)
{

  G4SDManager * SDman = G4SDManager::GetSDMpointer();

  G4HCofThisEvent* HCE = evt->GetHCofThisEvent();
  
  BDSSamplerHitsCollection*  SampHC=NULL;
  BDSEnergyCounterHitsCollection* BDSEnergyCounter_HC=NULL;


  if(SamplerCollID>=0)
    SampHC = (BDSSamplerHitsCollection*)(HCE->GetHC(SamplerCollID));
  
  for(iEC=theECList->begin();iEC!=theECList->end();iEC++)
    {
      G4String name=(*iEC)->GetCollectionName(0);
      
      G4int BDSEnergyCounter_ID= SDman->GetCollectionID(name);
      
      if(BDSEnergyCounter_ID>=0)
	{
	  BDSEnergyCounter_HC=
	    (BDSEnergyCounterHitsCollection*)(HCE->GetHC(BDSEnergyCounter_ID));
	  if(BDSEnergyCounter_HC) 
	    {
	      G4int n_hit = BDSEnergyCounter_HC->entries();
	      G4float r[2];
	      for (G4int i=0;i<n_hit;i++)
		{
		  G4double Energy=(*BDSEnergyCounter_HC)[i]->GetEnergy();
		  G4double EWeightZ=(*BDSEnergyCounter_HC)[i]->
		    GetEnergyWeightedPosition()/Energy;
		  r[0]=Energy/GeV;
		  r[1]=(EWeightZ+BDSGlobals->GetWorldSizeZ())/m;
		  HF1(100,r[1],r[0]);
		}
	    }
	}
    }
  
  if (SampHC)
    {
      G4int n_hit = SampHC->entries();
      G4int nSampler;
      G4float r[14];
      for (G4int i=0;i<n_hit;i++)
	{
	  nSampler=(*SampHC)[i]->GetNumber();
	  r[0]=(*SampHC)[i]->GetInitX()/m; 
	  r[1]=(*SampHC)[i]->GetInitXPrime(); 
	  r[2]=(*SampHC)[i]->GetInitY()/m; 
	  r[3]=(*SampHC)[i]->GetInitYPrime(); 
	  r[4]=(*SampHC)[i]->GetInitMom()/GeV; 
	  r[5]=(*SampHC)[i]->GetInitZ()/m; 
	  r[6]=(*SampHC)[i]->GetX()/m; 
	  r[7]=(*SampHC)[i]->GetXPrime(); 
	  r[8]=(*SampHC)[i]->GetY()/m; 
	  r[9]=(*SampHC)[i]->GetYPrime(); 
	  r[10]=(*SampHC)[i]->GetMom()/GeV; 
	  r[11]=(*SampHC)[i]->GetZ()/m; 
	  r[12]=G4float((*SampHC)[i]->GetPDGtype()); 
	  r[13]=G4float((*SampHC)[i]->GetEventNo()); 
	  
	  // tmp
	  //	  if(sqrt(pow(r[6],2)+pow(r[8],2))<0.1)
	  // tmp
	  //if((*SampHC)[i]->GetPDGtype()!=11)
	  //	    HFN(nSampler,r);


	  //	 G4cout<<nSampler<<"r[6]= "<<r[6]<<G4endl;

	  if(BunchOutputFile)
	    {
	      G4cout.precision(6);
	      *BunchOutputFile<<(*SampHC)[i]->GetMom()/GeV
			      <<" "
			      <<(*SampHC)[i]->GetX()/micrometer
			      <<" "
			      <<(*SampHC)[i]->GetY()/micrometer
			      <<" "
			      <<(*SampHC)[i]->GetZ()/micrometer
			      <<" "
			      <<(*SampHC)[i]->GetXPrime()/(1.e-6*radian)
			      <<" "
			      <<(*SampHC)[i]->GetYPrime()/(1.e-6*radian)
			      <<G4endl;
	    }
	}
    }	

// needed to draw trajectories and hits:
  if(!BDSGlobals->GetUseBatch())evt->Draw();


//  if (evtNb%printModulo == 0) {
//  G4cout << "---> End of event: " << evtNb << G4endl;	

  /*    G4cout
	<< "   Absorber: total energy: " << G4std::setw(7) << G4BestUnit(totEAbs,"Energy")
	<< "       total track length: " << G4std::setw(7) << G4BestUnit(totLAbs,"Length")
	<< G4endl
	<< "        Gap: total energy: " << G4std::setw(7) << G4BestUnit(totEGap,"Energy")
       << "       total track length: " << G4std::setw(7) << G4BestUnit(totLGap,"Length")
       << G4endl;
  */
	  
  //    G4cout << "\n     " << n_hit
  //	   << " hits are stored in BDSCalorHitsCollection." << G4endl;  	     
  //  }          
  

 if ((event_number+1)%BDSGlobals->GetNumberOfEventsPerNtuple() == 0)
   {

     G4int istat,icycle;
     HROUT(0,icycle," ");
     G4String pawD="sampler"+StringFromInt(itsOutputFileNumber);
     char* pawDir=pawD.data();

     HREND(pawDir);

     if(SampHC)
       {
	 G4int nSamplers=(*LogVolCount)["SAMP1"]-1;
	 for (G4int i=0;i<nSamplers;i++) HRESET(i+1," ");
       }
     else
	 G4cout<<" no Sampler Hit Collection"<<G4endl;


     HRESET(100," ");
     HRESET(101," ");
       
     G4String filename=BDSGlobals->GetOutputNtupleFileName()+"_"+
       StringFromInt(itsOutputFileNumber++)+".rz";
     
     char* cfile=filename.data();

     pawD="sampler"+StringFromInt(itsOutputFileNumber);
     pawDir=pawD.data();

     if(BDSGlobals->GetUseBatch()&&
	event_number+1<BDSGlobals->GetNumberToGenerate())
       HROPEN(itsOutputFileNumber,pawDir,cfile,"N",itsRecordSize,istat);
  
   }


}


G4String BDSEventAction::StringFromInt(G4int N)
{
  char* CharN;
  sprintf(CharN,"%d",N);
  G4String Cnum(CharN);
  return Cnum;
}


//======================================================
