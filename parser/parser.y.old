%{
#include "sym_table.h"
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

 void help();
 void quit();

 int yyerror(char *);
 //extern  void yyerror (YYLTYPE *locp, char const *msg); 

 extern FILE* yyin;
 extern int yylex();
 extern int yyparse();

 int add_var(char *name,double value);
 int add_func(char *name, double (*func)(double));

 struct symtab symtab[NSYMS];

 extern struct symtab * symlook(char *s);


%}


%union{
  double dval;
  struct symtab *symp;
}


%left '+' '-'
%left '*' '/'
%left '^'
%nonassoc UMINUS

%token <dval> NUMBER
%token <symp> VARIABLE FUNC
%token QUADRUPOLE DIPOLE
%token QUIT

%type <dval> expr


%%

input :
     | input stmt { printf("\n"); }
     ;

stmt : expr ';'             { printf ("\t%.10g\n", $1); }
     | control ';'
     | decl ';'    
     ;

decl : VARIABLE ':' type
;

type : QUADRUPOLE
     | DIPOLE
;

expr :   NUMBER             { $$ = $1;                         }
       | VARIABLE           { $$ = $1->value;                  } 
       | FUNC '(' expr ')'  { $$ = (*($1->funcptr))($3);       } 
       | expr '+' expr      { $$ = $1 + $3;                    }
       | expr '-' expr      { $$ = $1 - $3;                    }  
       | expr '*' expr      { $$ = $1 * $3;                    }
       | expr '/' expr      { $$ = $1 / $3;                    }
       | '(' expr ')'       { $$ = $2;                         }
       | VARIABLE '=' expr  { $1->value = $3; $$=$3;           }

control : QUIT              { quit();                          }
;


%%



int yyerror(char *s)
{
  printf(s);
}



 static double kickStrength, nTurns=0;
 static int shotsPerTurn, distribName, what2show;
 static int whatCentroid; 
 static char fName[64];


int main(int argc, char* argv[])
{
    // embedded arithmetical functions
    add_func("sqrt",sqrt);
    add_func("cos",cos);
    add_func("sin",sin);
    add_func("exp",exp);
    add_func("log",log); 
    
   
    //start interactive mode

    printf(">>");
    
    yyin=stdin; 
    while(!feof(yyin))
      {
        yyparse();
      }


    return 0;
};

int yywrap()
{
	return 1;
}


// *********************
// interactive functions
// *********************


void help()
{
  printf("helping...\n");
}

void quit()
{
  printf("quitting...\n");
  exit(0);
}


// ******************************************************
// parser functions
// ******************************************************


int add_func(char *name, double (*func)(double))
{
  struct symtab *sp=symlook(name);
  sp->funcptr=func;
}

int add_var(char *name, double value)
{
  struct symtab *sp=symlook(name);
  sp->value=value;
}



