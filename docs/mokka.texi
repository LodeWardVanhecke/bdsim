As well as using the gmad format to describe user-defined physical geometry it is also possible to use a Mokka style format. This format is currently in the form of a dumped MySQL database format - although future versions of BDSIM will also support online querying of MySQL databases. Note that throughout any of the Mokka files, a @code{#} may be used to represent a commented line. There are three key stages, which are detailed in the following sections, that are required to setting up the Mokka geometry:

@itemize
@item Describing the geometry
@item Creating a geometry list
@item Defining a Mokka Element to load geometry descriptions from a list
@end itemize

@subsection Describing the geometry

An object must be described by creating a MySQL file containing commands that would typically be used for uploading/creating a database and a corresponding new table into a MySQL database. BDSIM supports only a few such commands - specifically the @code{CREATE TABLE} and @code{INSERT INTO} commands. When writing a table to describe a solid there are some parameters that are common to all solid types (such as @code{NAME} and @code{MATERIAL}) and some that are more specific (such as those relating to radii for cone objects). A full list of the standard and specific table parameters, as well as some basic examples, are given below with each solid type. All files containing geometry descriptions must have the following database creation commands at the top of the file:



@code{DROP DATABASE IF EXISTS DATABASE_NAME;}


@code{CREATE DATABASE DATABASE_NAME;}


@code{USE DATABASE_NAME;}


A table must be created to allow for the insertion of the geometry descriptions. A table is created using the following, MySQL compliant, commands:



@multitable{@code{CREATE TABLE TABLE-NAME_GEOMETRY-TYPE (}}{@code{VARIABLE-TYPE,}}

@item @code{CREATE TABLE TABLE-NAME_GEOMETRY-TYPE (}
@tab @ @ @ @ @ @ @ 

@item @code{TABLE-PARAMETER}
@tab @code{VARIABLE-TYPE,}

@item @code{TABLE-PARAMETER}
@tab @code{VARIABLE-TYPE,}

@item @code{TABLE-PARAMETER}
@tab @code{VARIABLE-TYPE}

@item @code{);}
@tab @ @ @ @ @ @ @ 


@end multitable

Once a table has been created values must be entered into it in order to define the solids and position them. The insertion command must appear after the table creation and must the MySQL compliant table insertion command:

@code{INSERT INTO TABLE-NAME_GEOMETRY-TYPE VALUES(value1, value2, "char-value", ...);}

The values must be inserted in the same order as their corresponding parameter types are described in the table creation. Note that ALL length types must be specified in mm and that ALL angles must be in radians.


An example of two simple boxes with no visual attributes set is shown below. The first box is a simple vacuum cube whilst the second is an iron box with length_x = 10mm, length_y = 150mm, length_z = 50mm, positioned at x=1m, y=0, z=0.5m and with zero rotation.


@multitable{@code{CREATE TABLE mytable_BOX (}}{@code{VARIABLE-TYPE,}}

@item @code{CREATE TABLE mytable_BOX (}
@tab @ @ @ @ @ @ @ 

@item @code{NAME}
@tab @code{VARCHAR(32),}

@item @code{MATERIAL}
@tab @code{VARCHAR(32),}

@item @code{LENGTHX}
@tab @code{DOUBLE(10,3),}

@item @code{LENGTHY}
@tab @code{DOUBLE(10,3),}

@item @code{LENGTHZ}
@tab @code{DOUBLE(10,3),}

@item @code{POSX}
@tab @code{DOUBLE(10,3),}

@item @code{POSY}
@tab @code{DOUBLE(10,3),}

@item @code{POSZ}
@tab @code{DOUBLE(10,3),}

@item @code{ROTPSI}
@tab @code{DOUBLE(10,3),}

@item @code{ROTTHETA}
@tab @code{DOUBLE(10,3),}

@item @code{ROTPHI}
@tab @code{DOUBLE(10,3)}

@item @code{);}
@tab @ @ @ @ @ @ @ 

@end multitable

@noindent @code{INSERT INTO mytable_BOX VALUES("a_box","vacuum", 50.0, 50.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);}


@noindent @code{INSERT INTO mytable_BOX VALUES("another_box","iron", 10.0, 150.0, 50.0, 1000.0, 0.0, 500.0, 0.0, 0.0, 0.0);}

@

Further examples of the Mokka geometry implementation can be found in the examples/Mokka/General directory. See the common table parameters and solid type sections below for more information on the table parameters available for use.


@subsubsection Common Table Parameters

The following is a list of table parameters that are common to all solid types either as an optional or mandatory parameter:

@itemize @bullet

@item @code{NAME} 


Variable type: @code{VARCHAR(32)}


      This is an optional parameter. If supplied, then the Geant4 LogicalVolume associated with the solid will be labelled with this name. The default is set to be the table's name plus an automatically assigned volume number.

@item @code{MATERIAL} 


Variable type: @code{VARCHAR(32)}


      This is an optional parameter. If supplied, then the volume will be created with this material type - note that the material must be given as a character string inside double quotation marks(``). The default material is set as Vacuum.      

@item @code{PARENTNAME} 


Variable type: @code{VARCHAR(32)}


      This is an optional parameter. If supplied, then the volume will be placed as a daughter volume to the object with @code{ID} equal to @code{PARENTNAME}. The default parent is set to be the Component Volume. Note that if @code{PARENTID} is set to the Component Volume then @code{POSZ} will be defined with respect to the start of the object. Else @code{POSZ} will be defined with respect to the center of the parent object.


@item @code{ALIGNIN} 


Variable type: @code{INTEGER(11)}


      This is an optional parameter. If set to 1 then the placement of components will be rotated and translated such that the incoming beamline will pass through the z-axis of this object. The default is set to 0.

@item @code{ALIGNOUT} 


Variable type: @code{INTEGER(11)}


      This is an optional parameter. If set to 1 then the placement of the next beamline component will be rotated and translated such that the outgoing beamline will pass through the z-axis of this object. The default is set to 0.

@item @code{SETSENSITIVE} 


Variable type: @code{INTEGER(11)}


      This is an optional parameter. If set to 1 then the object will be set up to register energy depositions made within it and to also record the z-position at which this deposition occurs. This information will be saved in the ELoss Histogram if using ROOT output. The default is set to 0.

@item @code{MAGTYPE} 


Variable type: @code{VARCHAR(32)}


      This is an optional parameter. If supplied, then the object will be set up to produce the appropriate magnetic field using the supplied @code{K1} or @code{K2} table parameter values . Two magnet types are available - ``QUAD'' and ``SEXT''. The default is set to no magnet type. Note that if @code{MAGTYPE} is set to a value whilst @code{K1} or @code{K2} are not set, then no magnetic field will be implemented.

@item @code{K1} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. If set to a value other than zero, in conjuction with @code{MAGTYPE} set to ``QUAD'' then a quadrupole field with this @code{K1} value will be set up within the object. Default it set to zero.


@item @code{K2} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. If set to a value other than zero, in conjuction with @code{MAGTYPE} set to ``SEXT'' then a sextupole field with this @code{K2} value will be set up within the object. Default it set to zero.

@item @code{POSX} 


Variable type: @code{DOUBLE(10,3)}


      This is a required parameter. This is the X-position in mm used to place the object in the component volume. It is defined with respect to the center of the component volume and with respect to the component volume's rotation.

@item @code{POSY} 


Variable type: @code{DOUBLE(10,3)}


      This is a required parameter. This is the Y-position in mm used to place the object in the component volume. It is defined with respect to the center of the component volume and with respect to the component volume's rotation.

@item @code{POSZ} 


Variable type: @code{DOUBLE(10,3)}


      This is a required parameter. This is the Z-position in mm used to place the object in the component volume. It is defined with respect to the start of the component volume and with respect to the component volume's rotation.

@item @code{ROTPSI} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. This is the psi Euler angle in radians used to rotate the obejct before it is placed. The default is set to zero.

@item @code{ROTTHETA} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. This is the theta Euler angle in radians used to rotate the obejct before it is placed. The default is set to zero.


@item @code{ROTPHI} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. This is the phi Euler angle in radians used to rotate the obejct before it is placed. The default is set to zero.


@item @code{RED} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. This is the red component of the RGB colour assigned to the object and should be a value between 0 and 1. The default is set to zero.


@item @code{BLUE} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. This is the blue component of the RGB colour assigned to the object and should be a value between 0 and 1. The default is set to zero.


@item @code{GREEN} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. This is the green component of the RGB colour assigned to the object and should be a value between 0 and 1. The default is set to zero.


@item @code{VISATT} 


Variable type: @code{VARCHAR(32)}


      This is an optional parameter. This is the visual state setting for the object. Setting this to ``W'' results in a wireframe displayment of the object. ``S'' produces a shaded solid and ``I'' leaves the object invisible. The default is set to be wireframe.


@end itemize


@subsubsection 'Box' Solid Types

Append @code{_BOX} to the table name in order to make use of the G4Box solid type. The following table parameters are specific to the box solid:

@itemize @bullet

@item @code{LENGTHX} 


Variable type: @code{DOUBLE(10,3)}


      This is a required  parameter. This value will be used to specify the x-extent of the box's dimensions.

@item @code{LENGTHY} 


Variable type: @code{DOUBLE(10,3)}


      This is a required  parameter. This value will be used to specify the y-extent of the box's dimensions.

@item @code{LENGTHZ} 


Variable type: @code{DOUBLE(10,3)}


      This is a required  parameter. This value will be used to specify the z-extent of the box's dimensions.

@end itemize

@subsubsection 'Trapezoid' Solid Types

Append @code{_TRAP} to the table name in order to make use of the G4Trd solid type - which is deined as a trapezoid with the X and Y dimensions varying along z functions. The following table parameters are specific to the box solid:

@itemize @bullet

@item @code{LENGTHXPLUS} 


Variable type: @code{DOUBLE(10,3)}


      This is a required  parameter. This value will be used to specify the x-extent of the box's dimensions at the surface positioned at +dz.

@item @code{LENGTHXPMINUS} 


Variable type: @code{DOUBLE(10,3)}


      This is a required  parameter. This value will be used to specify the x-extent of the box's dimensions at the surface positioned at -dz.

@item @code{LENGTHYPLUS} 


Variable type: @code{DOUBLE(10,3)}


      This is a required  parameter. This value will be used to specify the y-extent of the box's dimensions at the surface positioned at +dz.

@item @code{LENGTHYPMINUS} 


Variable type: @code{DOUBLE(10,3)}


      This is a required  parameter. This value will be used to specify the y-extent of the box's dimensions at the surface positioned at -dz.

@item @code{LENGTHZ} 


Variable type: @code{DOUBLE(10,3)}


      This is a required  parameter. This value will be used to specify the z-extent of the box's dimensions.

@end itemize

@subsubsection 'Cone' Solid Types

Append @code{_CONE} to the table name in order to make use of the G4Cons solid type. The following table parameters are specific to the cone solid:

@itemize @bullet

@item @code{LENGTH} 


Variable type: @code{DOUBLE(10,3)}


      This is a required  parameter. This value will be used to specify the z-extent of the cone's dimensions.

@item @code{RINNERSTART} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. If set then this value will be used to specify the inner radius of the start of the cone. The default value is zero.

@item @code{RINNEREND} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. If set then this value will be used to specify the inner radius of the end of the cone. The default value is zero.

@item @code{ROUTERSTART} 


Variable type: @code{DOUBLE(10,3)}


      This is a required parameter. This value will be used to specify the outer radius of the start of the cone. 

@item @code{ROUTEREND} 


Variable type: @code{DOUBLE(10,3)}


      This is a required parameter. This value will be used to specify the outer radius of the end of the cone. 

@item @code{STARTPHI} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. If set then this value will be used to specify the starting angle of the cone. The default value is zero.

@item @code{DELTAPHI} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. If set then this value will be used to specify the delta angle of the cone. The default value is 2*PI.


@end itemize

@subsubsection 'Torus' Solid Types

Append @code{_TORUS} to the table name in order to make use of the G4Torus solid type. The following table parameters are specific to the torus solid:

@itemize @bullet

@item @code{RINNER} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. If set then this value will be used to specify the inner radius of the torus tube. The default value is zero.

@item @code{ROUTER} 


Variable type: @code{DOUBLE(10,3)}


      This is a required parameter. This value will be used to specify the outer radius of the torus tube.

@item @code{RSWEPT} 


Variable type: @code{DOUBLE(10,3)}


      This is a required parameter. This value will be used to specify the swept radius of the torus. It is defined as being the distance from the center of the torus ring to the center of the torus tube. For this reason this value should not be set to less than @code{ROUTER}.

@item @code{STARTPHI} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. If set then this value will be used to specify the starting angle of the torus. The default value is zero.

@item @code{DELTAPHI} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. If set then this value will be used to specify the delta swept angle of the torus. The default value is 2*PI.


@end itemize
@subsubsection 'Polycone' Solid Types

Append @code{_POLYCONE} to the table name in order to make use of the G4Cons solid type. The following table parameters are specific to the polycone solid:

@itemize @bullet

@item @code{NZPLANES} 


Variable type: @code{INTEGER(11)}


      This is a required  parameter. This value will be used to specify the number of z-planes to be used in the polycone. This value must be set to greater than 1.

@item @code{PLANEPOS1, PLANEPOS2, ...,  PLANEPOSN} 


Variable type: @code{DOUBLE(10,3)}


      These are required parameters. These values will be used to specify the z-position of the corresponding z-plane of the polycone. There should be as many @code{PLANEPOS} parameters set as the number of z-planes. For example, 3 z-planes will require that @code{PLANEPOS1}, @code{PLANEPOS2}, and @code{PLANEPOS3} are all set up.

@item @code{RINNER1, RINNER2, ...,  RINNERN} 


Variable type: @code{DOUBLE(10,3)}


      These are required parameters. These values will be used to specify the inner radius of the corresponding z-plane of the polycone. There should be as many @code{RINNER} parameters set as the number of z-planes. For example, 3 z-planes will require that @code{RINNER1}, @code{RINNER2}, and @code{RINNER3} are all set up.

@item @code{ROUTER1, ROUTER2, ...,  ROUTERN} 


Variable type: @code{DOUBLE(10,3)}


      These are required parameters. These values will be used to specify the outer radius of the corresponding z-plane of the polycone. There should be as many @code{ROUTER} parameters set as the number of z-planes. For example, 3 z-planes will require that @code{ROUTER1}, @code{ROUTER2}, and @code{ROUTER3} are all set up.


@item @code{STARTPHI} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. If set then this value will be used to specify the starting angle of the polycone. The default value is zero.

@item @code{DELTAPHI} 


Variable type: @code{DOUBLE(10,3)}


      This is an optional parameter. If set then this value will be used to specify the delta angle of the polycone. The default value is 2*PI.


@end itemize

@subsection Creating a geometry list

A geometry list is a simple file consisting of a list of filenames that contain geometry descriptions. This is the file that should be passed to the GMAD file when defining the mokka element. An example of a geometry list containing 'boxes.sql' and 'cones.sql' would be:

@code{#  '#' symbols can be used for commenting out an entire line}


@code{/directory/boxes.sql}


@code{/directory/cones.sql}

@subsection Defining a Mokka element in the gmad file

The Mokka element can be defined by the following command:

@code{<element_name> : element, geometry=format:filename, attributes}

where @code{format} must be set to @code{mokka} and @code{filename} must point to a file that contains a list of files that have the geometry descriptions.

for example,

@code{collimator : element, geometry=mokka:coll_geomlist.sql}

