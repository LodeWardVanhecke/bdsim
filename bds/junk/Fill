src/BDSAbsorber.cc:				      BDSGlobals->GetComponentBoxSize()/2,
src/BDSAbsorber.cc:				      BDSGlobals->GetComponentBoxSize()/2,
src/BDSAbsorber.cc:			    theMaterials->LCVacuum,
src/BDSAbsorber.cc:				  BDSGlobals->GetComponentBoxSize()/2,
src/BDSAbsorber.cc:				  BDSGlobals->GetComponentBoxSize()/2,
src/BDSAbsorber.cc:			theMaterials->LCVacuum,
src/BDSAbsorber.cc:  itsSolidLogVol->
src/BDSAbsorber.cc:				       BDSGlobals->GetThresholdCutCharged()));
src/BDSAcceleration.cc://      ------------ BDSAcceleration physics process --------
src/BDSAcceleration.cc:G4double z=(trackData.GetPosition()).z()+BDSGlobals->GetWorldSizeZ();
src/BDSAcceleratorType.cc:  itsBeamKineticEnergy=itsBeamTotalEnergy-
src/BDSAcceleratorType.cc:                         itsBeamParticleDefinition->GetPDGMass();
src/BDSAcceleratorType.cc:  itsGamma = itsBeamTotalEnergy/(itsBeamParticleDefinition->GetPDGMass());
src/BDSAcceleratorType.cc:   itsBeamParticleDefinition= particleTable->FindParticle("e-");
src/BDSAcceleratorType.cc:   itsBeamMomentum=sqrt(pow(itsBeamTotalEnergy,2)-
src/BDSAcceleratorType.cc:			pow(itsBeamParticleDefinition->GetPDGMass(),2));
src/BDSAcceleratorType.cc:   itsAlphaX=6.981042876e-3; 
src/BDSAcceleratorType.cc:   itsAlphaY=2.089118084e-2; 
src/BDSAcceleratorType.cc:   itsNormalisedXEmittance = 3.6e-06*m  ; 
src/BDSAcceleratorType.cc:   itsNormalisedYEmittance = 0.04e-06*m  ;
src/BDSAcceleratorType.cc:     //itsRelativeEnergySpread=1.5e-3;
src/BDSAcceleratorType.cc:    itsGaussianRelativeEnergySpread=3.2e-4 ;  //please change
src/BDSAcceleratorType.cc:   itsBeamParticleDefinition= particleTable->FindParticle("e-");
src/BDSAcceleratorType.cc:   itsBeamMomentum=sqrt(pow(itsBeamTotalEnergy,2)-
src/BDSAcceleratorType.cc:			pow(itsBeamParticleDefinition->GetPDGMass(),2));
src/BDSAcceleratorType.cc:   itsNormalisedXEmittance = 10.0e-06*m  ;
src/BDSAcceleratorType.cc:   itsNormalisedYEmittance = 0.03e-06*m  ;
src/BDSAcceleratorType.cc:     //itsRelativeEnergySpread=1.5e-3;
src/BDSAcceleratorType.cc:    itsGaussianRelativeEnergySpread=3.2e-4 ;
src/BDSAcceleratorType.cc:   itsBeamParticleDefinition= particleTable->FindParticle("e-");
src/BDSAcceleratorType.cc:   itsBeamMomentum=sqrt(pow(itsBeamTotalEnergy,2)-
src/BDSAcceleratorType.cc:			pow(itsBeamParticleDefinition->GetPDGMass(),2));
src/BDSAcceleratorType.cc:   itsAlphaX=-1.95133;
src/BDSAcceleratorType.cc:   itsSigmaZ = 30.e-6*m ;
src/BDSAcceleratorType.cc:   itsNormalisedXEmittance = 0.68e-06*m  ;
src/BDSAcceleratorType.cc:   itsNormalisedYEmittance = 0.01e-06*m  ;
src/BDSAcceleratorType.cc:   itsGaussianRelativeEnergySpread = 2.8e-3 ;
src/BDSAcceleratorType.cc:   itsFlatRelativeEnergySpread = 1.e-2 ;
src/BDSAcceleratorType.cc:   itsBeamParticleDefinition= particleTable->FindParticle("e-");
src/BDSAcceleratorType.cc:   itsBeamMomentum=sqrt(pow(itsBeamTotalEnergy,2)-
src/BDSAcceleratorType.cc:			pow(itsBeamParticleDefinition->GetPDGMass(),2));
src/BDSAcceleratorType.cc:   itsSigmaZ = 30.e-6*m ;
src/BDSAcceleratorType.cc:   itsNormalisedXEmittance = 2.0e-06*m  ;
src/BDSAcceleratorType.cc:   itsNormalisedYEmittance = 0.01e-06*m  ;
src/BDSAcceleratorType.cc:   //   itsRelativeEnergySpread = 2.8e-3 ;
src/BDSAcceleratorType.cc:   itsAlphaY=-1.91574;
src/BDSAcceleratorType.cc:   itsGaussianRelativeEnergySpread = 2.8e-3 ;
src/BDSAcceleratorType.cc:   itsFlatRelativeEnergySpread = 1.e-2 ;
src/BDSComptonEngine.cc://      ------------ BDSComptonEngine physics process --------
src/BDSComptonEngine.cc:  // H.Burkardt, SL/Note 93-73
src/BDSComptonEngine.cc:   //   BoostToLab.boost(-Boost);
src/BDSComptonEngine.cc:  G4LorentzRotation BoostToLab(-Boost);
src/BDSComptonEngine.cc:  if(G4UniformRand()>0.25){costh=2.*G4UniformRand()-1.;}  
src/BDSComptonEngine.cc:      if(G4UniformRand()<0.5)costh=-costh;
src/BDSComptonEngine.cc:  sinth2=1.-costh2;
src/BDSComptonEngine.cc:  x = 1/(1+ GamInLab.e()*(1-costh)/electron_mass_c2);
src/BDSComptonEngine.cc:  weight_CovT= x* x * (x+1/x-sinth2)/(1+costh2);
src/BDSComptonEngine.cc:  itsScatteredEl.setPx(-itsScatteredGam.px());
src/BDSComptonEngine.cc:  itsScatteredEl.setPy(-itsScatteredGam.py());
src/BDSComptonEngine.cc:  itsScatteredEl.setPz(GamInLab.e()-itsScatteredGam.pz());
src/BDSConvParticleChange.cc:// GEANT4 tag $Name:  $
src/BDSConvParticleChange.cc:// --------------------------------------------------------------
src/BDSConvParticleChange.cc:// ------------------------------------------------------------
src/BDSConvParticleChange.cc:// --------------------------------------------------------------
src/BDSConvParticleChange.cc://----------------------------------------------------------------
src/BDSConvParticleChange.cc:  if(abs(aParticle->GetDefinition()->GetPDGEncoding())==13)
src/BDSConvParticleChange.cc:    aTrack->SetWeight(theMuonWeight);
src/BDSConvParticleChange.cc:  if (IsGoodForTracking) aTrack->SetGoodForTrackingFlag();
src/BDSConvParticleChange.cc:  aTrack->SetTouchableHandle(theCurrentTrack->GetTouchableHandle());
src/BDSConvParticleChange.cc:  if (IsGoodForTracking) aTrack->SetGoodForTrackingFlag();
src/BDSConvParticleChange.cc:  aTrack->SetTouchableHandle((G4VTouchable*)0);
src/BDSConvParticleChange.cc:  if (IsGoodForTracking) aTrack->SetGoodForTrackingFlag();
src/BDSConvParticleChange.cc:  aTrack->SetTouchableHandle(theCurrentTrack->GetTouchableHandle());
src/BDSConvParticleChange.cc://----------------------------------------------------------------
src/BDSConvParticleChange.cc:  theEnergyChange          = pParticle->GetKineticEnergy();
src/BDSConvParticleChange.cc:  theMomentumDirectionChange        = pParticle->GetMomentumDirection();
src/BDSConvParticleChange.cc:  thePolarizationChange    = pParticle->GetPolarization();
src/BDSConvParticleChange.cc:  theProperTimeChange      = pParticle->GetProperTime();
src/BDSConvParticleChange.cc:  theMassChange = pParticle->GetMass();
src/BDSConvParticleChange.cc:  theChargeChange = pParticle->GetCharge();
src/BDSConvParticleChange.cc://----------------------------------------------------------------
src/BDSConvParticleChange.cc:  G4StepPoint* pPreStepPoint  = pStep->GetPreStepPoint(); 
src/BDSConvParticleChange.cc:  G4StepPoint* pPostStepPoint = pStep->GetPostStepPoint(); 
src/BDSConvParticleChange.cc:  G4Track*     aTrack  = pStep->GetTrack();
src/BDSConvParticleChange.cc:  pPostStepPoint->SetMass(theMassChange);
src/BDSConvParticleChange.cc:  pPostStepPoint->SetCharge(theChargeChange);  
src/BDSConvParticleChange.cc:  G4double energy = pPostStepPoint->GetKineticEnergy() 
src/BDSConvParticleChange.cc:                    + (theEnergyChange - pPreStepPoint->GetKineticEnergy()); 
src/BDSConvParticleChange.cc:    G4ThreeVector pMomentum =  pPostStepPoint->GetMomentum() 
src/BDSConvParticleChange.cc:	            - pPreStepPoint->GetMomentum());
src/BDSConvParticleChange.cc:    pPostStepPoint->SetMomentumDirection(direction);
src/BDSConvParticleChange.cc:    pPostStepPoint->SetKineticEnergy( energy );
src/BDSConvParticleChange.cc:    pPostStepPoint->SetMomentumDirection(G4ThreeVector(1., 0., 0.));
src/BDSConvParticleChange.cc:    pPostStepPoint->SetKineticEnergy(0.0);
src/BDSConvParticleChange.cc:  pPostStepPoint->AddPolarization( thePolarizationChange
src/BDSConvParticleChange.cc:				   - pPreStepPoint->GetPolarization());
src/BDSConvParticleChange.cc:  pPostStepPoint->AddPosition( thePositionChange 
src/BDSConvParticleChange.cc:			       - pPreStepPoint->GetPosition() );
src/BDSConvParticleChange.cc:  pPostStepPoint->AddGlobalTime( theTimeChange
src/BDSConvParticleChange.cc:				 - pPreStepPoint->GetGlobalTime());
src/BDSConvParticleChange.cc:  pPostStepPoint->AddLocalTime( theTimeChange 
src/BDSConvParticleChange.cc:				 - pPreStepPoint->GetGlobalTime()); 
src/BDSConvParticleChange.cc:  pPostStepPoint->AddProperTime( theProperTimeChange 
src/BDSConvParticleChange.cc:				 - pPreStepPoint->GetProperTime());
src/BDSConvParticleChange.cc:  G4double newWeight= theWeightChange/(pPreStepPoint->GetWeight())*(pPostStepPoint->GetWeight());
src/BDSConvParticleChange.cc:  pPostStepPoint->SetWeight( newWeight );
src/BDSConvParticleChange.cc:  G4StepPoint* pPostStepPoint = pStep->GetPostStepPoint(); 
src/BDSConvParticleChange.cc:  G4Track*     aTrack  = pStep->GetTrack();
src/BDSConvParticleChange.cc:  pPostStepPoint->SetMass(theMassChange);
src/BDSConvParticleChange.cc:  pPostStepPoint->SetCharge(theChargeChange);  
src/BDSConvParticleChange.cc:  pPostStepPoint->SetMomentumDirection(theMomentumDirectionChange);
src/BDSConvParticleChange.cc:  pPostStepPoint->SetKineticEnergy( theEnergyChange );
src/BDSConvParticleChange.cc:  pPostStepPoint->SetPolarization( thePolarizationChange );
src/BDSConvParticleChange.cc:  pPostStepPoint->SetPosition( thePositionChange  );
src/BDSConvParticleChange.cc:  pPostStepPoint->SetGlobalTime( theTimeChange  );
src/BDSConvParticleChange.cc:  pPostStepPoint->AddLocalTime( theTimeChange 
src/BDSConvParticleChange.cc:				 - aTrack->GetGlobalTime());
src/BDSConvParticleChange.cc:  pPostStepPoint->SetProperTime( theProperTimeChange  );
src/BDSConvParticleChange.cc:  if(abs(aTrack->GetDynamicParticle()->GetDefinition()->GetPDGEncoding())==13)
src/BDSConvParticleChange.cc:      pPostStepPoint->SetWeight( theMuonWeight );
src/BDSConvParticleChange.cc:    pPostStepPoint->SetWeight( theWeightChange );
src/BDSConvParticleChange.cc:  G4StepPoint* pPostStepPoint = pStep->GetPostStepPoint(); 
src/BDSConvParticleChange.cc:  G4Track*     aTrack  = pStep->GetTrack();
src/BDSConvParticleChange.cc:  pPostStepPoint->SetMass(theMassChange);
src/BDSConvParticleChange.cc:  pPostStepPoint->SetCharge(theChargeChange);  
src/BDSConvParticleChange.cc:  pPostStepPoint->SetMomentumDirection(theMomentumDirectionChange);
src/BDSConvParticleChange.cc:  pPostStepPoint->SetKineticEnergy( theEnergyChange );
src/BDSConvParticleChange.cc:  pPostStepPoint->SetPolarization( thePolarizationChange );
src/BDSConvParticleChange.cc:  pPostStepPoint->SetPosition( thePositionChange  );
src/BDSConvParticleChange.cc:  pPostStepPoint->SetGlobalTime( theTimeChange  );
src/BDSConvParticleChange.cc:  pPostStepPoint->AddLocalTime( theTimeChange 
src/BDSConvParticleChange.cc:				 - aTrack->GetGlobalTime());
src/BDSConvParticleChange.cc:  pPostStepPoint->SetProperTime( theProperTimeChange  );
src/BDSConvParticleChange.cc:  pPostStepPoint->SetWeight( theWeightChange );
src/BDSConvParticleChange.cc://----------------------------------------------------------------
src/BDSConvParticleChange.cc:// use base-class DumpInfo
src/BDSConvParticleChange.cc:  G4cout << "        Position - x (mm)   : " 
src/BDSConvParticleChange.cc:  G4cout << "        Position - y (mm)   : " 
src/BDSConvParticleChange.cc:  G4cout << "        Position - z (mm)   : " 
src/BDSConvParticleChange.cc:  G4cout << "        Momentum Direct - x : " 
src/BDSConvParticleChange.cc:  G4cout << "        Momentum Direct - y : " 
src/BDSConvParticleChange.cc:  G4cout << "        Momentum Direct - z : " 
src/BDSConvParticleChange.cc:  G4cout << "        Polarization - x    : " 
src/BDSConvParticleChange.cc:  G4cout << "        Polarization - y    : " 
src/BDSConvParticleChange.cc:  G4cout << "        Polarization - z    : " 
src/BDSConvParticleChange.cc:    accuracy = abs(theMomentumDirectionChange.mag2()-1.0);
src/BDSConvParticleChange.cc:  accuracy = (aTrack.GetGlobalTime()- theTimeChange)/ns;
src/BDSConvParticleChange.cc:  accuracy = (aTrack.GetProperTime() - theProperTimeChange )/ns;
src/BDSConvParticleChange.cc:  accuracy = -1.0*theEnergyChange/MeV;
src/BDSDecapole.cc:      if(BDSGlobals->GetIncludeIronMagFields())
src/BDSDecapole.cc:	  polePos[0]=-BDSGlobals->GetMagnetPoleRadius()*sin(pi/8);
src/BDSDecapole.cc:	  polePos[1]=BDSGlobals->GetMagnetPoleRadius()*cos(pi/8);
src/BDSDecapole.cc:	  polePos[3]=-999.;//flag to use polePos rather than local track
src/BDSDecapole.cc:	  itsMagField->GetFieldValue(polePos,Bfield);
src/BDSDecapole.cc:	    BDSGlobals->GetMagnetPoleSize()/
src/BDSDecapole.cc:	    (BDSGlobals->GetComponentBoxSize()/2-
src/BDSDecapole.cc:	     BDSGlobals->GetMagnetPoleRadius());
src/BDSDecapole.cc:      if(BDSGlobals->GetSynchRadOn()&& BDSGlobals->GetSynchRescale())
src/BDSDecapole.cc:  itsStepper->SetBQuadPrime(itsBQuadPrime);
src/BDSDecMagField.cc:  if(Point[3]==-999.)
src/BDSDecMagField.cc:	G4TransportationManager::GetTransportationManager()->
src/BDSDecMagField.cc:      LocalR = DecNavigator->GetCurrentLocalCoordinate();
src/BDSDecMagField.cc:				      -LocalR.y()*LocalR.y())*itsBQuadPrime/24;
src/BDSDecMagField.cc:  Bfield[1]=(pow(LocalR.x(),4)-6*LocalR.x()*LocalR.x()*LocalR.y()*LocalR.y()+
src/BDSDecMagField.cc:  // factor of 24 is actually 4-factorial.
src/BDSDecStepper.cc:  G4double kappa=  -fPtrMagEqOfMot->FCof()*itsBQuadPrime/InitMag;
src/BDSDecStepper.cc:  if(abs(kappa)<1.e-20)
src/BDSDecStepper.cc:	G4TransportationManager::GetTransportationManager()->
src/BDSDecStepper.cc:      G4AffineTransform LocalAffine=DecNavigator->GetLocalToGlobalTransform();
src/BDSDecStepper.cc:      G4ThreeVector LocalR = DecNavigator->GetCurrentLocalCoordinate();
src/BDSDecStepper.cc:      G4ThreeVector LocalRp= (DecNavigator->ComputeLocalAxis(v0)).unit();
src/BDSDecStepper.cc:      G4double x02My02=(x0*x0-y0*y0);
src/BDSDecStepper.cc:      G4double By=pow(x0,4)-6.0*x0*x0*y0*y0+pow(y0,4);
src/BDSDecStepper.cc:      //      G4double y3fac=pow(y0,3)-3*y0*x0*x0;
src/BDSDecStepper.cc:      //     G4double x3fac=pow(x0,3)-3*x0*y0*y0;
src/BDSDecStepper.cc:      // extra minus signs because x,y_machine = - x_,-y_geant_world
src/BDSDecStepper.cc:      LocalRpp.setY(-zp*Bx);
src/BDSDecStepper.cc:      LocalRpp.setZ( xp*By - yp*Bx);
src/BDSDecStepper.cc:      //LocalRpp.setX(-zp*x3fac);
src/BDSDecStepper.cc:      //LocalRpp.setY(-zp*y3fac);
src/BDSDecStepper.cc:	  G4double dz=sqrt(h2*(1.-h2*R_1*R_1/12)-dx*dx-dy*dy);
src/BDSDetectorConstruction.cc:// GEANT4 tag $Name:  $
src/BDSDetectorConstruction.cc://--------------------------
src/BDSDetectorConstruction.cc://--------------------------
src/BDSDetectorConstruction.cc:  RotY90->rotateY(pi_ov_2);
src/BDSDetectorConstruction.cc:  RotYM90->rotateY(-pi_ov_2);
src/BDSDetectorConstruction.cc:  //theOuterFieldManager->CreateChordFinder();
src/BDSDetectorConstruction.cc:  SpoilerMaterial=theMaterials->LCGraphite;
src/BDSDetectorConstruction.cc: //             |----------this is the number of variables
src/BDSDetectorConstruction.cc:  BDSAcceleratorType* TheAccelerator=BDSGlobals->GetAcceleratorType();
src/BDSDetectorConstruction.cc:  // Read in the MAD decks:Linux-g++/BDS_run/BDSDetectorConstruction.o] Error 1
src/BDSDetectorConstruction.cc:  BDSMADInterface mad(TheAccelerator->GetType()+"_BDS.optics",
src/BDSDetectorConstruction.cc:		     TheAccelerator->GetBeamTotalEnergy() );
src/BDSDetectorConstruction.cc:  G4cout<<" Beam total energy="<<TheAccelerator->GetBeamTotalEnergy()/GeV<<
src/BDSDetectorConstruction.cc:      (*iBeam)->SetSPos(s_tot+(*iBeam)->GetLength()/2);
src/BDSDetectorConstruction.cc:      s_tot+= (*iBeam)->GetLength();
src/BDSDetectorConstruction.cc:      G4double ang=(*iBeam)->GetAngle();
src/BDSDetectorConstruction.cc:	  x_tot+=(*iBeam)->GetLength()*sin(angle_tot);
src/BDSDetectorConstruction.cc:	  z_tot+=(*iBeam)->GetLength()*cos(angle_tot);
src/BDSDetectorConstruction.cc:	  G4double LinLen=((*iBeam)->GetLength()/ang*2*sin(ang/2));
src/BDSDetectorConstruction.cc:  BDSGlobals->SetGlobalBeamlineRotationY(atan(tan_tilt));
src/BDSDetectorConstruction.cc:  BDSGlobals->SetTotalS(s_tot);
src/BDSDetectorConstruction.cc:  // -----------------------------------
src/BDSDetectorConstruction.cc:  // -----------------------------------
src/BDSDetectorConstruction.cc:  BDSGlobals->SetWorldSizeZ(WorldSizeZ);
src/BDSDetectorConstruction.cc:  G4double WorldRadius=10*BDSGlobals->GetTunnelRadius();
src/BDSDetectorConstruction.cc:  BDSRoot->SetEnergyLossZMax(abs(z_tot));
src/BDSDetectorConstruction.cc:  //  gDirectory->cd();
src/BDSDetectorConstruction.cc:  //gDirectory->cd("root:/Histos");
src/BDSDetectorConstruction.cc:  //BDSRoot->h1=new TH1F("h1", "Energy Loss",nBins,0.,zMax);
src/BDSDetectorConstruction.cc:  //G4cout<<" BDSDetectorConstruction: h1="<<BDSRoot->h1<<G4endl;
src/BDSDetectorConstruction.cc:  //TH1F* htempa=(TH1F*)gDirectory->Get("h1");
src/BDSDetectorConstruction.cc:  //G4cout<<" path="<<gDirectory->GetPath()<<G4endl;
src/BDSDetectorConstruction.cc:  //BDSRoot->h2=new TH1F("h2", "Brem event",nBins,0.,zMax);
src/BDSDetectorConstruction.cc:  if(WorldRadius<abs(x_tot)+BDSGlobals->GetComponentBoxSize())
src/BDSDetectorConstruction.cc:				   // theMaterials->LCAir,  //its material
src/BDSDetectorConstruction.cc:				   theMaterials->LCVacuum,  //its material
src/BDSDetectorConstruction.cc:  logicWorld->SetVisAttributes (G4VisAttributes::Invisible);
src/BDSDetectorConstruction.cc:  WorldUserLimits->SetMaxAllowedStep(1000*m);
src/BDSDetectorConstruction.cc:  logicWorld->SetUserLimits(WorldUserLimits);
src/BDSDetectorConstruction.cc:  G4cout<<"Charged Thresholdcut="<<BDSGlobals->GetThresholdCutCharged()/GeV<<" GeV"<<G4endl;
src/BDSDetectorConstruction.cc:  G4cout<<"Photon Thresholdcut="<<BDSGlobals->GetThresholdCutPhotons()/GeV<<" GeV"<<G4endl;
src/BDSDetectorConstruction.cc:  //---------------------------------------
src/BDSDetectorConstruction.cc:				   BDSGlobals->GetTunnelRadius(),
src/BDSDetectorConstruction.cc:				   10*BDSGlobals->GetTunnelRadius(),
src/BDSDetectorConstruction.cc:			theMaterials->LCConcrete,
src/BDSDetectorConstruction.cc:    //  logicWorld->SetVisAttributes (G4VisAttributes::Invisible);
src/BDSDetectorConstruction.cc:  TunnelLogVol->SetVisAttributes(new G4VisAttributes(G4Colour(0,1,1)));
src/BDSDetectorConstruction.cc:  TunnelUserLimits->SetMaxAllowedStep(1000*m);
src/BDSDetectorConstruction.cc:  TunnelLogVol->SetUserLimits(TunnelUserLimits);
src/BDSDetectorConstruction.cc:  logicWorld->SetSensitiveDetector(ECounter);
src/BDSDetectorConstruction.cc:  SDman->AddNewDetector(ECounter);
src/BDSDetectorConstruction.cc:  theECList->push_back(ECounter);
src/BDSDetectorConstruction.cc:  G4double s_local=-s_tot/2.;
src/BDSDetectorConstruction.cc:     (*LogVolCount)[(*iBeam)->GetG4LogicalVolume()->GetName()]=1;
src/BDSDetectorConstruction.cc:   angle_tot= -BDSGlobals->GetGlobalBeamlineRotationY();
src/BDSDetectorConstruction.cc:   G4double z_local=-z_tot/2;
src/BDSDetectorConstruction.cc:       (*iBeam)->SetZLower(z_local);
src/BDSDetectorConstruction.cc:       G4double ang=(*iBeam)->GetAngle();
src/BDSDetectorConstruction.cc:	   LinLen=((*iBeam)->GetLength()/ang)*2*sin(ang/2);
src/BDSDetectorConstruction.cc:	   delta_x=LinLen*sin(-angle_tot-ang/2);
src/BDSDetectorConstruction.cc:	   LinLen=(*iBeam)->GetLength();
src/BDSDetectorConstruction.cc:	   delta_x=LinLen*sin(-angle_tot);
src/BDSDetectorConstruction.cc:       x=x_local+delta_x/2+BDSGlobals->GetHorizontalBeamlineOffset();
src/BDSDetectorConstruction.cc:       y=BDSGlobals->GetVerticalBeamlineOffset();
src/BDSDetectorConstruction.cc:       // allow for the fact that trapezoids are defined along z-axis...
src/BDSDetectorConstruction.cc:	 RotateComponent->rotateY(angle_tot+pi/2+ang/2);
src/BDSDetectorConstruction.cc:	 RotateComponent->rotateY(angle_tot);
src/BDSDetectorConstruction.cc:       // allow for the fact that trapezoids are defined along z-axis...
src/BDSDetectorConstruction.cc:	 RotateComponent->rotateY(-angle_tot-pi/2-ang/2);
src/BDSDetectorConstruction.cc:	 RotateComponent->rotateY(-angle_tot);
src/BDSDetectorConstruction.cc:       (*iBeam)->SetZUpper(z_local);
src/BDSDetectorConstruction.cc:       G4LogicalVolume* LocalLogVol=(*iBeam)->GetG4LogicalVolume();
src/BDSDetectorConstruction.cc:       G4String LogVolName=LocalLogVol->GetName();
src/BDSDetectorConstruction.cc:       int nCopy=(*LogVolCount)[LogVolName]-1;
src/BDSDetectorConstruction.cc:       (*iBeam)->SetCopyNumber(nCopy);
src/BDSDetectorConstruction.cc:       G4LogicalVolume* SensVol=(*iBeam)->GetSensitiveVolume();
src/BDSDetectorConstruction.cc:	   (*iBeam)->SetBDSEnergyCounter(ECounter);
src/BDSDetectorConstruction.cc:	   SensVol->SetSensitiveDetector(ECounter);
src/BDSDetectorConstruction.cc:	   SDman->AddNewDetector(ECounter);
src/BDSDetectorConstruction.cc:	   theECList->push_back(ECounter);
src/BDSDetectorConstruction.cc:       LocalName=(*iBeam)->GetName()+"_phys";
src/BDSDetectorConstruction.cc:	    (*iBeam)->GetVisAttributes()->SetVisibility(true);
src/BDSDetectorConstruction.cc:	   //(*iBeam)->GetVisAttributes()->SetVisibility(false);
src/BDSDetectorConstruction.cc:	   //      (*iBeam)->GetVisAttributes()->SetForceSolid(true);
src/BDSDetectorConstruction.cc:	   (*iBeam)->GetG4LogicalVolume()->
src/BDSDetectorConstruction.cc:	     SetVisAttributes((*iBeam)->GetVisAttributes());
src/BDSDetectorConstruction.cc:       G4cout<< (*iBeam)->GetName()<<" low z="<<
src/BDSDetectorConstruction.cc:	 (*iBeam)->GetZLower()/m<<" upper z="<<(*iBeam)->GetZUpper()/m
src/BDSDetectorConstruction.cc:     BDSGlobals->GetVerticalBeamlineOffset()/m<<" m"<<G4endl;
src/BDSDetectorConstruction.cc:    = G4TransportationManager::GetTransportationManager()->GetFieldManager();
src/BDSDetectorConstruction.cc:   fieldMgr->SetDetectorField(magField);
src/BDSDetectorConstruction.cc:   fieldMgr->CreateChordFinder(magField);
src/BDSDetectorConstruction.cc:  G4RunManager::GetRunManager()->DefineWorldVolume(ConstructBDS());
src/BDSDetectorMessenger.cc:// GEANT4 tag $Name:  $
src/BDSDetectorMessenger.cc:  BDSdetDir->SetGuidance("BDS detector control.");
src/BDSDetectorMessenger.cc:  // AbsMaterCmd->SetGuidance("Select Material of the Absorber.");
src/BDSDetectorMessenger.cc:  //AbsMaterCmd->SetParameterName("choice",false);
src/BDSDetectorMessenger.cc:  //AbsMaterCmd->AvailableForStates(Idle);
src/BDSDetectorMessenger.cc:  //  GapMaterCmd->SetGuidance("Select Material of the Gap.");
src/BDSDetectorMessenger.cc:  //  GapMaterCmd->SetParameterName("choice",false);
src/BDSDetectorMessenger.cc:  //  GapMaterCmd->AvailableForStates(Idle);
src/BDSDetectorMessenger.cc:  //  AbsThickCmd->SetGuidance("Set Thickness of the Absorber");
src/BDSDetectorMessenger.cc:  //  AbsThickCmd->SetParameterName("Size",false);
src/BDSDetectorMessenger.cc:  //  AbsThickCmd->SetRange("Size>=0.");
src/BDSDetectorMessenger.cc:  //  AbsThickCmd->SetUnitCategory("Length");
src/BDSDetectorMessenger.cc:  //  AbsThickCmd->AvailableForStates(Idle);
src/BDSDetectorMessenger.cc:  //  GapThickCmd->SetGuidance("Set Thickness of the Gap");
src/BDSDetectorMessenger.cc:  //  GapThickCmd->SetParameterName("Size",false);
src/BDSDetectorMessenger.cc:  //  GapThickCmd->SetRange("Size>=0.");
src/BDSDetectorMessenger.cc:  //  GapThickCmd->SetUnitCategory("Length");  
src/BDSDetectorMessenger.cc:  //  GapThickCmd->AvailableForStates(Idle);
src/BDSDetectorMessenger.cc:  //  SizeYZCmd->SetGuidance("Set tranverse size of the quadimeter");
src/BDSDetectorMessenger.cc:  //  SizeYZCmd->SetParameterName("Size",false);
src/BDSDetectorMessenger.cc:  //  SizeYZCmd->SetRange("Size>0.");
src/BDSDetectorMessenger.cc:  //  SizeYZCmd->SetUnitCategory("Length");    
src/BDSDetectorMessenger.cc:  //  SizeYZCmd->AvailableForStates(Idle);
src/BDSDetectorMessenger.cc:  //  NbLayersCmd->SetGuidance("Set number of layers.");
src/BDSDetectorMessenger.cc:  //  NbLayersCmd->SetParameterName("NbLayers",false);
src/BDSDetectorMessenger.cc:  //  NbLayersCmd->SetRange("NbLayers>0 && NbLayers<500");
src/BDSDetectorMessenger.cc:  //  NbLayersCmd->AvailableForStates(Idle);
src/BDSDetectorMessenger.cc:  //  UpdateCmd->SetGuidance("Update quadimeter geometry.");
src/BDSDetectorMessenger.cc:  //  UpdateCmd->SetGuidance("This command MUST be applied before \"beamOn\" ");
src/BDSDetectorMessenger.cc:  //  UpdateCmd->SetGuidance("if you changed geometrical value(s).");
src/BDSDetectorMessenger.cc:  //  UpdateCmd->AvailableForStates(Idle);
src/BDSDetectorMessenger.cc:  MagFieldCmd->SetGuidance("Define magnetic field.");
src/BDSDetectorMessenger.cc:  MagFieldCmd->SetGuidance("Magnetic field will be in Y direction.");
src/BDSDetectorMessenger.cc:  MagFieldCmd->SetParameterName("By",false);
src/BDSDetectorMessenger.cc:  MagFieldCmd->SetUnitCategory("Magnetic flux density");
src/BDSDetectorMessenger.cc:  MagFieldCmd->AvailableForStates(Idle);  
src/BDSDetectorMessenger.cc:  //   { BDSDetector->SetAbsorberMaterial(newValue);}
src/BDSDetectorMessenger.cc:  //   { BDSDetector->SetGapMaterial(newValue);}
src/BDSDetectorMessenger.cc:  //   { BDSDetector->SetAbsorberThickness(AbsThickCmd->GetNewDoubleValue(newValue));}
src/BDSDetectorMessenger.cc:  //   { BDSDetector->SetGapThickness(GapThickCmd->GetNewDoubleValue(newValue));}
src/BDSDetectorMessenger.cc:  //   { BDSDetector->SetQuadSizeYZ(SizeYZCmd->GetNewDoubleValue(newValue));}
src/BDSDetectorMessenger.cc:  //   { BDSDetector->SetNbOfLayers(NbLayersCmd->GetNewIntValue(newValue));}
src/BDSDetectorMessenger.cc:  //   { BDSDetector->UpdateGeometry(); }
src/BDSDetectorMessenger.cc:   { BDSDetector->SetMagField(MagFieldCmd->GetNewDoubleValue(newValue));}
src/BDSDrift.cc:      // drift doesn't have an outer volume - but include it for laserwire
src/BDSDriftStepper.cc:      if(BDSGlobals->GetVerboseStep())
src/BDSDriftStepper.cc:	if(!BDSGlobals->GetVerboseEventNumber()||
src/BDSDriftStepper.cc:	   BDSGlobals->GetVerboseEventNumber()==event_number)
src/BDSeBremsstrahlung.cc:// GEANT4 tag $Name:  $
src/BDSeBremsstrahlung.cc://      ------------ BDSeBremsstrahlung physics process --------
src/BDSeBremsstrahlung.cc:// 26-09-96 extension of the total crosssection above 100 GeV, M.Maire
src/BDSeBremsstrahlung.cc://  1-10-96 new type G4OrderedTable; ComputePartialSumSigma(), M.Maire
src/BDSeBremsstrahlung.cc:// 16-10-96 DoIt() call to the non static GetEnergyCuts(), L.Urban
src/BDSeBremsstrahlung.cc:// 13-12-96 Sign corrected in grejmax and greject
src/BDSeBremsstrahlung.cc:// 20-03-97 new energy loss+ionisation+brems scheme, L.Urban
src/BDSeBremsstrahlung.cc:// 07-04-98 remove 'tracking cut' of the diffracted particle, MMa
src/BDSeBremsstrahlung.cc:// 13-08-98 new methods SetBining() PrintInfo()
src/BDSeBremsstrahlung.cc:// 03-03-99 Bug fixed in LPM effect, L.Urban
src/BDSeBremsstrahlung.cc:// 10-02-00 modifications , new e.m. structure, L.Urban
src/BDSeBremsstrahlung.cc:// 07-08-00 new cross section/en.loss parametrisation, LPM flag , L.Urban
src/BDSeBremsstrahlung.cc:// 21-09-00 corrections in the LPM implementation, L.Urban
src/BDSeBremsstrahlung.cc:// 28-05-01 V.Ivanchenko minor changes to provide ANSI -wall compilation
src/BDSeBremsstrahlung.cc:// 09-08-01 new methods Store/Retrieve PhysicsTable (mma)
src/BDSeBremsstrahlung.cc:// 17-09-01 migration of Materials to pure STL (mma)
src/BDSeBremsstrahlung.cc:// 21-09-01 completion of RetrievePhysicsTable() (mma)
src/BDSeBremsstrahlung.cc:// 29-10-01 all static functions no more inlined (mma)
src/BDSeBremsstrahlung.cc:// 08-11-01 particleMass becomes a local variable
src/BDSeBremsstrahlung.cc:// --------------------------------------------------------------
src/BDSeBremsstrahlung.cc:        theMeanFreePathTable->clearAndDestroy();
src/BDSeBremsstrahlung.cc:  const G4double coef1 = -0.5, coef2 = 2./9.;
src/BDSeBremsstrahlung.cc:  G4double* GammaCutInKineticEnergy = G4Gamma::Gamma()->GetEnergyCuts();
src/BDSeBremsstrahlung.cc:  if (theLossTable) { theLossTable->clearAndDestroy();
src/BDSeBremsstrahlung.cc:     const G4ElementVector* theElementVector = material->GetElementVector();
src/BDSeBremsstrahlung.cc:     const G4double* theAtomicNumDensityVector = material->GetAtomicNumDensityVector();
src/BDSeBremsstrahlung.cc:     const G4int NumberOfElements = material->GetNumberOfElements();
src/BDSeBremsstrahlung.cc:          KineticEnergy = aVector->GetLowEdgeEnergy(i) ;
src/BDSeBremsstrahlung.cc:                Z=(*theElementVector)[iel]->GetZ();
src/BDSeBremsstrahlung.cc:                                     (material->GetElectronDensity()) ;
src/BDSeBremsstrahlung.cc:             nn = int(nmax*(vmax-vmin)/(log(HighestKineticEnergy)-vmin)) ;
src/BDSeBremsstrahlung.cc:             dv = (vmax-vmin)/nn ;
src/BDSeBremsstrahlung.cc:             v = vmin-dv ;
src/BDSeBremsstrahlung.cc:	       fac *= probsup*(u*u/(u*u+kp2))+1.-probsup;
src/BDSeBremsstrahlung.cc:             floss *=dv/(kmax-kmin); 
src/BDSeBremsstrahlung.cc:          aVector->PutValue(i,bremloss);  
src/BDSeBremsstrahlung.cc:       theLossTable->insert(aVector);
src/BDSeBremsstrahlung.cc: { 0.98916,        0.47564,        -0.2505,       -0.45186,        0.14462,
src/BDSeBremsstrahlung.cc:   0.21307,      -0.013738,      -0.045689,     -0.0042914,      0.0034429,
src/BDSeBremsstrahlung.cc: { 1.0626,        0.37662,       -0.23646,       -0.45188,        0.14295,
src/BDSeBremsstrahlung.cc:   0.22906,      -0.011041,      -0.051398,     -0.0055123,      0.0039919,
src/BDSeBremsstrahlung.cc: { 1.0954,          0.315,       -0.24011,       -0.43849,        0.15017,
src/BDSeBremsstrahlung.cc:   0.23001,      -0.012846,      -0.052555,     -0.0055114,      0.0041283,
src/BDSeBremsstrahlung.cc: { 1.1649,        0.18976,       -0.24972,       -0.30124,         0.1555,
src/BDSeBremsstrahlung.cc:   0.13565,      -0.024765,      -0.027047,    -0.00059821,      0.0019373,
src/BDSeBremsstrahlung.cc: { 1.2261,        0.14272,       -0.25672,       -0.28407,        0.13874,
src/BDSeBremsstrahlung.cc:   0.13586,      -0.020562,      -0.026722,    -0.00089557,      0.0018665,
src/BDSeBremsstrahlung.cc: { 1.3147,       0.020049,       -0.35543,       -0.13927,        0.17666,
src/BDSeBremsstrahlung.cc:   0.073746,      -0.036076,      -0.013407,      0.0025727,     0.00084005,
src/BDSeBremsstrahlung.cc:  -1.4082e-05},
src/BDSeBremsstrahlung.cc: { 1.3986,       -0.10586,       -0.49187,     -0.0048846,        0.23621,
src/BDSeBremsstrahlung.cc:   0.031652,      -0.052938,     -0.0076639,      0.0048181,     0.00056486,
src/BDSeBremsstrahlung.cc:  -0.00011995},
src/BDSeBremsstrahlung.cc: { 1.4217,         -0.116,       -0.55497,      -0.044075,        0.27506,
src/BDSeBremsstrahlung.cc:   0.081364,      -0.058143,      -0.023402,      0.0031322,      0.0020201,
src/BDSeBremsstrahlung.cc:      if(abs(Z-ZZ[ii]) < delz)  { iz = ii; delz = abs(Z-ZZ[ii]);}
src/BDSeBremsstrahlung.cc:      fl = coefloss[iz][Nloss-1];
src/BDSeBremsstrahlung.cc:      for (G4int j=Nloss-2; j>=0; j--) fl = fl*xx+coefloss[iz][j];
src/BDSeBremsstrahlung.cc:  loss = Z*(Z+ksi)*E*E/(T+E)*exp(beta*log(Cut/T))*(2.-clossh*exp(log(Z)/4.));
src/BDSeBremsstrahlung.cc:  static const G4double a1=4.15e-1, a3=2.10e-3, a5=54.0e-5 ;
src/BDSeBremsstrahlung.cc:  if (e0!=1.0) { factor=log(1.-e0)/eta; factor=exp(factor);}  
src/BDSeBremsstrahlung.cc:  factor = eta*(1.-factor)/e0;
src/BDSeBremsstrahlung.cc:// Build  mean free path tables for the gamma emission by e- or e+.
src/BDSeBremsstrahlung.cc:   if (theMeanFreePathTable) {theMeanFreePathTable->clearAndDestroy();
src/BDSeBremsstrahlung.cc:             LowEdgeEnergy = ptrVector->GetLowEdgeEnergy( i ) ;
src/BDSeBremsstrahlung.cc:             ptrVector->PutValue( i , Value ) ;
src/BDSeBremsstrahlung.cc:        theMeanFreePathTable->insertAt( J , ptrVector );
src/BDSeBremsstrahlung.cc:  const G4ElementVector* theElementVector = aMaterial->GetElementVector() ;
src/BDSeBremsstrahlung.cc:  const G4double* theAtomNumDensityVector = aMaterial->GetAtomicNumDensityVector();
src/BDSeBremsstrahlung.cc:  G4double GammaEnergyCut = G4Gamma::Gamma()->GetEnergyThreshold(aMaterial);
src/BDSeBremsstrahlung.cc:  for ( size_t i=0 ; i < aMaterial->GetNumberOfElements() ; i++ )
src/BDSeBremsstrahlung.cc:                                           (*theElementVector)[i]->GetZ(), 
src/BDSeBremsstrahlung.cc:                                     (aMaterial->GetElectronDensity()) ;
src/BDSeBremsstrahlung.cc:            nn = int(nmax*(vmax-vmin)/(log(HighestKineticEnergy)-vmin));
src/BDSeBremsstrahlung.cc:            dv = (vmax-vmin)/nn ;
src/BDSeBremsstrahlung.cc:            v = vmin-dv ;
src/BDSeBremsstrahlung.cc:               fac *= (4.-4.*y+3.*y*y)/3.;
src/BDSeBremsstrahlung.cc:               fac *= probsup*(u*u/(u*u+kp2))+1.-probsup;
src/BDSeBremsstrahlung.cc:             fsig *=dv/(-4.*log(y)/3.-4.*(1.-y)/3.+0.5*(1.-y*y));
src/BDSeBremsstrahlung.cc:  { 0.4638,        0.37748,        0.32249,      -0.060362,      -0.065004,
src/BDSeBremsstrahlung.cc:   -0.033457,      -0.004583,       0.011954,      0.0030404,     -0.0010077,
src/BDSeBremsstrahlung.cc:   -0.00028131},
src/BDSeBremsstrahlung.cc:  { 0.50008,        0.33483,        0.34364,      -0.086262,      -0.055361,
src/BDSeBremsstrahlung.cc:   -0.028168,     -0.0056172,       0.011129,      0.0027528,    -0.00092265,
src/BDSeBremsstrahlung.cc:   -0.00024348},
src/BDSeBremsstrahlung.cc:  { 0.51587,        0.31095,        0.34996,       -0.11623,      -0.056167,
src/BDSeBremsstrahlung.cc:   -0.0087154,     0.00053943,      0.0054092,     0.00077685,    -0.00039635,
src/BDSeBremsstrahlung.cc:   -6.7818e-05},
src/BDSeBremsstrahlung.cc:  { 0.55058,        0.25629,        0.35854,      -0.080656,      -0.054308,
src/BDSeBremsstrahlung.cc:   -0.049933,    -0.00064246,       0.016597,      0.0021789,      -0.001327,
src/BDSeBremsstrahlung.cc:   -0.00025983},
src/BDSeBremsstrahlung.cc:  { 0.5791,        0.26152,        0.38953,       -0.17104,      -0.099172,
src/BDSeBremsstrahlung.cc:    0.024596,       0.023718,     -0.0039205,     -0.0036658,     0.00041749,
src/BDSeBremsstrahlung.cc:  { 0.62085,        0.27045,        0.39073,       -0.37916,       -0.18878,
src/BDSeBremsstrahlung.cc:    0.23905,       0.095028,      -0.068744,      -0.023809,      0.0062408,
src/BDSeBremsstrahlung.cc:  { 0.66053,        0.24513,        0.35404,       -0.47275,       -0.22837,
src/BDSeBremsstrahlung.cc:    0.35647,        0.13203,        -0.1049,      -0.034851,      0.0095046,
src/BDSeBremsstrahlung.cc:  { 0.67143,        0.23079,        0.32256,       -0.46248,       -0.20013,
src/BDSeBremsstrahlung.cc:    0.3506,        0.11779,        -0.1024,      -0.032013,      0.0092279,
src/BDSeBremsstrahlung.cc:    if(abs(AtomicNumber-ZZ[ii]) < delz)
src/BDSeBremsstrahlung.cc:      delz = abs(AtomicNumber-ZZ[ii]) ;
src/BDSeBremsstrahlung.cc:	  fs = coefsig[iz][Nsig-1] ;
src/BDSeBremsstrahlung.cc:		for (G4int j=Nsig-2; j>=0; j--)
src/BDSeBremsstrahlung.cc:                (1.-csigh*exp(log(AtomicNumber)/4.))*
src/BDSeBremsstrahlung.cc: static const G4double a1 = 4.15e-1, a3 = 2.10e-3, a5 = 54.0e-5;
src/BDSeBremsstrahlung.cc: G4double alfa = (1. - eta)/eta;
src/BDSeBremsstrahlung.cc: return eta*pow((1. - GammaEnergyCut/KineticEnergy) , alfa);
src/BDSeBremsstrahlung.cc:   G4int Imate = aMaterial->GetIndex();
src/BDSeBremsstrahlung.cc:   G4int NbOfElements = aMaterial->GetNumberOfElements();
src/BDSeBremsstrahlung.cc:   const G4ElementVector* theElementVector = aMaterial->GetElementVector(); 
src/BDSeBremsstrahlung.cc:   const G4double* theAtomNumDensityVector = aMaterial->GetAtomicNumDensityVector();
src/BDSeBremsstrahlung.cc:   G4double GammaEnergyCut = G4Gamma::Gamma()->GetEnergyThreshold(aMaterial);
src/BDSeBremsstrahlung.cc:                                            (*theElementVector)[Ielem]->GetZ(), 
src/BDSeBremsstrahlung.cc:        PartialSumSigma[Imate]->push_back(SIGMA);
src/BDSeBremsstrahlung.cc://    cross-section values of Seltzer and Berger for electron energies 1 keV - 10 GeV,
src/BDSeBremsstrahlung.cc:     ah10 = 4.67733E+00, ah11 =-6.19012E-01, ah12 = 2.02225E-02,
src/BDSeBremsstrahlung.cc:     ah20 =-7.34101E+00, ah21 = 1.00462E+00, ah22 =-3.20985E-02,
src/BDSeBremsstrahlung.cc:     ah30 = 2.93119E+00, ah31 =-4.03761E-01, ah32 = 1.25153E-02;
src/BDSeBremsstrahlung.cc:     bh10 = 4.23071E+00, bh11 =-6.10995E-01, bh12 = 1.95531E-02,
src/BDSeBremsstrahlung.cc:     bh20 =-7.12527E+00, bh21 = 9.69160E-01, bh22 =-2.74255E-02,
src/BDSeBremsstrahlung.cc:     bh30 = 2.69925E+00, bh31 =-3.63283E-01, bh32 = 9.55316E-03;
src/BDSeBremsstrahlung.cc:     al00 =-2.05398E+00, al01 = 2.38815E-02, al02 = 5.25483E-04,
src/BDSeBremsstrahlung.cc:     al10 =-7.69748E-02, al11 =-6.91499E-02, al12 = 2.22453E-03,
src/BDSeBremsstrahlung.cc:     al20 = 4.06463E-02, al21 =-1.01281E-02, al22 = 3.40919E-04;
src/BDSeBremsstrahlung.cc:     bl00 = 1.04133E+00, bl01 =-9.43291E-03, bl02 =-4.54758E-04,
src/BDSeBremsstrahlung.cc:     bl10 = 1.19253E-01, bl11 = 4.07467E-02, bl12 =-1.30718E-03,
src/BDSeBremsstrahlung.cc:     bl20 =-1.59391E-02, bl21 = 7.27752E-03, bl22 =-1.94405E-04;
src/BDSeBremsstrahlung.cc:   BDSRoot->heBrem->
src/BDSeBremsstrahlung.cc:     Fill((trackData.GetPosition().z()+BDSGlobals->GetWorldSizeZ())/m);
src/BDSeBremsstrahlung.cc:   //G4double LPMEnergy = LPMconstant*(aMaterial->GetRadlen()) ;
src/BDSeBremsstrahlung.cc:   G4double charge = aDynamicParticle->GetDefinition()->GetPDGCharge();   
src/BDSeBremsstrahlung.cc:   G4double           KineticEnergy     = aDynamicParticle->GetKineticEnergy();
src/BDSeBremsstrahlung.cc:   G4ParticleMomentum ParticleDirection = aDynamicParticle->GetMomentumDirection();
src/BDSeBremsstrahlung.cc:   G4double GammaEnergyCut = G4Gamma::Gamma()->GetEnergyThreshold(aMaterial);
src/BDSeBremsstrahlung.cc:   G4double lnZ = 3.*(anElement->GetIonisation()->GetlogZ3());
src/BDSeBremsstrahlung.cc:   G4double FZ = lnZ* (4.- 0.55*lnZ);
src/BDSeBremsstrahlung.cc:   G4double ZZ = anElement->GetIonisation()->GetZZ3();
src/BDSeBremsstrahlung.cc:     MigdalFactor = (aMaterial->GetElectronDensity())*MigdalConstant
src/BDSeBremsstrahlung.cc:       136.*electron_mass_c2/((anElement->GetIonisation()->GetZ3())*TotalEnergy);
src/BDSeBremsstrahlung.cc:       G4double screenmin = screenfac*epsilmin/(1.-epsilmin);
src/BDSeBremsstrahlung.cc:       G4double F1 = G4std::max(ScreenFunction1(screenmin) - FZ ,0.);
src/BDSeBremsstrahlung.cc:       G4double F2 = G4std::max(ScreenFunction2(screenmin) - FZ ,0.);
src/BDSeBremsstrahlung.cc:       grejmax = (F1 - epsilmin* (F1*ah - bh*epsilmin*F2))/(42.392 - FZ);
src/BDSeBremsstrahlung.cc:             screenvar = screenfac*epsil/(1-epsil);
src/BDSeBremsstrahlung.cc:             F1 = G4std::max(ScreenFunction1(screenvar) - FZ ,0.);
src/BDSeBremsstrahlung.cc:             F2 = G4std::max(ScreenFunction2(screenvar) - FZ ,0.);
src/BDSeBremsstrahlung.cc:             greject = migdal*(F1 - epsil* (ah*F1 - bh*epsil*F2))/(42.392 - FZ);      
src/BDSeBremsstrahlung.cc:       G4double xm = -al/(2.*bl);
src/BDSeBremsstrahlung.cc:   //  angles of the emitted gamma. ( Z - axis along the parent particle)
src/BDSeBremsstrahlung.cc:   if (9./(9.+d) > G4UniformRand()) u = - log(G4UniformRand()*G4UniformRand())/a1 ;
src/BDSeBremsstrahlung.cc:      else                          u = - log(G4UniformRand()*G4UniformRand())/a2 ;
src/BDSeBremsstrahlung.cc:   G4double NewKinEnergy = KineticEnergy - GammaEnergy;      
src/BDSeBremsstrahlung.cc:  const G4int Index = aMaterial->GetIndex();
src/BDSeBremsstrahlung.cc:  const G4int NumberOfElements = aMaterial->GetNumberOfElements();
src/BDSeBremsstrahlung.cc:  const G4ElementVector* theElementVector = aMaterial->GetElementVector();
src/BDSeBremsstrahlung.cc:  G4double rval = G4UniformRand()*((*PartialSumSigma[Index])[NumberOfElements-1]);
src/BDSeBremsstrahlung.cc:  G4cout << " WARNING !!! - The Material '"<< aMaterial->GetName()
src/BDSeBremsstrahlung.cc:  LPMEnergy = LPMconstant*(aMaterial->GetRadlen()) ;
src/BDSeBremsstrahlung.cc:                                     (aMaterial->GetElectronDensity())) ;
src/BDSeBremsstrahlung.cc:  Cnorm = 2./(sqrt(w*w+4.)-w) ;
src/BDSeBremsstrahlung.cc:                                     (aMaterial->GetElectronDensity())) ;
src/BDSeBremsstrahlung.cc:        if ((1.-sp) < 1.e-6) w = s2lpm*(3.-sp);
src/BDSeBremsstrahlung.cc:        supr = Cnorm*(sqrt(w*w+4.*s2lpm)-w)/2. ;
src/BDSeBremsstrahlung.cc:  if ( !theLossTable->StorePhysicsTable(filename, ascii) ){
src/BDSeBremsstrahlung.cc:    G4cout << " FAIL theLossTable->StorePhysicsTable in " << filename
src/BDSeBremsstrahlung.cc:  if ( !theMeanFreePathTable->StorePhysicsTable(filename, ascii) ){
src/BDSeBremsstrahlung.cc:    G4cout << " FAIL theMeanFreePathTable->StorePhysicsTable in " << filename
src/BDSeBremsstrahlung.cc:  G4cout << GetProcessName() << " for " << particle->GetParticleName()
src/BDSeBremsstrahlung.cc:    theLossTable->clearAndDestroy();
src/BDSeBremsstrahlung.cc:    theMeanFreePathTable->clearAndDestroy();
src/BDSeBremsstrahlung.cc:  if ( !theLossTable->RetrievePhysicsTable(filename, ascii) ){
src/BDSeBremsstrahlung.cc:    G4cout << " FAIL theLossTable0->RetrievePhysicsTable in " << filename
src/BDSeBremsstrahlung.cc:  if ( !theMeanFreePathTable->RetrievePhysicsTable(filename, ascii) ){
src/BDSeBremsstrahlung.cc:    G4cout << " FAIL theMeanFreePathTable->RetrievePhysicsTable in " << filename
src/BDSeBremsstrahlung.cc:  G4cout << GetProcessName() << " for " << particle->GetParticleName()
src/BDSEnergyCounterSD.cc:  for(G4int i=0; i<nMaxCopy;i++)HitID[i]=-1;
src/BDSEnergyCounterSD.cc:  G4double edep = aStep->GetTotalEnergyDeposit();
src/BDSEnergyCounterSD.cc:  G4int nCopy=aStep->GetPreStepPoint()->GetPhysicalVolume()->GetCopyNo();
src/BDSEnergyCounterSD.cc:	aStep->GetPreStepPoint()->GetPhysicalVolume()->GetName()<<G4endl;
src/BDSEnergyCounterSD.cc:  G4double zpos=0.5*(aStep->GetPreStepPoint()->GetPosition().z()
src/BDSEnergyCounterSD.cc:		     + aStep->GetPostStepPoint()->GetPosition().z());
src/BDSEnergyCounterSD.cc:  if (HitID[nCopy]==-1)
src/BDSEnergyCounterSD.cc:      HitID[nCopy]= BDSEnergyCounterCollection->insert(ECHit)-1;
src/BDSEnergyCounterSD.cc:      (*BDSEnergyCounterCollection)[HitID[nCopy]]-> AddEnergy(edep);
src/BDSEnergyCounterSD.cc:      (*BDSEnergyCounterCollection)[HitID[nCopy]]-> 
src/BDSEnergyCounterSD.cc:  HCE->AddHitsCollection( HCID, BDSEnergyCounterCollection );
src/BDSEventAction.cc:// GEANT4 tag $Name:  $
src/BDSEventAction.cc::SamplerCollID(-1),drawFlag("all"),
src/BDSEventAction.cc: if(BDSGlobals->GetWriteBunchFile())
src/BDSEventAction.cc: if(BDSGlobals->GetUseBatch())printModulo=1000;
src/BDSEventAction.cc: event_number = evt->GetEventID();
src/BDSEventAction.cc: if(BDSGlobals->GetBDSeBremOn())
src/BDSEventAction.cc:     BDSeBremFireDist=BDSGlobals->GetTotalS()*(0.5-G4UniformRand());
src/BDSEventAction.cc:       if( ((*iBeam)->GetZLower()<BDSeBremFireDist)&&
src/BDSEventAction.cc:	   ((*iBeam)->GetZUpper()>BDSeBremFireDist)  )
src/BDSEventAction.cc:	 BDSeBremZMin=(*iBeam)->GetZLower();
src/BDSEventAction.cc:	 BDSeBremZMax=(*iBeam)->GetZUpper();	 
src/BDSEventAction.cc:     G4String filename=BDSGlobals->GetOutputNtupleFileName()+"_"+
src/BDSEventAction.cc:     BDSRoot->SetupNewFile(filename);
src/BDSEventAction.cc:     //G4String filename=BDSGlobals->GetOutputNtupleFileName()+"_"+
src/BDSEventAction.cc:     //BDSPaw->SetupNewFile(filename);
src/BDSEventAction.cc:         G4cout << "\n---> Begin of event: " << event_number ;
src/BDSEventAction.cc:	 if(BDSGlobals->GetUseTimer())
src/BDSEventAction.cc:	     BDSGlobals->GetTimer()->Stop();
src/BDSEventAction.cc:	     G4cout<<" Time: "<<*BDSGlobals->GetTimer();
src/BDSEventAction.cc:	     BDSGlobals->GetTimer()->Start();
src/BDSEventAction.cc: if (SamplerCollID==-1)
src/BDSEventAction.cc:   SamplerCollID = SDman->GetCollectionID("SamplerCollection");
src/BDSEventAction.cc:  G4HCofThisEvent* HCE = evt->GetHCofThisEvent();
src/BDSEventAction.cc:    SampHC = (BDSSamplerHitsCollection*)(HCE->GetHC(SamplerCollID));
src/BDSEventAction.cc:  for(iEC=theECList->begin();iEC!=theECList->end();iEC++)
src/BDSEventAction.cc:      G4String name=(*iEC)->GetCollectionName(0);
src/BDSEventAction.cc:      G4int BDSEnergyCounter_ID= SDman->GetCollectionID(name);
src/BDSEventAction.cc:	    (BDSEnergyCounterHitsCollection*)(HCE->GetHC(BDSEnergyCounter_ID));
src/BDSEventAction.cc:	      G4int n_hit = BDSEnergyCounter_HC->entries();
src/BDSEventAction.cc:		  G4double Energy=(*BDSEnergyCounter_HC)[i]->GetEnergy();
src/BDSEventAction.cc:		  G4double EWeightZ=(*BDSEnergyCounter_HC)[i]->
src/BDSEventAction.cc:		  //r[1]=(EWeightZ+BDSGlobals->GetWorldSizeZ())/m;
src/BDSEventAction.cc:		  BDSRoot->h1->
src/BDSEventAction.cc:		    Fill((EWeightZ+BDSGlobals->GetWorldSizeZ())/m,
src/BDSEventAction.cc:      G4int n_hit = SampHC->entries();
src/BDSEventAction.cc:	  BDSRoot->LoadSamplerTree((*SampHC)[i]);
src/BDSEventAction.cc:	  //if((*SampHC)[i]->GetPDGtype()!=11)
src/BDSEventAction.cc:	      *BunchOutputFile<<(*SampHC)[i]->GetMom()/GeV
src/BDSEventAction.cc:			      <<(*SampHC)[i]->GetX()/micrometer
src/BDSEventAction.cc:			      <<(*SampHC)[i]->GetY()/micrometer
src/BDSEventAction.cc:			      <<(*SampHC)[i]->GetZ()/micrometer
src/BDSEventAction.cc:			      <<(*SampHC)[i]->GetXPrime()/(1.e-6*radian)
src/BDSEventAction.cc:			      <<(*SampHC)[i]->GetYPrime()/(1.e-6*radian)
src/BDSEventAction.cc:  if ((event_number+1)%BDSGlobals->GetNumberOfEventsPerNtuple() == 0)
src/BDSEventAction.cc:      gDirectory->Write();
src/BDSEventAction.cc:      BDSRoot->theRootOutputFile->Close();
src/BDSEventAction.cc:      if ((event_number+1)==BDSGlobals->GetNumberToGenerate())
src/BDSEventAction.cc:	BDSRoot->theRootOutputFile=NULL;
src/BDSEventAction.cc:	  G4String filename=BDSGlobals->GetOutputNtupleFileName()+"_"+
src/BDSEventAction.cc:	  BDSRoot->SetupNewFile(filename);
src/BDSEventAction.cc:  G4TrajectoryContainer* TrajCont=evt->GetTrajectoryContainer();
src/BDSEventAction.cc:  TrajectoryVector* TrajVec=TrajCont->GetVector();
src/BDSEventAction.cc:  if(BDSGlobals->GetStoreMuonTrajectories())
src/BDSEventAction.cc:	  for(iT=TrajVec->begin();iT<TrajVec->end();iT++)
src/BDSEventAction.cc:	      tID=Traj->GetTrackID();	      
src/BDSEventAction.cc:	      for(G4int i=0;i<theMuonTrackVector->size();i++)
src/BDSEventAction.cc:		  BDSRoot->BuildTrajectoryTree();
src/BDSEventAction.cc:		  for(G4int j=0; j<Traj->GetPointEntries(); j++)
src/BDSEventAction.cc:		      TrajPoint=(G4TrajectoryPoint*)Traj->GetPoint(j);
src/BDSEventAction.cc:		      TrajPos=TrajPoint->GetPosition();
src/BDSEventAction.cc:		      BDSRoot->LoadTrajectoryTree(&TrajPos);
src/BDSEventAction.cc:		{// trajectory not a muon - so delete it
src/BDSEventAction.cc:		  TrajVec->erase(iT);
src/BDSEventAction.cc:		  iT--;
src/BDSEventAction.cc:      if(!BDSGlobals->GetUseBatch())evt->Draw();
src/BDSEventAction.cc:	  for(iT=TrajVec->begin();iT<TrajVec->end();iT++)
src/BDSEventAction.cc:	      TrajVec->erase(iT);
src/BDSEventAction.cc:	      iT--;
src/BDSEventActionMessenger.cc:// GEANT4 tag $Name:  $
src/BDSEventActionMessenger.cc:  DrawCmd->SetGuidance("Draw the tracks in the event");
src/BDSEventActionMessenger.cc:  DrawCmd->SetGuidance("  Choice : none, charged(default), all");
src/BDSEventActionMessenger.cc:  DrawCmd->SetParameterName("choice",true);
src/BDSEventActionMessenger.cc:  DrawCmd->SetDefaultValue("charged");
src/BDSEventActionMessenger.cc:  DrawCmd->SetCandidates("none charged all");
src/BDSEventActionMessenger.cc:  DrawCmd->AvailableForStates(Idle);
src/BDSEventActionMessenger.cc:  PrintCmd->SetGuidance("Print events modulo n");
src/BDSEventActionMessenger.cc:  PrintCmd->SetParameterName("EventNb",false);
src/BDSEventActionMessenger.cc:  PrintCmd->SetRange("EventNb>0");
src/BDSEventActionMessenger.cc:  PrintCmd->AvailableForStates(Idle);     
src/BDSEventActionMessenger.cc:    {eventAction->SetDrawFlag(newValue);}
src/BDSEventActionMessenger.cc:    {eventAction->SetPrintModulo(PrintCmd->GetNewIntValue(newValue));}              
src/BDSExtractBunch.cc:  //                  Number of bunches----| 
src/BDSExtractBunch.cc:      part->wgt=strtod(point,&point);
src/BDSExtractBunch.cc:      G4cout<<"wgt="<<part->wgt<<G4endl;
src/BDSExtractBunch.cc:      part->energy=strtod(point,&point);
src/BDSExtractBunch.cc:      G4cout<<"energy="<<part->energy<<G4endl;
src/BDSExtractBunch.cc:      part->x=strtod(point,&point);
src/BDSExtractBunch.cc:      G4cout<<"x="<<part->x<<G4endl;
src/BDSExtractBunch.cc:      part->xp=strtod(point,&point);
src/BDSExtractBunch.cc:      G4cout<<" BDSExtract xp="<< part->xp<<G4endl;
src/BDSExtractBunch.cc:      part->y=strtod(point,&point);
src/BDSExtractBunch.cc:      part->yp=strtod(point,&point);
src/BDSExtractBunch.cc:      mSigmaXX->r11=strtod(point,&point);
src/BDSExtractBunch.cc:      mSigmaXX->r12=strtod(point,&point);
src/BDSExtractBunch.cc:      mSigmaXX->r22=strtod(point,&point);
src/BDSExtractBunch.cc:      mSigmaXX->r21=mSigmaXX->r12;
src/BDSExtractBunch.cc:      mSigma->r11=strtod(point,&point);
src/BDSExtractBunch.cc:      mSigma->r12=strtod(point,&point);
src/BDSExtractBunch.cc:      mSigma->r22=strtod(point,&point);
src/BDSExtractBunch.cc:      mSigma->r21=mSigma->r12;
src/BDSExtractBunch.cc:      mSigmaXY->r11=strtod(point,&point);
src/BDSExtractBunch.cc:      mSigmaXY->r12=strtod(point,&point);
src/BDSExtractBunch.cc:      mSigmaXY->r21=strtod(point,&point);
src/BDSExtractBunch.cc:      mSigmaXY->r22=strtod(point,&point);
src/BDSExtract.cc:#define RNDM_EPS 6e-8
src/BDSExtract.cc:  G4int n = itsBunch->GetNumSlicesPerBunch();
src/BDSExtract.cc:  G4int nm=itsBunch->GetNumMacroparticles();
src/BDSExtract.cc:  //  for(i=0;i<splineVec->size();i++)
src/BDSExtract.cc:  temp=rndm5_store.u[rndm5_store.i]-rndm5_store.u[rndm5_store.j];
src/BDSExtract.cc:  if (--rndm5_store.i<0) rndm5_store.i=96;
src/BDSExtract.cc:  if (--rndm5_store.j<0) rndm5_store.j=96;
src/BDSExtract.cc:  rndm5_store.c-=rndm5_store.cd;
src/BDSExtract.cc:  temp-=rndm5_store.c;
src/BDSExtract.cc:      gasdev_data.v1=2.0*rndm5()-1.0;
src/BDSExtract.cc:      gasdev_data.v2=2.0*rndm5()-1.0;
src/BDSExtract.cc:    r=sqrt(-2.0*log((double)r)/r);
src/BDSExtract.cc:  slices = itsBunch->GetNumSlices();
src/BDSExtract.cc:  nb = itsBunch->GetNumBunches();
src/BDSExtract.cc:  n = itsBunch->GetNumSlicesPerBunch();
src/BDSExtract.cc:  const int nm=itsBunch->GetNumMacroparticles();
src/BDSExtract.cc:  vPART *pVec=itsBunch->GetParticleVector();
src/BDSExtract.cc:  vRMAT *mSigma=itsBunch->GetSigmaVector();
src/BDSExtract.cc:  vRMAT *mSigmaXX=itsBunch->GetSigmaXXVector();
src/BDSExtract.cc:  vRMAT *mSigmaXY=itsBunch->GetSigmaXYVector();
src/BDSExtract.cc:  vZpos* zpos=itsBunch->GetZPos();
src/BDSExtract.cc:      (*yvalue)[i]=part->energy;
src/BDSExtract.cc:    (*s_e)[j]->initialise(xvalue,0,yvalue,0);
src/BDSExtract.cc:      (*yvalue)[i]=part->x;
src/BDSExtract.cc:    (*s_x)[j]->initialise(xvalue,0,yvalue,0);
src/BDSExtract.cc:      (*yvalue)[i]=part->xp;
src/BDSExtract.cc:      G4cout<<" xp="<<part->xp<<G4endl;
src/BDSExtract.cc:    (*s_xp)[j]->initialise(xvalue,0,yvalue,0);
src/BDSExtract.cc:      (*yvalue)[i]=part->y;
src/BDSExtract.cc:    (*s_y)[j]->initialise(xvalue,0,yvalue,0);
src/BDSExtract.cc:      (*yvalue)[i]=part->yp;
src/BDSExtract.cc:    (*s_yp)[j]->initialise(xvalue,0,yvalue,0);
src/BDSExtract.cc:      (*yvalue)[i]=rmat->r11;
src/BDSExtract.cc:    (*s_x_x)[j]->initialise(xvalue,0,yvalue,0);
src/BDSExtract.cc:      (*yvalue)[i]=rmat->r12;
src/BDSExtract.cc:    (*s_x_xp)[j]->initialise(xvalue,0,yvalue,0);
src/BDSExtract.cc:      (*yvalue)[i]=rmat->r22;
src/BDSExtract.cc:    (*s_xp_xp)[j]->initialise(xvalue,0,yvalue,0);
src/BDSExtract.cc:      (*yvalue)[i]=rmat->r11;
src/BDSExtract.cc:    (*s_y_y)[j]->initialise(xvalue,0,yvalue,0);
src/BDSExtract.cc:      (*yvalue)[i]=rmat->r12;
src/BDSExtract.cc:    (*s_y_yp)[j]->initialise(xvalue,0,yvalue,0);
src/BDSExtract.cc:      (*yvalue)[i]=rmat->r22;
src/BDSExtract.cc:    (*s_yp_yp)[j]->initialise(xvalue,0,yvalue,0);
src/BDSExtract.cc:    (*xvalue)[i]=2.0*e_cut*(i+0.5)/(double)nm-e_cut;
src/BDSExtract.cc:  sigma_z=((*zpos)[1]-(*zpos)[0])*n/(2.0*z_cut);
src/BDSExtract.cc:      (*ytransv)[j*11]=(*s_e)[j]->integrate(z_pos);
src/BDSExtract.cc:      (*ytransv)[j*11+1]=(*s_x)[j]->integrate(z_pos);
src/BDSExtract.cc:      (*ytransv)[j*11+2]=(*s_xp)[j]->integrate(z_pos);
src/BDSExtract.cc:      (*ytransv)[j*11+3]=(*s_y)[j]->integrate(z_pos);
src/BDSExtract.cc:      (*ytransv)[j*11+4]=(*s_yp)[j]->integrate(z_pos);
src/BDSExtract.cc:      (*ytransv)[j*11+5]=(*s_x_x)[j]->integrate(z_pos);
src/BDSExtract.cc:      (*ytransv)[j*11+6]=(*s_x_xp)[j]->integrate(z_pos);
src/BDSExtract.cc:      (*ytransv)[j*11+7]=(*s_xp_xp)[j]->integrate(z_pos);
src/BDSExtract.cc:      (*ytransv)[j*11+8]=(*s_y_y)[j]->integrate(z_pos);
src/BDSExtract.cc:      (*ytransv)[j*11+9]=(*s_y_yp)[j]->integrate(z_pos);
src/BDSExtract.cc:      (*ytransv)[j*11+10]=(*s_yp_yp)[j]->integrate(z_pos);   
src/BDSExtract.cc:    s_transv->initialise(xvalue,0,ytransv,0);
src/BDSExtract.cc:    s_transv->integrate(e_rndm,yvalue);
src/BDSExtract.cc:    G4double tmpval=(*yvalue)[7]-(*yvalue)[6]*(*yvalue)[6]/(*yvalue)[5];
src/BDSExtract.cc:      xp_rndm=gasdev()*sqrt((*yvalue)[7]-(*yvalue)[6]*(*yvalue)[6]/(*yvalue)[5])
src/BDSExtract.cc:    //      xp_rndm=gasdev()*sqrt((*yvalue)[7]-(*yvalue)[6]*(*yvalue)[6]/(*yvalue)[5])
src/BDSExtract.cc:    yp_rndm=gasdev()*sqrt((*yvalue)[10]-(*yvalue)[9]*(*yvalue)[9]/(*yvalue)[8])
src/BDSGammaConversion.cc:// GEANT4 tag $Name:  $
src/BDSGammaConversion.cc://------------------ BDSGammaConversion physics process -------------------------
src/BDSGammaConversion.cc:// 11-06-96 Added SelectRandomAtom() method, M.Maire
src/BDSGammaConversion.cc:// 21-06-96 SetCuts implementation, M.Maire
src/BDSGammaConversion.cc:// 24-06-96 simplification in ComputeCrossSectionPerAtom, M.Maire
src/BDSGammaConversion.cc:// 24-06-96 in DoIt : change the particleType stuff, M.Maire
src/BDSGammaConversion.cc:// 25-06-96 modification in the generation of the teta angle, M.Maire
src/BDSGammaConversion.cc:// 16-09-96 minors optimisations in DoIt. Thanks to P.Urban
src/BDSGammaConversion.cc:// 13-12-96 fast sampling of epsil below 2 MeV, L.Urban
src/BDSGammaConversion.cc:// 14-01-97 crossection table + meanfreepath table.
src/BDSGammaConversion.cc:// 14-01-97 in DoIt the positron is always created, even with Ekine=0,
src/BDSGammaConversion.cc:// 14-03-97 new Physics scheme for geant4alpha, M.Maire
src/BDSGammaConversion.cc:// 28-03-97 protection in BuildPhysicsTable, M.Maire
src/BDSGammaConversion.cc:// 19-06-97 correction in ComputeCrossSectionPerAtom, L.Urban
src/BDSGammaConversion.cc:// 04-06-98 in DoIt, secondary production condition:
src/BDSGammaConversion.cc:// 13-08-98 new methods SetBining() PrintInfo()
src/BDSGammaConversion.cc:// 28-05-01 V.Ivanchenko minor changes to provide ANSI -wall compilation
src/BDSGammaConversion.cc:// 11-07-01 PostStepDoIt - sampling epsil: power(rndm,0.333333)
src/BDSGammaConversion.cc:// 13-07-01 DoIt: suppression of production cut for the (e-,e+) (mma)
src/BDSGammaConversion.cc:// 06-08-01 new methods Store/Retrieve PhysicsTable (mma)
src/BDSGammaConversion.cc:// 06-08-01 BuildThePhysicsTable() called from constructor (mma)
src/BDSGammaConversion.cc:// 17-09-01 migration of Materials to pure STL (mma)
src/BDSGammaConversion.cc:// 20-09-01 DoIt: fminimalEnergy = 1*eV (mma)
src/BDSGammaConversion.cc:// 01-10-01 come back to BuildPhysicsTable(const G4ParticleDefinition&)
src/BDSGammaConversion.cc:// 11-01-02 ComputeCrossSection: correction of extrapolation below EnergyLimit
src/BDSGammaConversion.cc:// 21-03-02 DoIt: correction of the e+e- angular distribution (bug 363) mma        
src/BDSGammaConversion.cc:// -----------------------------------------------------------------------------
src/BDSGammaConversion.cc:      theCrossSectionTable->clearAndDestroy();
src/BDSGammaConversion.cc:      theMeanFreePathTable->clearAndDestroy();
src/BDSGammaConversion.cc:// Build cross section per atom tables for the e+e- pair creation
src/BDSGammaConversion.cc:         theCrossSectionTable->clearAndDestroy(); delete theCrossSectionTable;}
src/BDSGammaConversion.cc:        AtomicNumber = (*theElementTable)[J]->GetZ();
src/BDSGammaConversion.cc:             LowEdgeEnergy = ptrVector->GetLowEdgeEnergy( i ) ;
src/BDSGammaConversion.cc:             ptrVector->PutValue( i , Value ) ;
src/BDSGammaConversion.cc:        theCrossSectionTable->insertAt( J , ptrVector ) ;
src/BDSGammaConversion.cc:// Build mean free path table for the e+e- pair creation
src/BDSGammaConversion.cc:     { theMeanFreePathTable->clearAndDestroy(); delete theMeanFreePathTable;}
src/BDSGammaConversion.cc:             LowEdgeEnergy = ptrVector->GetLowEdgeEnergy( i ) ;
src/BDSGammaConversion.cc:             ptrVector->PutValue( i , Value ) ;
src/BDSGammaConversion.cc:        theMeanFreePathTable->insertAt( J , ptrVector ) ;
src/BDSGammaConversion.cc:// below 1.5 MeV: sigma=sigma(1.5MeV)*(GammaEnergy-2electronmass)
src/BDSGammaConversion.cc://                                   *(GammaEnergy-2electronmass) 
src/BDSGammaConversion.cc:    a0= 8.7842e+2*microbarn, a1=-1.9625e+3*microbarn, a2= 1.2949e+3*microbarn,
src/BDSGammaConversion.cc:    a3=-2.0028e+2*microbarn, a4= 1.2575e+1*microbarn, a5=-2.8333e-1*microbarn;
src/BDSGammaConversion.cc:    b0=-1.0342e+1*microbarn, b1= 1.7692e+1*microbarn, b2=-8.2381   *microbarn,
src/BDSGammaConversion.cc:    b3= 1.3063   *microbarn, b4=-9.0815e-2*microbarn, b5= 2.3586e-3*microbarn;
src/BDSGammaConversion.cc:    c0=-4.5263e+2*microbarn, c1= 1.1161e+3*microbarn, c2=-8.6749e+2*microbarn,
src/BDSGammaConversion.cc:    c3= 2.1773e+2*microbarn, c4=-2.0467e+1*microbarn, c5= 6.5372e-1*microbarn;
src/BDSGammaConversion.cc:     X = (GammaEnergySave - 2.*electron_mass_c2)
src/BDSGammaConversion.cc:        /(GammaEnergyLimit- 2.*electron_mass_c2);
src/BDSGammaConversion.cc:// The secondaries e+e- energies are sampled using the Bethe - Heitler
src/BDSGammaConversion.cc:   G4double GammaEnergy = aDynamicGamma->GetKineticEnergy();
src/BDSGammaConversion.cc:   G4ParticleMomentum GammaDirection = aDynamicGamma->GetMomentumDirection();
src/BDSGammaConversion.cc:   if(BDSGlobals->GetUseMuonShowers())
src/BDSGammaConversion.cc:       if(muonWeight<1.e-300)muonWeight=0.;
src/BDSGammaConversion.cc:       // gab: Weight according to the relative cross-section
src/BDSGammaConversion.cc:   if (GammaEnergy<Egsmall) { epsil = epsil0 + (0.5-epsil0)*G4UniformRand(); }
src/BDSGammaConversion.cc:   G4double FZ = 8.*(anElement->GetIonisation()->GetlogZ3());
src/BDSGammaConversion.cc:   if (GammaEnergy > 50.*MeV) FZ += 8.*(anElement->GetfCoulomb());
src/BDSGammaConversion.cc:   G4double screenfac = 136.*epsil0/(anElement->GetIonisation()->GetZ3());
src/BDSGammaConversion.cc:   G4double screenmax = exp ((42.24 - FZ)/8.368) - 0.952 ;
src/BDSGammaConversion.cc:   G4double epsil1 = 0.5 - 0.5*sqrt(1. - screenmin/screenmax) ;
src/BDSGammaConversion.cc:   G4double epsilmin = G4std::max(epsil0,epsil1) , epsilrange = 0.5 - epsilmin;
src/BDSGammaConversion.cc:   G4double F10 = ScreenFunction1(screenmin) - FZ;
src/BDSGammaConversion.cc:   G4double F20 = ScreenFunction2(screenmin) - FZ;
src/BDSGammaConversion.cc:             { epsil = 0.5 - epsilrange*pow(G4UniformRand(), 0.333333);
src/BDSGammaConversion.cc:               screenvar = screenfac/(epsil*(1-epsil));
src/BDSGammaConversion.cc:               greject = (ScreenFunction1(screenvar) - FZ)/F10;
src/BDSGammaConversion.cc:               screenvar = screenfac/(epsil*(1-epsil));
src/BDSGammaConversion.cc:               greject = (ScreenFunction2(screenvar) - FZ)/F20;
src/BDSGammaConversion.cc:       ElectTotEnergy = (1.-epsil)*GammaEnergy;
src/BDSGammaConversion.cc:       PositTotEnergy = (1.-epsil)*GammaEnergy;
src/BDSGammaConversion.cc:   // scattered electron (positron) angles. ( Z - axis along the parent photon)
src/BDSGammaConversion.cc:     u= - log(G4UniformRand()*G4UniformRand())/a1;
src/BDSGammaConversion.cc:     u= - log(G4UniformRand()*G4UniformRand())/a2;
src/BDSGammaConversion.cc:   G4double dxPo=-sin(TetPo)*cos(Phi),
src/BDSGammaConversion.cc:     dyPo=-sin(TetPo)*sin(Phi),dzPo=cos(TetPo);
src/BDSGammaConversion.cc:   G4double ElectKineEnergy = G4std::max(0.,ElectTotEnergy - electron_mass_c2);
src/BDSGammaConversion.cc:   G4double PositKineEnergy = G4std::max(0.,PositTotEnergy - electron_mass_c2);
src/BDSGammaConversion.cc:   // --------------------------
src/BDSGammaConversion.cc:   static const G4double Mmuon=G4MuonPlus::MuonPlus()->GetPDGMass();
src/BDSGammaConversion.cc:       if(BDSGlobals->GetUseMuonShowers())
src/BDSGammaConversion.cc:	   G4double Z=anElement->GetZ();
src/BDSGammaConversion.cc:	   G4double A = anElement->GetA()/(g/mole);
src/BDSGammaConversion.cc:	     Zthird=pow(Z,-1./3.); // Z**(-1/3)
src/BDSGammaConversion.cc:	   G4double sqrtx=sqrt(.25-GammaMuonInv);
src/BDSGammaConversion.cc:	   G4double xmin=.5-sqrtx;
src/BDSGammaConversion.cc:	   G4double Ds2=(Dn*sqrte-2.);
src/BDSGammaConversion.cc:	     { xPlus=xmin+G4UniformRand()*(xmax-xmin);
src/BDSGammaConversion.cc:	     xMinus=1.-xPlus;
src/BDSGammaConversion.cc:	     G4double xxp=1.-4./3.*xPM; // the main xPlus dependence
src/BDSGammaConversion.cc:	       G4double f1_max=(1.-xPM) / (1.+C1);
src/BDSGammaConversion.cc:		 f1=(1.-2.*xPM+4.*xPM*t*(1.-t)) / (1.+C1/(t*t));
src/BDSGammaConversion.cc:	       G4double f2_max=1.-2.*xPM*(1.-4.*t*(1.-t));
src/BDSGammaConversion.cc:		 f2=1.-2.*xPM+4.*xPM*t*(1.-t)*(1.+cos(2.*psi));
src/BDSGammaConversion.cc:	       G4double rhomax=1.9/A027*(1./t-1.);
src/BDSGammaConversion.cc:	       rho=pow(C2 *( exp(beta*G4UniformRand())-1. ) ,0.25);
src/BDSGammaConversion.cc:	       G4double u=sqrt(1./t-1.);
src/BDSGammaConversion.cc:	       thetaMinus=GammaMuonInv*(u-xiHalf)/xMinus;
src/BDSGammaConversion.cc:	   // mu+ mu- directions for gamma in z-direction
src/BDSGammaConversion.cc:	   G4ThreeVector MuMinusDirection (-sin(thetaMinus)*cos(phi0-phiHalf),
src/BDSGammaConversion.cc:					   -sin(thetaMinus) *sin(phi0-phiHalf), 
src/BDSGammaConversion.cc:				   MuPlusDirection,EPlus-Mmuon);
src/BDSGammaConversion.cc:				   MuMinusDirection,EMinus-Mmuon);
src/BDSGammaConversion.cc:   // --------------------------
src/BDSGammaConversion.cc:  const G4int NumberOfElements            = aMaterial->GetNumberOfElements();
src/BDSGammaConversion.cc:  const G4ElementVector* theElementVector = aMaterial->GetElementVector();
src/BDSGammaConversion.cc:  const G4double* NbOfAtomsPerVolume = aMaterial->GetVecNbOfAtomsPerVolume();
src/BDSGammaConversion.cc:  G4cout << " WARNING !!! - The Material '"<< aMaterial->GetName()
src/BDSGammaConversion.cc:  if ( !theCrossSectionTable->StorePhysicsTable(filename, ascii) ){
src/BDSGammaConversion.cc:    G4cout << " FAIL theCrossSectionTable->StorePhysicsTable in " << filename
src/BDSGammaConversion.cc:  if ( !theMeanFreePathTable->StorePhysicsTable(filename, ascii) ){
src/BDSGammaConversion.cc:    G4cout << " FAIL theMeanFreePathTable->StorePhysicsTable in " << filename
src/BDSGammaConversion.cc:  G4cout << GetProcessName() << " for " << particle->GetParticleName()
src/BDSGammaConversion.cc:    theCrossSectionTable->clearAndDestroy();
src/BDSGammaConversion.cc:    theMeanFreePathTable->clearAndDestroy();
src/BDSGammaConversion.cc:  if ( !theCrossSectionTable->RetrievePhysicsTable(filename, ascii) ){
src/BDSGammaConversion.cc:    G4cout << " FAIL theCrossSectionTable->RetrievePhysicsTable in " << filename
src/BDSGammaConversion.cc:  if ( !theMeanFreePathTable->RetrievePhysicsTable(filename, ascii) ){
src/BDSGammaConversion.cc:    G4cout << " FAIL theMeanFreePathTable->RetrievePhysicsTable in " << filename
src/BDSGammaConversion.cc:  G4cout << GetProcessName() << " for " << particle->GetParticleName()
src/BDSGammaConversion.cc:           comments += "        e+e- energies according Bethe-Heitler";
src/BDSGammaConversion.cc:{ static const G4double Mmuon=G4MuonPlus::MuonPlus()->GetPDGMass();
src/BDSGammaConversion.cc:  static const G4double PowSat=-0.88;
src/BDSGammaConversion.cc:    Zthird=pow(Z,-1./3.); // Z**(-1/3)
src/BDSGammaConversion.cc:    Ecor=-18.+4347./(B*Zthird);
src/BDSGammaConversion.cc:  G4double Eg=pow(1.-4.*Mmuon/Egam,PowThres)*pow( pow(Wsatur,PowSat)+
src/BDSGen5Shell.cc:// Routine to generate a random point in an n-dimensional spherical shell
src/BDSGen5Shell.cc:  area2=1./3. +   2.*(pi/2-1)     + 1./3;
src/BDSGen5Shell.cc:  area3=1./4. +   2.*(pi/2-1)     + 1./4;
src/BDSGen5Shell.cc:  Gen2Upper=area2-1./3.;
src/BDSGen5Shell.cc:  Gen3Upper=area3-1./4.;
src/BDSGen5Shell.cc:      areaR=pow(ShellOuterRadius,5)/5.-GenRLower;
src/BDSGen5Shell.cc:  Theta2=acos(2*G4UniformRand()-1);
src/BDSGen5Shell.cc:	  theta=pi-pow(1-3*(area2-trial),1./3.);
src/BDSGen5Shell.cc:	  if(G4UniformRand()*pow(pi-theta,2)<=pow(sin(theta),2))lok=true;
src/BDSGen5Shell.cc:	      theta=1+trial-1./3.;
src/BDSGen5Shell.cc:	  theta=pi-pow(1-4*(area3-trial),1./4.);
src/BDSGen5Shell.cc:	  if(G4UniformRand()*pow(pi-theta,3)<=pow(sin(theta),3))lok=true;
src/BDSGen5Shell.cc:	      theta=1+trial-1/4.;
src/BDSGlobalConstants.cc:  static const char* tab = "----|";
src/BDSGlobalConstants.cc:  while(depth--) os<<tab;
src/BDSHelixStepper.cc:    G4TransportationManager::GetTransportationManager()->
src/BDSHelixStepper.cc:  G4double safety=HelixNavigator->ComputeSafety(GlobalPosition);
src/BDSHelixStepper.cc:  G4AffineTransform LocalAffine=HelixNavigator->GetLocalToGlobalTransform();
src/BDSHelixStepper.cc:  LocalR = HelixNavigator->GetCurrentLocalCoordinate();
src/BDSHelixStepper.cc:  LocalRp= HelixNavigator->ComputeLocalAxis(v0).unit();
src/BDSHelixStepper.cc:  if(BDSGlobals->GetSynchRescale())
src/BDSHelixStepper.cc:      its_EqRhs->GetFieldValue(yIn, B);
src/BDSHelixStepper.cc:      R=-(InitMag/GeV)/(0.299792458 * B[1]/tesla) *m;
src/BDSHelixStepper.cc:      R=-(InitMag/GeV)/(0.299792458 * itsBField/tesla) *m;
src/BDSHelixStepper.cc:  if( its_EqRhs->FCof()<0)R*=-1.;
src/BDSHelixStepper.cc:  else if (its_EqRhs->FCof()==0)R=DBL_MAX;
src/BDSHelixStepper.cc:      CosT=(CosT_ov_2*CosT_ov_2)- (SinT_ov_2*SinT_ov_2);
src/BDSHelixStepper.cc:      itsDist=abs(R)*(1.-CosT_ov_2);
src/BDSHelixStepper.cc:      G4ThreeVector dPos=R*(SinT*vhat + (1-CosT)*vnorm);
src/BDSHelixStepper.cc:      CosT=(CosT_ov_2*CosT_ov_2)- (SinT_ov_2*SinT_ov_2);
src/BDSHelixStepper.cc:	(1-CosT_ov_2)*vhat;
src/BDSHelixStepper.cc:	itsMidPoint-0.5*(itsFinalPoint+itsInitialPoint);
src/BDSLaserCompton.cc://      ------------ BDSLaserCompton physics process --------
src/BDSLaserCompton.cc: if(aMaterial==theMaterials->LaserVac)
src/BDSLaserCompton.cc:     itsComptonEngine->
src/BDSLaserCompton.cc:       SetIncomingElectron4Vec(aDynamicParticle->Get4Momentum());
src/BDSLaserCompton.cc:     itsComptonEngine->PerformCompton();
src/BDSLaserCompton.cc:     if(BDSGlobals->GetLaserwireTrackPhotons())
src/BDSLaserCompton.cc:	 G4LorentzVector ScatGam=itsComptonEngine->GetScatteredGamma();
src/BDSLaserCompton.cc:	 if(!BDSGlobals->GetLaserwireTrackElectrons())
src/BDSLaserCompton.cc:       itsComptonEngine->GetScatteredElectron().e()-electron_mass_c2;
src/BDSLaserCompton.cc:     G4LorentzVector ScatEl=itsComptonEngine->GetScatteredElectron();
src/BDSLaserCompton.cc:	 G4double charge= aDynamicParticle->GetCharge();
src/BDSLaserwire.cc:							   BDSGlobals->
src/BDSLaserwire.cc:							   BDSGlobals->
src/BDSLaserwire.cc:						 theMaterials->LaserVac,
src/BDSMADInterface.cc://--------------------------
src/BDSMADInterface.cc://--------------------------
src/BDSMADInterface.cc:  static const char* tab = "----|";
src/BDSMADInterface.cc:  while(depth--) os<<tab;
src/BDSMADInterface.cc:  return text.substr(1,text.length()-2);
src/BDSMADInterface.cc:  // brho is the radius of curvature * B-field
src/BDSMADInterface.cc:    sqrt(pow(P0,2)- pow(electron_mass_c2,2))/(0.299792458 * (GeV/(tesla*m)));
src/BDSMADInterface.cc:  //  if(BDSGlobals->GetSynchRadOn())
src/BDSMADInterface.cc:  E_Synch=BDSGlobals->GetAcceleratorType()->GetBeamTotalEnergy();
src/BDSMADInterface.cc:    BDSGlobals->GetAcceleratorType()->GetBeamTotalEnergy();
src/BDSMADInterface.cc:  if(BDSGlobals->GetSynchRadOn()&& BDSGlobals->GetSynchRescale())
src/BDSMADInterface.cc:      //      synch_factor-=deltaE*GeV/
src/BDSMADInterface.cc:	  E_Synch-=deltaE;
src/BDSMADInterface.cc:	    BDSGlobals->GetAcceleratorType()->GetBeamTotalEnergy();
src/BDSMADInterface.cc:  // ie need a pi rotation about z  - only affects even-order poles
src/BDSMADInterface.cc:  G4double xAper=0,yAper=0, bpRad=BDSGlobals->GetBeampipeRadius();
src/BDSMADInterface.cc:  G4double LCBeampipeThickness=BDSGlobals->GetBeampipeThickness();
src/BDSMADInterface.cc:	  FeRad=atof((aptype.substr(1,aptype.length()-1)).c_str())*mm/2
src/BDSMADInterface.cc:	    +BDSGlobals->GetBeampipeThickness();
src/BDSMADInterface.cc:	    // bpRad=FeRad+BDSGlobals->GetBeampipeThickness();
src/BDSMADInterface.cc:	  FeRad=atof((aptype.substr(1,aptype.length()-1)).c_str())*mm/2
src/BDSMADInterface.cc:	    +BDSGlobals->GetBeampipeThickness();
src/BDSMADInterface.cc:	  //if(FeRad<bpRad)bpRad=FeRad+BDSGlobals->GetBeampipeThickness();
src/BDSMADInterface.cc:	  xAper=atof(aptype.substr(1,iY-1).c_str()) * mm;
src/BDSMADInterface.cc:	  yAper=atof(aptype.substr(iY+1,aptype.length()-1).c_str()) * mm;
src/BDSMADInterface.cc:      //      len= NumSpoilerRadLen *SpoilerMaterial->GetRadlen();
src/BDSMADInterface.cc:    ctor->push_back(new BDSDrift(name,len,bpRad));
src/BDSMADInterface.cc:    ctor->push_back(new BDSQuadrupole(name,len,bpRad,FeRad,bPrime));
src/BDSMADInterface.cc:  //ctor->push_back(new BDSSkewQuadrupole(name,len,bPrime));
src/BDSMADInterface.cc:    ctor->push_back(new BDSSectorBend(name,len,bpRad,FeRad,bField,angle));
src/BDSMADInterface.cc:    ctor->push_back( new BDSSextupole(name,len,bpRad,FeRad,bDoublePrime));
src/BDSMADInterface.cc:    ctor->push_back(new BDSSkewSextupole(name,len,bpRad,FeRad,bDoublePrime));
src/BDSMADInterface.cc:    ctor->push_back(new BDSOctupole(name,len,bpRad,FeRad,bTriplePrime));
src/BDSMADInterface.cc:    ctor->push_back(new BDSDecapole(name,len,bpRad,FeRad,bQuadPrime));
src/BDSMADInterface.cc:    ctor->push_back(new BDSSampler(name,len));
src/BDSMADInterface.cc:    ctor->push_back(new BDSSpoiler(name,len,bpRad,xAper,yAper,
src/BDSMADInterface.cc:    ctor->push_back(new BDSAbsorber(name,len,bpRad,xAper,yAper,
src/BDSMADInterface.cc:				    theMaterials->LCCopper));
src/BDSMADInterface.cc:	new BDSLaserWire(name,len,BDSGlobals->GetLaserwireWavelength(),
src/BDSMADInterface.cc:			 BDSGlobals->GetLaserwireDir());
src/BDSMADInterface.cc:      ctor->push_back(TheBDSLaserWire);
src/BDSMaterials.cc:  LCAir->AddElement(H, fractionmass=1.0);
src/BDSMaterials.cc:  //LCAir->AddElement(N, fractionmass=0.7);
src/BDSMaterials.cc:  //LCAir->AddElement(O, fractionmass=0.3);
src/BDSMaterials.cc:  pressure    = 1.e-9*(1.e-3*bar);
src/BDSMaterials.cc:  //  should represent this number of particles - hence ~10^7:
src/BDSMaterials.cc:  pressure*=BDSGlobals->GetBackgroundScaleFactor();
src/BDSMaterials.cc:  BDSAcceleratorType* TheAccelerator=BDSGlobals->GetAcceleratorType();
src/BDSMaterials.cc:  temperature = TheAccelerator->GetTemperature();
src/BDSMaterials.cc:    * 2*g/(22.4*1.e-3*m3) ;
src/BDSMaterials.cc://        * 30*g/(22.4*1.e-3*m3) ;
src/BDSMaterials.cc:  LCVacuum->AddMaterial(LCAir, fractionmass=1.);
src/BDSMaterials.cc:  LaserVac->AddMaterial(LCAir, fractionmass=1.);
src/BDSMaterials.cc:  LCConcrete->AddElement(Si, 0.227915);
src/BDSMaterials.cc:  LCConcrete->AddElement(O, 0.60541);
src/BDSMaterials.cc:  LCConcrete->AddElement(H, 0.09972);
src/BDSMaterials.cc:  LCConcrete->AddElement(Ca, 0.04986);
src/BDSMaterials.cc:  LCConcrete->AddElement(Al, 0.014245);
src/BDSMaterials.cc:  LCConcrete->AddElement(Fe, 0.00285);
src/BDSMspline.cc:    for (i=1;i<n-1;i++){
src/BDSMspline.cc:      sig=(x[i]-x[i-1])/(x[i+1]-x[i-1]);
src/BDSMspline.cc:      p=1.0/(sig*y2[(i-1)*nval+j]+2.0);
src/BDSMspline.cc:      y2[i*nval+j]=(sig-1.0)*p;
src/BDSMspline.cc:      u[i]=(6.0*((y[(i+1)*nval+j]-y[i*nval+j])/(x[i+1]-x[i])
src/BDSMspline.cc:		 -(y[i*nval+j]-y[(i-1)*nval+j])/(x[i]-x[i-1]))
src/BDSMspline.cc:	    /(x[i+1]-x[i-1])-sig*u[i-1])*p;
src/BDSMspline.cc:    y2[(n-1)*nval+j]=0.0;
src/BDSMspline.cc:    for (i=n-2;i>=0;i--){
src/BDSMspline.cc:  kmax=n-1;
src/BDSMspline.cc:  while (kmax-kmin>1){
src/BDSMspline.cc:  w=x[kmax]-x[kmin];
src/BDSMspline.cc:  a=(x[kmax]-xIn)/w;
src/BDSMspline.cc:  b=(xIn-x[kmin])/w;
src/BDSMspline.cc:      (a*(a*a-1.0)*y2[kmin*nval+j]
src/BDSMspline.cc:       +b*(b*b-1.0)*y2[kmax*nval+j])*w*w/6.0;
src/BDSMultipole.cc:			    itsBpRadius-BDSGlobals->GetBeampipeThickness(),
src/BDSMultipole.cc:			theMaterials->LCIron,
src/BDSMultipole.cc:			theMaterials->LCVacuum,
src/BDSMultipole.cc:  		     BDSGlobals->GetThresholdCutCharged());
src/BDSMultipole.cc:  itsBeampipeUserLimits->SetMaxAllowedStep(itsLength);
src/BDSMultipole.cc:  itsBeampipeLogicalVolume->SetUserLimits(itsBeampipeUserLimits);
src/BDSMultipole.cc:  itsInnerBeampipeUserLimits->SetMaxAllowedStep(itsLength);
src/BDSMultipole.cc:  itsInnerBPLogicalVolume->SetUserLimits(itsInnerBeampipeUserLimits);
src/BDSMultipole.cc:  itsInnerBPLogicalVolume->SetFieldManager(itsBPFieldMgr,false) ;
src/BDSMultipole.cc:		      BDSGlobals->GetChordStepMinimum(),
src/BDSMultipole.cc:  itsChordFinder->SetDeltaChord(BDSGlobals->GetDeltaChord());
src/BDSMultipole.cc:  itsBPFieldMgr->SetDetectorField(aField);
src/BDSMultipole.cc:  itsBPFieldMgr->SetChordFinder(itsChordFinder);
src/BDSMultipole.cc:  itsBPFieldMgr->SetDeltaIntersection(BDSGlobals->GetDeltaIntersection());
src/BDSMultipole.cc:		BDSGlobals->GetComponentBoxSize()/2,//x length
src/BDSMultipole.cc:		BDSGlobals->GetComponentBoxSize()/2, // y half length
src/BDSMultipole.cc:		(itsLength+BDSGlobals->GetLengthSafety())/2), //z hlf ln 
src/BDSMultipole.cc:     theMaterials->LCVacuum,
src/BDSMultipole.cc:  //		     BDSGlobals->GetThresholdCutCharged());     
src/BDSMultipole.cc:  // itsMarkerUserLimits->SetMaxAllowedStep(itsLength);
src/BDSMultipole.cc:  //  itsMarkerLogicalVolume->SetUserLimits(itsMarkerUserLimits);
src/BDSMultipole.cc:				   BDSGlobals->GetComponentBoxSize()/2,
src/BDSMultipole.cc:				   theMaterials->LCIron,
src/BDSMultipole.cc:			//theMaterials->LCVacuum,
src/BDSMultipole.cc:      // weighting volume--------------------------------------------
src/BDSMultipole.cc:      G4double WeightThick=1.e-3*mm;
src/BDSMultipole.cc:      G4double WeightRad=itsBpRadius+0.5*BDSMaterials->LCIron->GetRadlen();
src/BDSMultipole.cc:			    BDSMaterials->LCWeightIron,
src/BDSMultipole.cc:      WeightRad=itsBpRadius+2*BDSMaterials->LCIron->GetRadlen();
src/BDSMultipole.cc:			    BDSMaterials->LCWeightIron,
src/BDSMultipole.cc:      //end of weighting volume-----------------------------
src/BDSMultipole.cc:		     BDSGlobals->GetThresholdCutCharged());
src/BDSMultipole.cc:  itsOuterUserLimits->SetMaxAllowedStep(aLength);
src/BDSMultipole.cc:  itsOuterLogicalVolume->SetUserLimits(itsOuterUserLimits);
src/BDSMultipole.cc:  //  (*theOuterFieldMap)[itsOuterLogicalVolume->GetName()]=itsOuterMagField;
src/BDSMultipole.cc:  itsOuterLogicalVolume->SetFieldManager(itsOuterFieldMgr,false);
src/BDSMultipoleOuterMagField.cc:    G4TransportationManager::GetTransportationManager()->
src/BDSMultipoleOuterMagField.cc:  G4ThreeVector LocalR = MultipoleOuterNavigator->
src/BDSMultipoleOuterMagField.cc:  G4double phi = LocalR.phi()-itsPhiOffset;
src/BDSMultipoleOuterMagField.cc:  // define sectors relative to the y-axis
src/BDSMultipoleOuterMagField.cc:  phi=pi/2-phi;
src/BDSMultipoleOuterMagField.cc:  if(phi>twopi)phi-=twopi;
src/BDSMultipoleOuterMagField.cc:  BFactor*=pow(-1,nSector);
src/BDSMultipoleOuterMagField.cc:  Bfield[1]= -LocalR.x()*BFactor;
src/BDSMultipoleOuterMagField.cc:  if (itsNPoles==2)Bfield[1]*=-1;
src/BDSOctMagField.cc:  if(Point[3]==-999.)
src/BDSOctMagField.cc:	G4TransportationManager::GetTransportationManager()->
src/BDSOctMagField.cc:      LocalR = OctNavigator->GetCurrentLocalCoordinate();
src/BDSOctMagField.cc:  Bfield[0]=(3*LocalR.x()*LocalR.x()*LocalR.y()-
src/BDSOctMagField.cc:  Bfield[1]=(pow(LocalR.x(),3)-LocalR.x()*LocalR.y()*LocalR.y())
src/BDSOctMagField.cc:  // factor of 6 is actually 3-factorial.
src/BDSOctStepper.cc:// GEANT4 tag $Name:  $
src/BDSOctStepper.cc:  G4double kappa=  -fPtrMagEqOfMot->FCof()*itsBTrpPrime/InitMag;
src/BDSOctStepper.cc:  if(abs(kappa)<1.e-20)
src/BDSOctStepper.cc:	G4TransportationManager::GetTransportationManager()->
src/BDSOctStepper.cc:      G4AffineTransform LocalAffine=OctNavigator->GetLocalToGlobalTransform();
src/BDSOctStepper.cc:      G4ThreeVector LocalR = OctNavigator->GetCurrentLocalCoordinate();
src/BDSOctStepper.cc:      G4ThreeVector LocalRp= (OctNavigator->ComputeLocalAxis(v0)).unit();
src/BDSOctStepper.cc:      G4double x02My02=(x0*x0-y0*y0);
src/BDSOctStepper.cc:      G4double y3fac=pow(y0,3)-3*y0*x0*x0;
src/BDSOctStepper.cc:      G4double x3fac=pow(x0,3)-3*x0*y0*y0;
src/BDSOctStepper.cc:      // extra minus signs because x,y_machine = - x_,-y_geant_world
src/BDSOctStepper.cc:      LocalRpp.setZ(- xp*x3fac - yp*y3fac);
src/BDSOctStepper.cc:      //LocalRpp.setX(-zp*x3fac);
src/BDSOctStepper.cc:      //LocalRpp.setY(-zp*y3fac);
src/BDSOctStepper.cc:	  G4double dz=sqrt(h2*(1.-h2*R_1*R_1/12)-dx*dx-dy*dy);
src/BDSOctupole.cc:      if(BDSGlobals->GetIncludeIronMagFields())
src/BDSOctupole.cc:	  polePos[0]=-BDSGlobals->GetMagnetPoleRadius()*sin(pi/8);
src/BDSOctupole.cc:	  polePos[1]=BDSGlobals->GetMagnetPoleRadius()*cos(pi/8);
src/BDSOctupole.cc:	  polePos[3]=-999.;//flag to use polePos rather than local track
src/BDSOctupole.cc:	  itsMagField->GetFieldValue(polePos,Bfield);
src/BDSOctupole.cc:	    BDSGlobals->GetMagnetPoleSize()/
src/BDSOctupole.cc:	    (BDSGlobals->GetComponentBoxSize()/2-
src/BDSOctupole.cc:	     BDSGlobals->GetMagnetPoleRadius());
src/BDSOctupole.cc:      if(BDSGlobals->GetSynchRadOn()&& BDSGlobals->GetSynchRescale())
src/BDSOctupole.cc:  itsStepper->SetBTrpPrime(itsBTrpPrime);
src/BDSPhysicsList.cc:// GEANT4 tag $Name:  $
src/BDSPhysicsList.cc:// from Hans-Peter:
src/BDSPhysicsList.cc:  // pseudo-particles
src/BDSPhysicsList.cc:  if(BDSGlobals->GetTurnOnInteractions())
src/BDSPhysicsList.cc:  if(BDSGlobals->GetSynchRadOn()) ConstructSynchRad();
src/BDSPhysicsList.cc:  if(BDSGlobals->GetPlanckOn()) ConstructPlanckScatt();
src/BDSPhysicsList.cc:  //  if(BDSGlobals->GetTrackWeightFactor()!=1) ConstructTrackStop();
src/BDSPhysicsList.cc:  if(BDSGlobals->GetUseEMHadronic())ConstructEMHadronic();
src/BDSPhysicsList.cc:  if(BDSGlobals->GetUseMuonPairProduction())ConstructMuonPairProduction();
src/BDSPhysicsList.cc:  if(BDSGlobals->GetBDSeBremOn())ConstructBDSeBremsstrahlung();
src/BDSPhysicsList.cc:  theParticleIterator->reset();
src/BDSPhysicsList.cc:    G4ParticleDefinition* particle = theParticleIterator->value();
src/BDSPhysicsList.cc:    G4ProcessManager* pmanager = particle->GetProcessManager();
src/BDSPhysicsList.cc:    G4String particleName = particle->GetParticleName();
src/BDSPhysicsList.cc:    if (particleName == "e-") 
src/BDSPhysicsList.cc:	pmanager->AddProcess(theEMinusBDSeBrem);
src/BDSPhysicsList.cc:	pmanager->SetProcessOrderingToLast(theEMinusBDSeBrem,idxPostStep);
src/BDSPhysicsList.cc:	pmanager->AddProcess(theEPlusBDSeBrem);
src/BDSPhysicsList.cc:	pmanager->
src/BDSPhysicsList.cc:  pManager = G4Gamma::Gamma()->GetProcessManager();
src/BDSPhysicsList.cc:  thePhotoNuclearProcess->RegisterMe(theGammaReaction);
src/BDSPhysicsList.cc:  pManager->AddDiscreteProcess(thePhotoNuclearProcess);
src/BDSPhysicsList.cc:  // pManager = G4Electron::Electron()->GetProcessManager();
src/BDSPhysicsList.cc:  //  pManager->AddDiscreteProcess(&theElectronNuclearProcess);
src/BDSPhysicsList.cc:  // pManager = G4Positron::Positron()->GetProcessManager();
src/BDSPhysicsList.cc:  // pManager->AddDiscreteProcess(&thePositronNuclearProcess);
src/BDSPhysicsList.cc:  pManager = G4Gamma::Gamma()->GetProcessManager();
src/BDSPhysicsList.cc:  theMuonPairProductionProcess->
src/BDSPhysicsList.cc:    SetCrossSecFactor(BDSGlobals->GetMuonProductionScaleFactor());
src/BDSPhysicsList.cc:  pManager->AddDiscreteProcess(theMuonPairProductionProcess);
src/BDSPhysicsList.cc:  theParticleIterator->reset();
src/BDSPhysicsList.cc:    G4ParticleDefinition* particle = theParticleIterator->value();
src/BDSPhysicsList.cc:    G4ProcessManager* pmanager = particle->GetProcessManager();
src/BDSPhysicsList.cc:    G4String particleName = particle->GetParticleName();
src/BDSPhysicsList.cc:    if (particleName == "e-") 
src/BDSPhysicsList.cc:	pmanager->AddProcess(theEMinusSynchrotronRadiation);
src/BDSPhysicsList.cc:	pmanager->
src/BDSPhysicsList.cc:	pmanager->AddProcess(theEPlusSynchrotronRadiation);
src/BDSPhysicsList.cc:	pmanager->
src/BDSPhysicsList.cc:  BDSAcceleratorType* TheAccelerator=BDSGlobals->GetAcceleratorType();
src/BDSPhysicsList.cc:  theParticleIterator->reset();
src/BDSPhysicsList.cc:    G4ParticleDefinition* particle = theParticleIterator->value();
src/BDSPhysicsList.cc:    G4ProcessManager* pmanager = particle->GetProcessManager();
src/BDSPhysicsList.cc:    G4String particleName = particle->GetParticleName();
src/BDSPhysicsList.cc:    if (particleName == "e-") 
src/BDSPhysicsList.cc:	  new BDSPlanckScatter(TheAccelerator->GetTemperature());
src/BDSPhysicsList.cc:	pmanager->AddProcess(theEMPlanckScatter);
src/BDSPhysicsList.cc:	pmanager->
src/BDSPhysicsList.cc:	  new BDSPlanckScatter(TheAccelerator->GetTemperature());
src/BDSPhysicsList.cc:	pmanager->AddProcess(theEPPlanckScatter);
src/BDSPhysicsList.cc:	pmanager->
src/BDSPhysicsList.cc:  theParticleIterator->reset();
src/BDSPhysicsList.cc:    G4ParticleDefinition* particle = theParticleIterator->value();
src/BDSPhysicsList.cc:    G4ProcessManager* pmanager = particle->GetProcessManager();
src/BDSPhysicsList.cc:    G4String particleName = particle->GetParticleName();
src/BDSPhysicsList.cc:    if (particleName == "e-") 
src/BDSPhysicsList.cc:	G4VProcess* theEMinusLaserwire=TheBDSLaserWire->GetLaserWireProcess();
src/BDSPhysicsList.cc:	pmanager->AddProcess(theEMinusLaserwire);
src/BDSPhysicsList.cc:	pmanager->
src/BDSPhysicsList.cc:	G4VProcess* theEPlusLaserwire=TheBDSLaserWire->GetLaserWireProcess();
src/BDSPhysicsList.cc:	pmanager->AddProcess(theEPlusLaserwire);
src/BDSPhysicsList.cc:	pmanager->
src/BDSPhysicsList.cc:  theParticleIterator->reset();
src/BDSPhysicsList.cc:    G4ParticleDefinition* particle = theParticleIterator->value();
src/BDSPhysicsList.cc:    G4ProcessManager* pmanager = particle->GetProcessManager();
src/BDSPhysicsList.cc:    G4String particleName = particle->GetParticleName();
src/BDSPhysicsList.cc:      if(BDSGlobals->GetUseMuonShowers())
src/BDSPhysicsList.cc:       pmanager->AddDiscreteProcess(new BDSGammaConversion());
src/BDSPhysicsList.cc:       pmanager->AddDiscreteProcess(new G4GammaConversion());
src/BDSPhysicsList.cc:      pmanager->AddDiscreteProcess(new G4ComptonScattering());      
src/BDSPhysicsList.cc:      pmanager->AddDiscreteProcess(new G4PhotoElectricEffect());
src/BDSPhysicsList.cc:    } else if (particleName == "e-") {
src/BDSPhysicsList.cc:      pmanager->AddProcess(theCutsProcess);
src/BDSPhysicsList.cc:      pmanager->AddProcess(theeminusMultipleScattering);
src/BDSPhysicsList.cc:      pmanager->AddProcess(theeminusIonisation);
src/BDSPhysicsList.cc:      pmanager->AddProcess(theeminusBremsstrahlung);
src/BDSPhysicsList.cc:      pmanager->
src/BDSPhysicsList.cc:      pmanager->
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(theCutsProcess,              idxPostStep,1);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(theeminusMultipleScattering, idxPostStep,2);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(theeminusIonisation,         idxPostStep,3);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(theeminusBremsstrahlung,     idxPostStep,4);
src/BDSPhysicsList.cc:	  pmanager->AddProcess(theEMinusAcceleration);
src/BDSPhysicsList.cc:	  pmanager->
src/BDSPhysicsList.cc:      pmanager->AddProcess(theeplusMultipleScattering);
src/BDSPhysicsList.cc:      pmanager->AddProcess(theeplusIonisation);
src/BDSPhysicsList.cc:      pmanager->AddProcess(theeplusBremsstrahlung);
src/BDSPhysicsList.cc:      pmanager->AddProcess(theeplusAnnihilation);
src/BDSPhysicsList.cc:           pmanager->AddProcess(theCutsProcess);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrderingToFirst(theeplusAnnihilation, idxAtRest);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(theeplusMultipleScattering, idxAlongStep,1);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(theeplusIonisation,         idxAlongStep,2);
src/BDSPhysicsList.cc:     pmanager->SetProcessOrdering(theCutsProcess,             idxPostStep,1);  
src/BDSPhysicsList.cc:     pmanager->SetProcessOrdering(theeplusMultipleScattering, idxPostStep,2);
src/BDSPhysicsList.cc:     pmanager->SetProcessOrdering(theeplusIonisation,         idxPostStep,3);
src/BDSPhysicsList.cc:     pmanager->SetProcessOrdering(theeplusBremsstrahlung,     idxPostStep,4);
src/BDSPhysicsList.cc:     pmanager->SetProcessOrdering(theeplusAnnihilation,       idxPostStep,5);
src/BDSPhysicsList.cc:               particleName == "mu-"    ) {
src/BDSPhysicsList.cc:      pmanager->AddProcess(anIonisation);
src/BDSPhysicsList.cc:      pmanager->AddProcess(aMultipleScattering);
src/BDSPhysicsList.cc:      pmanager->AddProcess(aBremsstrahlung);
src/BDSPhysicsList.cc:      pmanager->AddProcess(aPairProduction);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(aMultipleScattering, idxAlongStep,1);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(anIonisation,        idxAlongStep,2);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(aMultipleScattering, idxPostStep,1);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(anIonisation,        idxPostStep,2);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(aBremsstrahlung,     idxPostStep,3);
src/BDSPhysicsList.cc:      pmanager->SetProcessOrdering(aPairProduction,     idxPostStep,4);
src/BDSPhysicsList.cc:     } else if ((!particle->IsShortLived()) &&
src/BDSPhysicsList.cc:	       (particle->GetPDGCharge() != 0.0) && 
src/BDSPhysicsList.cc:	       (particle->GetParticleName() != "chargedgeantino")) {
src/BDSPhysicsList.cc:     pmanager->AddProcess(anIonisation);
src/BDSPhysicsList.cc:     pmanager->AddProcess(aMultipleScattering);
src/BDSPhysicsList.cc:     pmanager->SetProcessOrdering(aMultipleScattering, idxAlongStep,1);
src/BDSPhysicsList.cc:     pmanager->SetProcessOrdering(anIonisation,        idxAlongStep,2);
src/BDSPhysicsList.cc:     pmanager->SetProcessOrdering(aMultipleScattering, idxPostStep,1);
src/BDSPhysicsList.cc:     pmanager->SetProcessOrdering(anIonisation,        idxPostStep,2);
src/BDSPhysicsList.cc:    //  pmanager->DumpInfo();
src/BDSPhysicsList.cc:    //  pmanager->SetVerboseLevel(2);
src/BDSPhysicsList.cc:  theParticleIterator->reset();
src/BDSPhysicsList.cc:    G4ParticleDefinition* particle = theParticleIterator->value();
src/BDSPhysicsList.cc:    G4ProcessManager* pmanager = particle->GetProcessManager();
src/BDSPhysicsList.cc:    if (theDecayProcess->IsApplicable(*particle)) { 
src/BDSPhysicsList.cc:      pmanager ->AddProcess(theDecayProcess);
src/BDSPhysicsList.cc:      pmanager ->SetProcessOrdering(theDecayProcess, idxPostStep);
src/BDSPhysicsList.cc:      pmanager ->SetProcessOrdering(theDecayProcess, idxAtRest);
src/BDSPhysicsList.cc:  // set cut values for gamma at first and for e- second and next for e+,
src/BDSPhysicsList.cc:  // because some processes for e+/e- need cut values for gamma 
src/BDSPhysicsList.cc:  SetCutValue(cutForElectron, "e-");
src/BDSPhysicsList.cc:  theParticleIterator->reset();
src/BDSPhysicsList.cc:    G4ParticleDefinition* particle = theParticleIterator->value();
src/BDSPhysicsList.cc:    G4ProcessManager* pmanager = particle->GetProcessManager();
src/BDSPhysicsList.cc:    if (!particle->IsShortLived()) {
src/BDSPhysicsList.cc:	// add transportation with ordering = ( -1, "first", "first" )
src/BDSPhysicsList.cc:	pmanager ->AddProcess(theTransportationProcess);
src/BDSPhysicsList.cc:	pmanager ->SetProcessOrderingToFirst(theTransportationProcess, idxAlongStep);
src/BDSPhysicsList.cc:	pmanager ->SetProcessOrderingToFirst(theTransportationProcess, idxPostStep);
src/BDSPlanckEngine.cc://      ------------ BDSPlanckEngine physics process --------
src/BDSPlanckEngine.cc:  b=-0.6;
src/BDSPlanckEngine.cc:  x2=(log(c)-a)/b;
src/BDSPlanckEngine.cc:  area2 = area1 + c*(x2-x1);
src/BDSPlanckEngine.cc:  area3=(- exp(a+b*x2)/b);
src/BDSPlanckEngine.cc:  // H.Burkardt, SL/Note 93-73
src/BDSPlanckEngine.cc:  G4double costh=2.*G4UniformRand()-1.;
src/BDSPlanckEngine.cc:  G4double sinth=sqrt(1-costh*costh);
src/BDSPlanckEngine.cc:	   {x=x1+ (area-area1)/c ;
src/BDSPlanckEngine.cc:	   {x= (log((area-TotalArea)*b) - a)/b; 
src/BDSPlanckScatter.cc://      ------------ BDSPlanckScatter physics process --------
src/BDSPlanckScatter.cc: BDSAcceleratorType* TheAccelerator=BDSGlobals->GetAcceleratorType();
src/BDSPlanckScatter.cc: G4double w= TheAccelerator->GetBeamTotalEnergy()*AvPhotonEnergy/
src/BDSPlanckScatter.cc:			     (1+w)/pow(w,3)*( 2*w*(1+w)/(1+2*w) -log(1+2*w))
src/BDSPlanckScatter.cc:			     - (1+3*w)/pow((1+2*w),2) );
src/BDSPlanckScatter.cc: G4double photon_density = pow((itsTemperature/295.15),3)*5.329e14*pow(m,-3);
src/BDSPlanckScatter.cc: itsPlanckMeanFreePath /= BDSGlobals->GetBackgroundScaleFactor(); 
src/BDSPlanckScatter.cc:  itsComptonEngine->SetIncomingElectron4Vec(aDynamicParticle->Get4Momentum());
src/BDSPlanckScatter.cc:  itsComptonEngine->SetIncomingPhoton4Vec(itsPlanckEngine->PerformPlanck());
src/BDSPlanckScatter.cc:  itsComptonEngine->PerformCompton();
src/BDSPlanckScatter.cc:  G4LorentzVector ScatGam=itsComptonEngine->GetScatteredGamma();
src/BDSPlanckScatter.cc:    itsComptonEngine->GetScatteredElectron().e()-electron_mass_c2;
src/BDSPlanckScatter.cc:  G4LorentzVector ScatEl=itsComptonEngine->GetScatteredElectron();
src/BDSPlanckScatter.cc:      G4double charge= aDynamicParticle->GetCharge();
src/BDSPrimaryGeneratorAction.cc:// GEANT4 tag $Name:  $
src/BDSPrimaryGeneratorAction.cc:  BDSAcceleratorType* TheAccelerator=BDSGlobals->GetAcceleratorType();
src/BDSPrimaryGeneratorAction.cc:  particleGun->SetParticleDefinition(TheAccelerator->
src/BDSPrimaryGeneratorAction.cc:  particleGun->SetParticleMomentumDirection(G4ThreeVector(0.,0.,1.));
src/BDSPrimaryGeneratorAction.cc:  particleGun->
src/BDSPrimaryGeneratorAction.cc:				      -BDSGlobals->GetWorldSizeZ()));
src/BDSPrimaryGeneratorAction.cc:  particleGun->SetParticleEnergy(TheAccelerator->GetBeamKineticEnergy());
src/BDSPrimaryGeneratorAction.cc:  if (BDSGlobals->GetReadBunchFile() && BDSGlobals->GetExtractBunchFile())
src/BDSPrimaryGeneratorAction.cc:  if(BDSGlobals->GetReadBunchFile())InputBunchFile.open("BDSBunch.input");
src/BDSPrimaryGeneratorAction.cc:  else if (BDSGlobals->GetExtractBunchFile())
src/BDSPrimaryGeneratorAction.cc:      itsBDSExtract->rndmst5(12,34,56,78);
src/BDSPrimaryGeneratorAction.cc:  if((TheAccelerator->GetPhaseSpaceType()=="halo_flat")&&
src/BDSPrimaryGeneratorAction.cc:     BDSGlobals->GetUseHaloRadius()) 
src/BDSPrimaryGeneratorAction.cc:    itsBDSGen5Shell=new BDSGen5Shell(BDSGlobals->GetHaloInnerRadius(),
src/BDSPrimaryGeneratorAction.cc:				     BDSGlobals->GetHaloOuterRadius());
src/BDSPrimaryGeneratorAction.cc:  if(TheAccelerator->GetPhaseSpaceType()=="halo_one_over_r")
src/BDSPrimaryGeneratorAction.cc:      logXfactor=log(BDSGlobals->GetOuterHaloX()/BDSGlobals->GetInnerHaloX());
src/BDSPrimaryGeneratorAction.cc:      logYfactor=log(BDSGlobals->GetOuterHaloY()/BDSGlobals->GetInnerHaloY());
src/BDSPrimaryGeneratorAction.cc:      G4cout<<" sigma_x="<<TheAccelerator->GetSigmaX()/m<<" m"<<G4endl;
src/BDSPrimaryGeneratorAction.cc:      G4cout<<" sigma_x-prime="<<TheAccelerator->GetSigmaXprime()<<G4endl;
src/BDSPrimaryGeneratorAction.cc:      G4cout<<" sigma_y="<<TheAccelerator->GetSigmaY()/m<<" m"<<G4endl;
src/BDSPrimaryGeneratorAction.cc:      G4cout<<" sigma_y-prime="<<TheAccelerator->GetSigmaYprime()<<G4endl;
src/BDSPrimaryGeneratorAction.cc:  //GaussGen->shoot();
src/BDSPrimaryGeneratorAction.cc:  // GaussGen->shoot();
src/BDSPrimaryGeneratorAction.cc:  // GaussGen->shoot();
src/BDSPrimaryGeneratorAction.cc:  G4double z0 = -BDSGlobals->GetWorldSizeZ();
src/BDSPrimaryGeneratorAction.cc:  BDSAcceleratorType* TheAccelerator=BDSGlobals->GetAcceleratorType();
src/BDSPrimaryGeneratorAction.cc:    if(BDSGlobals->GetExtractBunchFile())
src/BDSPrimaryGeneratorAction.cc:	itsBDSExtract->GenerateParticle(dx,xp,dy,yp,dz,E);
src/BDSPrimaryGeneratorAction.cc:	xp*=1.e-6*radian;
src/BDSPrimaryGeneratorAction.cc:	yp*=1.e-6*radian;
src/BDSPrimaryGeneratorAction.cc:	t=-dz/c_light;
src/BDSPrimaryGeneratorAction.cc:	//subtract mean in yp for non-offset bunch
src/BDSPrimaryGeneratorAction.cc:	yp-=0.82331E-06 *radian;
src/BDSPrimaryGeneratorAction.cc:	itsBDSExtractO->GenerateParticle(dx,xp,dy,yp,dz,E);
src/BDSPrimaryGeneratorAction.cc:	xp*=1.e-6*radian;
src/BDSPrimaryGeneratorAction.cc:	yp*=1.e-6*radian;
src/BDSPrimaryGeneratorAction.cc:	t=-dz/c_light;
src/BDSPrimaryGeneratorAction.cc:	//subtract mean in yp for non-offset bunch
src/BDSPrimaryGeneratorAction.cc:	yp-=0.82331E-06 *radian;
src/BDSPrimaryGeneratorAction.cc:    else if(BDSGlobals->GetReadBunchFile())
src/BDSPrimaryGeneratorAction.cc:           xp*=1.e-6*radian;
src/BDSPrimaryGeneratorAction.cc:           yp*=1.e-6*radian;
src/BDSPrimaryGeneratorAction.cc:	   t=-dz/c_light;
src/BDSPrimaryGeneratorAction.cc:	   E-=TheAccelerator->GetBeamParticleDefinition()->GetPDGMass();
src/BDSPrimaryGeneratorAction.cc:	t = -TheAccelerator->GetSigmaT()* (1.-2.*GaussGen->shoot());
src/BDSPrimaryGeneratorAction.cc:	if(TheAccelerator->GetPhaseSpaceType()=="normal")
src/BDSPrimaryGeneratorAction.cc:	    if(TheAccelerator->GetAlphaX())
src/BDSPrimaryGeneratorAction.cc:		dx=TheAccelerator->GetSigmaX()*GaussGen->shoot();
src/BDSPrimaryGeneratorAction.cc:		G4double t=TheAccelerator->GetSigmaX()*GaussGen->shoot();
src/BDSPrimaryGeneratorAction.cc:		xp = (t-TheAccelerator->GetAlphaX()*dx)/
src/BDSPrimaryGeneratorAction.cc:		  TheAccelerator->GetBetaX();
src/BDSPrimaryGeneratorAction.cc:		  //dx=TheAccelerator->GetSigmaX()*GaussGen->shoot()*
src/BDSPrimaryGeneratorAction.cc:		  //xp=TheAccelerator->GetSigmaXprime()*GaussGen->shoot()*
src/BDSPrimaryGeneratorAction.cc:		  //(cos(phix)-TheAccelerator->GetAlphaX()*sin(phix));
src/BDSPrimaryGeneratorAction.cc:		dx=TheAccelerator->GetSigmaX()*GaussGen->shoot();
src/BDSPrimaryGeneratorAction.cc:		xp= TheAccelerator->GetSigmaXprime() * GaussGen->shoot();
src/BDSPrimaryGeneratorAction.cc:	    if(TheAccelerator->GetAlphaY())
src/BDSPrimaryGeneratorAction.cc:		dy=TheAccelerator->GetSigmaY()*GaussGen->shoot();
src/BDSPrimaryGeneratorAction.cc:		G4double t=TheAccelerator->GetSigmaY()*GaussGen->shoot();
src/BDSPrimaryGeneratorAction.cc:		yp = (t-TheAccelerator->GetAlphaY()*dy)/
src/BDSPrimaryGeneratorAction.cc:		  TheAccelerator->GetBetaY();
src/BDSPrimaryGeneratorAction.cc:		//dy=TheAccelerator->GetSigmaY()*GaussGen->shoot()*
src/BDSPrimaryGeneratorAction.cc:		//yp=TheAccelerator->GetSigmaYprime()*GaussGen->shoot()*
src/BDSPrimaryGeneratorAction.cc:		//  (cos(phiy)-TheAccelerator->GetAlphaY()*sin(phiy));
src/BDSPrimaryGeneratorAction.cc:		dy= TheAccelerator->GetSigmaY()      * GaussGen->shoot();
src/BDSPrimaryGeneratorAction.cc:		yp= TheAccelerator->GetSigmaYprime() * GaussGen->shoot();
src/BDSPrimaryGeneratorAction.cc:	    if(TheAccelerator->GetEDisType()=="gaussian")
src/BDSPrimaryGeneratorAction.cc:		E = TheAccelerator->GetBeamKineticEnergy()
src/BDSPrimaryGeneratorAction.cc:		  + TheAccelerator->GetSigmaE() *GaussGen->shoot();}
src/BDSPrimaryGeneratorAction.cc:		E = TheAccelerator->GetBeamKineticEnergy()*
src/BDSPrimaryGeneratorAction.cc:		  (1+TheAccelerator->GetFlatRelativeEnergySpread()/2.
src/BDSPrimaryGeneratorAction.cc:		   *(1.-2.*FlatGen->shoot()));
src/BDSPrimaryGeneratorAction.cc:	else if(TheAccelerator->GetPhaseSpaceType()=="halo_flat")
src/BDSPrimaryGeneratorAction.cc:	    if(BDSGlobals->GetUseHaloRadius())
src/BDSPrimaryGeneratorAction.cc:		dElo=1.-TheAccelerator->GetHaloLowerRelativeEnergySpread();
src/BDSPrimaryGeneratorAction.cc:		dEhi=TheAccelerator->GetHaloUpperRelativeEnergySpread()-1.;
src/BDSPrimaryGeneratorAction.cc:		    G4double *genVec= itsBDSGen5Shell->GenPoint();
src/BDSPrimaryGeneratorAction.cc:		    //G4double dE=TheAccelerator->GetBeamKineticEnergy()*
src/BDSPrimaryGeneratorAction.cc:		    // (TheAccelerator->GetHaloUpperRelativeEnergySpread()-
src/BDSPrimaryGeneratorAction.cc:		    // TheAccelerator->GetHaloLowerRelativeEnergySpread())
src/BDSPrimaryGeneratorAction.cc:		    //  E = (TheAccelerator->GetHaloLowerRelativeEnergySpread()
src/BDSPrimaryGeneratorAction.cc:		    // +TheAccelerator->GetHaloUpperRelativeEnergySpread())/2
src/BDSPrimaryGeneratorAction.cc:		    // *TheAccelerator->GetBeamKineticEnergy()
src/BDSPrimaryGeneratorAction.cc:		    if((dE>0 && dE<dEhi)||(dE<0)&&(-dE<dElo))
src/BDSPrimaryGeneratorAction.cc:			E = TheAccelerator->GetBeamKineticEnergy()*(1.+ dE);
src/BDSPrimaryGeneratorAction.cc:			dx= TheAccelerator->GetXCollimationDepthInSigma()*
src/BDSPrimaryGeneratorAction.cc:			  TheAccelerator->GetSigmaX()*genVec[0];
src/BDSPrimaryGeneratorAction.cc:			xp= TheAccelerator->GetXPrimeCollimationDepthInSigma()*
src/BDSPrimaryGeneratorAction.cc:			  TheAccelerator->GetSigmaXprime()*genVec[1];
src/BDSPrimaryGeneratorAction.cc:			dy= TheAccelerator->GetYCollimationDepthInSigma()*
src/BDSPrimaryGeneratorAction.cc:			  TheAccelerator->GetSigmaY()*genVec[2];
src/BDSPrimaryGeneratorAction.cc:			yp= TheAccelerator->GetYPrimeCollimationDepthInSigma()*
src/BDSPrimaryGeneratorAction.cc:			  TheAccelerator->GetSigmaYprime()*genVec[3];
src/BDSPrimaryGeneratorAction.cc:		dx= TheAccelerator->GetHaloSigmaX()*
src/BDSPrimaryGeneratorAction.cc:		  (1.-2.*FlatGen->shoot());
src/BDSPrimaryGeneratorAction.cc:		xp= TheAccelerator->GetHaloSigmaXprime()*
src/BDSPrimaryGeneratorAction.cc:		  (1.-2.*FlatGen->shoot());
src/BDSPrimaryGeneratorAction.cc:		dy= TheAccelerator->GetHaloSigmaY()*
src/BDSPrimaryGeneratorAction.cc:		  (1.-2.*FlatGen->shoot());
src/BDSPrimaryGeneratorAction.cc:		yp= TheAccelerator->GetHaloSigmaYprime()*
src/BDSPrimaryGeneratorAction.cc:		  (1.-2.*FlatGen->shoot());
src/BDSPrimaryGeneratorAction.cc:		E = TheAccelerator->GetBeamKineticEnergy()*
src/BDSPrimaryGeneratorAction.cc:		  (TheAccelerator->GetHaloLowerRelativeEnergySpread() +
src/BDSPrimaryGeneratorAction.cc:		   (TheAccelerator->GetHaloUpperRelativeEnergySpread() -
src/BDSPrimaryGeneratorAction.cc:		    TheAccelerator->GetHaloLowerRelativeEnergySpread())
src/BDSPrimaryGeneratorAction.cc:		   *(1.-2.*FlatGen->shoot()) );
src/BDSPrimaryGeneratorAction.cc:	else if(TheAccelerator->GetPhaseSpaceType()=="halo_one_over_r")
src/BDSPrimaryGeneratorAction.cc:	    theta=twopi*FlatGen->shoot();
src/BDSPrimaryGeneratorAction.cc:	    r=BDSGlobals->GetInnerHaloX()*exp(FlatGen->shoot()*logXfactor);
src/BDSPrimaryGeneratorAction.cc:	    dx=TheAccelerator->GetSigmaX()*r*cos(theta);
src/BDSPrimaryGeneratorAction.cc:	    xp=TheAccelerator->GetSigmaXprime()*r*sin(theta);
src/BDSPrimaryGeneratorAction.cc:	    theta=twopi*FlatGen->shoot();
src/BDSPrimaryGeneratorAction.cc:	    r=BDSGlobals->GetInnerHaloY()*exp(FlatGen->shoot()*logYfactor);
src/BDSPrimaryGeneratorAction.cc:	    dy=TheAccelerator->GetSigmaY()*r*cos(theta);
src/BDSPrimaryGeneratorAction.cc:	    yp=TheAccelerator->GetSigmaYprime()*r*sin(theta);
src/BDSPrimaryGeneratorAction.cc:	    E = TheAccelerator->GetBeamKineticEnergy()*
src/BDSPrimaryGeneratorAction.cc:	      (1. + 1.e-2*GaussGen->shoot());
src/BDSPrimaryGeneratorAction.cc:    E=TheAccelerator->GetBeamKineticEnergy();
src/BDSPrimaryGeneratorAction.cc:     //    y0=1.e-6*m;
src/BDSPrimaryGeneratorAction.cc:  E=TheAccelerator->GetBeamKineticEnergy();
src/BDSPrimaryGeneratorAction.cc:  G4double thetaTmp=twopi*FlatGen->shoot();
src/BDSPrimaryGeneratorAction.cc:  zp=sqrt(1.-xp*xp -yp*yp);  
src/BDSPrimaryGeneratorAction.cc:       //       x0 = 1*mm*(G4UniformRand()-0.5);
src/BDSPrimaryGeneratorAction.cc:       //x0 = (BDSDetector->GetBeamSizeX())*(G4UniformRand()-0.5);
src/BDSPrimaryGeneratorAction.cc:       //      y0 = (BDSDetector->GetBeamSizeY())*(G4UniformRand()-0.5);
src/BDSPrimaryGeneratorAction.cc:  // y0=30*cm*(G4UniformRand()-0.5);
src/BDSPrimaryGeneratorAction.cc:  x0=LCBeampipeRadius*(G4UniformRand()-0.5);
src/BDSPrimaryGeneratorAction.cc:  y0=LCBeampipeRadius*(G4UniformRand()-0.5);
src/BDSPrimaryGeneratorAction.cc:  E=TheAccelerator->GetBeamKineticEnergy();
src/BDSPrimaryGeneratorAction.cc:  x0=-5.5*mm;
src/BDSPrimaryGeneratorAction.cc:  //----------------------	  
src/BDSPrimaryGeneratorAction.cc:  E+=BDSGlobals->GetEnergyOffset();
src/BDSPrimaryGeneratorAction.cc:  x0+=BDSGlobals->GetHorizontalBeamlineOffset();
src/BDSPrimaryGeneratorAction.cc:  y0+=BDSGlobals->GetVerticalBeamlineOffset();
src/BDSPrimaryGeneratorAction.cc:  //----------------------	  
src/BDSPrimaryGeneratorAction.cc:  PartMomDir.rotateY(BDSGlobals->GetGlobalBeamlineRotationY());
src/BDSPrimaryGeneratorAction.cc:  particleGun->SetParticlePosition(G4ThreeVector(x0,y0,z0));
src/BDSPrimaryGeneratorAction.cc:  particleGun->SetParticleEnergy(E);
src/BDSPrimaryGeneratorAction.cc:  particleGun->SetParticleMomentumDirection(PartMomDir);
src/BDSPrimaryGeneratorAction.cc:  particleGun->SetParticleTime(t);
src/BDSPrimaryGeneratorAction.cc:  particleGun->GeneratePrimaryVertex(anEvent);
src/BDSPrimaryGeneratorAction.cc:  initial_z=-t*c_light;
src/BDSPrimaryGeneratorAction.cc:  initial_E=E+TheAccelerator->GetBeamParticleDefinition()->GetPDGMass();
src/BDSPrimaryGeneratorMessenger.cc:// GEANT4 tag $Name:  $
src/BDSPrimaryGeneratorMessenger.cc:  RndmCmd->SetGuidance("Shoot randomly the incident particle.");
src/BDSPrimaryGeneratorMessenger.cc:  RndmCmd->SetGuidance("  Choice : on(default), off");
src/BDSPrimaryGeneratorMessenger.cc:  RndmCmd->SetParameterName("choice",true);
src/BDSPrimaryGeneratorMessenger.cc:  RndmCmd->SetDefaultValue("on");
src/BDSPrimaryGeneratorMessenger.cc:  RndmCmd->SetCandidates("on off");
src/BDSPrimaryGeneratorMessenger.cc:  RndmCmd->AvailableForStates(PreInit,Idle);
src/BDSPrimaryGeneratorMessenger.cc:   { BDSAction->SetRndmFlag(newValue);}
src/BDSQuadMagField.cc:  if(Point[3]==-999.)
src/BDSQuadMagField.cc:	G4TransportationManager::GetTransportationManager()->
src/BDSQuadMagField.cc:      LocalR = QuadNavigator->GetCurrentLocalCoordinate();
src/BDSQuadMagField.cc:  // factor of 2 is actually 2-factorial.
src/BDSQuadrupole.cc:      if(BDSGlobals->GetIncludeIronMagFields())
src/BDSQuadrupole.cc:	  polePos[0]=-BDSGlobals->GetMagnetPoleRadius()/sqrt(2);
src/BDSQuadrupole.cc:	  polePos[1]=BDSGlobals->GetMagnetPoleRadius()/sqrt(2);
src/BDSQuadrupole.cc:	  polePos[3]=-999.;//flag to use polePos rather than local track
src/BDSQuadrupole.cc:	  itsMagField->GetFieldValue(polePos,Bfield);
src/BDSQuadrupole.cc:	    BDSGlobals->GetMagnetPoleSize()/
src/BDSQuadrupole.cc:	    (BDSGlobals->GetComponentBoxSize()/2-
src/BDSQuadrupole.cc:	     BDSGlobals->GetMagnetPoleRadius());
src/BDSQuadrupole.cc:      if(BDSGlobals->GetSynchRadOn()&& BDSGlobals->GetSynchRescale())
src/BDSQuadrupole.cc:  itsStepper->SetBGrad(itsBGrad);
src/BDSQuadStepper.cc:// GEANT4 tag $Name:  $
src/BDSQuadStepper.cc:  G4double kappa= - fPtrMagEqOfMot->FCof()*itsBGrad/InitMag;
src/BDSQuadStepper.cc:  //  G4cout<<" at start: p="<<-  0.299792458 /(tesla*m)/
src/BDSQuadStepper.cc:  //					     fPtrMagEqOfMot->FCof()
src/BDSQuadStepper.cc:  if(abs(kappa)<1.e-12)
src/BDSQuadStepper.cc:      	G4TransportationManager::GetTransportationManager()->
src/BDSQuadStepper.cc:      G4AffineTransform LocalAffine=QuadNavigator-> 
src/BDSQuadStepper.cc:      LocalR = QuadNavigator->GetCurrentLocalCoordinate();
src/BDSQuadStepper.cc:      LocalRp= QuadNavigator->ComputeLocalAxis(v0).unit();
src/BDSQuadStepper.cc:      LocalRpp.setX(-zp*x0);
src/BDSQuadStepper.cc:      LocalRpp.setZ( x0*xp - y0*yp);
src/BDSQuadStepper.cc:	  if((abs(zp)>0.99)&&(abs(kappa)<1.e-6))
src/BDSQuadStepper.cc:		  X21=-abs(kappa)*X12;
src/BDSQuadStepper.cc:		  Y21= -abs(kappa)*Y12;
src/BDSQuadStepper.cc:	      z1p=sqrt(1 - x1p*x1p -y1p*y1p);
src/BDSQuadStepper.cc:	      G4double dx=x1-x0;
src/BDSQuadStepper.cc:	      G4double dy=y1-y0;
src/BDSQuadStepper.cc:	      G4double dz=sqrt(h2*(1.-h2/(12*R*R))-dR2);
src/BDSQuadStepper.cc:	      G4double quadX= - kappa*x0*zp;
src/BDSQuadStepper.cc:	      G4double quadZ=   kappa*(x0*xp - y0*yp);
src/BDSQuadStepper.cc:	      G4double quadX_end= - kappa*x1*z1p;
src/BDSQuadStepper.cc:	      G4double quadZ_end=   kappa*(x1*x1p - y1*y1p);
src/BDSQuadStepper.cc:	      G4double dx=(x1-x0);
src/BDSQuadStepper.cc:	      G4double dy=(y1-y0);
src/BDSQuadStepper.cc:	      G4double dz=(z1-z0);
src/BDSRootObjects.cc:      theRootOutputFile->Write();
src/BDSRootObjects.cc:      theRootOutputFile->Close();
src/BDSRootObjects.cc:      TTree* sTree=(TTree*)gDirectory->Get(name);
src/BDSRootObjects.cc:      TTree* tTree=(TTree*)gDirectory->Get(name);
src/BDSRootObjects.cc:  BDSRoot->theRootOutputFile=new TFile(filename,"RECREATE", "BDS output file");
src/BDSRootObjects.cc:      SamplerTree->Branch("x0",&x0,"x0/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("xp0",&xp0,"xp0/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("y0",&y0,"y0/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("yp0",&yp0,"yp0/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("E0",&E0,"E0/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("z0",&z0,"z0/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("x",&x,"x/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("zp",&xp,"xp/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("y",&y,"y/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("yp",&yp,"yp/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("E",&E,"E/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("z",&z,"z/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("weight",&weight,"weight/F");
src/BDSRootObjects.cc:      SamplerTree->Branch("part",&part,"part/I");
src/BDSRootObjects.cc:      SamplerTree->Branch("nev",&nev,"z/I");
src/BDSRootObjects.cc:  //  TrajTree->Branch("point", TrajPoint,"TrajPoint[3]/F");
src/BDSRootObjects.cc:  TrajTree->Branch("x",&Tx,"x/F");
src/BDSRootObjects.cc:  TrajTree->Branch("y",&Ty,"y/F");
src/BDSRootObjects.cc:  TrajTree->Branch("z",&Tz,"z/F");
src/BDSRootObjects.cc:  Tx=point->x()/m;
src/BDSRootObjects.cc:  Ty=point->y()/m;
src/BDSRootObjects.cc:  Tz=point->z()/m;
src/BDSRootObjects.cc:  TrajTree->Fill();
src/BDSRootObjects.cc:  G4String name="samp"+StringFromInt(hit->GetNumber());
src/BDSRootObjects.cc:  TTree* sTree=(TTree*)gDirectory->Get(name);
src/BDSRootObjects.cc:  x0=hit->GetInitX()/m; 
src/BDSRootObjects.cc:  xp0=hit->GetInitXPrime(); 
src/BDSRootObjects.cc:  y0=hit->GetInitY()/m; 
src/BDSRootObjects.cc:  yp0=hit->GetInitYPrime(); 
src/BDSRootObjects.cc:  E0=hit->GetInitMom()/GeV; 
src/BDSRootObjects.cc:  z0=hit->GetInitZ()/m; 
src/BDSRootObjects.cc:  x=hit->GetX()/m; 
src/BDSRootObjects.cc:  xp=hit->GetXPrime(); 
src/BDSRootObjects.cc:  y=hit->GetY()/m; 
src/BDSRootObjects.cc:  yp=hit->GetYPrime(); 
src/BDSRootObjects.cc:  E=hit->GetMom()/GeV; 
src/BDSRootObjects.cc:  z=hit->GetZ()/m; 
src/BDSRootObjects.cc:  weight=hit->GetWeight();
src/BDSRootObjects.cc:  part=hit->GetPDGtype(); 
src/BDSRootObjects.cc:  nev=hit->GetEventNo(); 
src/BDSRootObjects.cc:  sTree->Fill();
src/BDSRunAction.cc:  //  BDSGlobals->GetTimer()->Start();
src/BDSRunAction.cc:  G4cout << "### Run " << aRun->GetRunID() << " start." << G4endl;
src/BDSRunAction.cc:  if(BDSGlobals->GetUseTimer())
src/BDSRunAction.cc:      BDSGlobals->GetTimer()->Start();
src/BDSRunAction.cc:      UI->ApplyCommand("/vis/scene/notifyHandlers");
src/BDSRunAction.cc:  //   G4UImanager::GetUIpointer()->ApplyCommand("/vis/viewer/update");
src/BDSRunAction.cc:  if(BDSGlobals->GetUseTimer())
src/BDSRunAction.cc:      BDSGlobals->GetTimer()->Stop();
src/BDSRunAction.cc:      G4cout<<"RUN Elapsed time="<<*BDSGlobals->GetTimer()<<G4endl;
src/BDSRunAction.cc:  if(BDSGlobals->GetSynchRadOn())
src/BDSRunAction.cc:	  synch_output<<(*iBeam)->GetSynchEnergyLoss()/ 
src/BDSRunAction.cc:	    G4double(aRun->GetNumberOfEvent())/GeV<<G4endl;
src/BDS_run.cc:  gDirectory->mkdir("Histos");
src/BDS_run.cc:  gDirectory->mkdir("Trees");
src/BDS_run.cc:  gDirectory->mkdir("Trajectories");
src/BDS_run.cc:  HepRandom::setTheSeed(BDSGlobals->GetRandomSeed());
src/BDS_run.cc:  G4cout<<" seed from bdsglobals="<<BDSGlobals->GetRandomSeed()<<G4endl;
src/BDS_run.cc:  runManager->SetUserInitialization(detector);
src/BDS_run.cc:  runManager->SetUserInitialization(PhysList);
src/BDS_run.cc:  if(!BDSGlobals->GetUseBatch())
src/BDS_run.cc:  if(!BDSGlobals->GetUseBatch());
src/BDS_run.cc:    visManager->Initialize();
src/BDS_run.cc:  runManager->SetUserAction(new BDSPrimaryGeneratorAction(detector));
src/BDS_run.cc:  runManager->SetUserAction(new BDSRunAction);
src/BDS_run.cc:  runManager->SetUserAction(new BDSEventAction());
src/BDS_run.cc:  runManager->SetUserAction(new BDSSteppingAction);
src/BDS_run.cc:  runManager->SetUserAction(new BDSUserTrackingAction);
src/BDS_run.cc:  runManager->Initialize();
src/BDS_run.cc:  if (!BDSGlobals->GetUseBatch())   // Define UI session for interactive mode.
src/BDS_run.cc:      UI->ApplyCommand("/control/execute BDS_vis.mac");    
src/BDS_run.cc:      UI->ApplyCommand("/control/execute gui.mac");
src/BDS_run.cc:      session->SessionStart();
src/BDS_run.cc:      runManager->BeamOn(BDSGlobals->GetNumberToGenerate());
src/BDS_run.cc:  if(!BDSGlobals->GetUseBatch())delete visManager;
src/BDS_run.cc:  if(BDSRoot->theRootOutputFile)
src/BDS_run.cc:      gDirectory->Write();
src/BDS_run.cc:      BDSRoot->theRootOutputFile->ls();
src/BDS_run.cc:      BDSRoot->theRootOutputFile->Close();
src/BDSRunManager.cc:// avoid closing the geometry after each event - this was a significant
src/BDSRunManager.cc:  { timer->Start(); }
src/BDSRunManager.cc:  { n_select = -1; }
src/BDSRunManager.cc:    stateManager->SetNewState(EventProc);
src/BDSRunManager.cc:    eventManager->ProcessOneEvent(currentEvent);
src/BDSRunManager.cc:    if(i_event<n_select) G4UImanager::GetUIpointer()->ApplyCommand(msg);
src/BDSRunManager.cc:    // gab: the following commented out - this is the only
src/BDSRunManager.cc:    //stateManager->SetNewState(GeomClosed);
src/BDSRunManager.cc:    timer->Stop();
src/BDSSampler.cc:  BDSRoot->SetSamplerNumber(nSamplers);
src/BDSSampler.cc:  //            |----------this is the number of variables
src/BDSSampler.cc:				      2.*BDSGlobals->GetTunnelRadius(),
src/BDSSampler.cc:				      2.*BDSGlobals->GetTunnelRadius(),
src/BDSSampler.cc:			    theMaterials->LCVacuum,
src/BDSSampler.cc:      itsOuterUserLimits->SetMaxAllowedStep(itsLength);
src/BDSSampler.cc:      itsMarkerLogicalVolume->SetUserLimits(itsOuterUserLimits);
src/BDSSampler.cc:      SDMan->AddNewDetector(SensDet);
src/BDSSampler.cc:      itsMarkerLogicalVolume->SetSensitiveDetector(SensDet);
src/BDSSamplerSD.cc:  G4Track* theTrack=aStep->GetTrack();
src/BDSSamplerSD.cc:  //  // tmp - only store muons
src/BDSSamplerSD.cc:  //     G4String pName=theTrack->GetDefinition()->GetParticleName();
src/BDSSamplerSD.cc:  //    if(pName=="mu+"||pName=="mu-")
src/BDSSamplerSD.cc:      G4double time=theTrack->GetGlobalTime();
src/BDSSamplerSD.cc:      G4double energy=theTrack->GetKineticEnergy()+
src/BDSSamplerSD.cc:	theTrack->GetDefinition()->GetPDGMass();
src/BDSSamplerSD.cc:      G4ThreeVector pos=theTrack->GetPosition();
src/BDSSamplerSD.cc:      G4ThreeVector momDir=theTrack->GetMomentumDirection();
src/BDSSamplerSD.cc:      const G4RotationMatrix* Rot=theTrack->GetVolume()->GetFrameRotation();
src/BDSSamplerSD.cc:      const G4ThreeVector Trans=theTrack->GetVolume()->GetFrameTranslation();
src/BDSSamplerSD.cc:      G4double z=-(time*c_light-(pos.z()+BDSGlobals->GetWorldSizeZ()));
src/BDSSamplerSD.cc:	G4RunManager::GetRunManager()->GetCurrentEvent()->GetEventID();
src/BDSSamplerSD.cc:      G4int nSampler=theTrack->GetVolume()->GetCopyNo()+1;
src/BDSSamplerSD.cc:      G4int PDGtype=theTrack->GetDefinition()->GetPDGEncoding();
src/BDSSamplerSD.cc:      G4String pName=theTrack->GetDefinition()->GetParticleName();
src/BDSSamplerSD.cc:      G4ThreeVector vtx=theTrack->GetVertexPosition();
src/BDSSamplerSD.cc:      G4ThreeVector dir=theTrack->GetVertexMomentumDirection();
src/BDSSamplerSD.cc:      start_z =  vtx.z()+BDSGlobals->GetWorldSizeZ();
src/BDSSamplerSD.cc:      start_E   =  theTrack->GetVertexKineticEnergy();
src/BDSSamplerSD.cc:      G4double weight=theTrack->GetWeight();
src/BDSSamplerSD.cc:      if(pName=="mu+"||pName=="mu-")
src/BDSSamplerSD.cc:	  theMuonTrackVector->push_back(theTrack->GetTrackID());
src/BDSSamplerSD.cc:      SamplerCollection->insert(smpHit);
src/BDSSamplerSD.cc:      if(theTrack->GetVolume()!=theTrack->GetNextVolume())StoreHit=true;
src/BDSSamplerSD.cc:      if(theTrack->GetVolume()!=theTrack->GetNextVolume())StoreHit=true;
src/BDSSamplerSD.cc:  static G4int HCID = -1;
src/BDSSamplerSD.cc:  HCE->AddHitsCollection( HCID, SamplerCollection );
src/BDS_SbendField.cc:      itsLocalRadius=-length/angle;// minus sign for correct machine convention
src/BDS_SbendField.cc:	(BDSGlobals->GetAcceleratorType()->GetBeamMomentum()/GeV)/
src/BDSSectorBend.cc:      G4double HalfLength =(itsLength/itsAngle)*sin(itsAngle/2)-
src/BDSSectorBend.cc:      HalfLength =(itsLength/itsAngle)*sin(itsAngle/2)-
src/BDSSectorBend.cc:	BDSGlobals->GetComponentBoxSize()*tan(abs(itsAngle)/2);
src/BDSSectorBend.cc:      if(BDSGlobals->GetIncludeIronMagFields())
src/BDSSectorBend.cc:	  polePos[1]=BDSGlobals->GetMagnetPoleRadius();
src/BDSSectorBend.cc:	  polePos[0]=-999.;//flag to use polePos rather than local track
src/BDSSectorBend.cc:      	  itsMagField->GetFieldValue(polePos,Bfield);
src/BDSSectorBend.cc:	  BDSGlobals->GetMagnetPoleSize()/
src/BDSSectorBend.cc:	  (BDSGlobals->GetComponentBoxSize()/2-
src/BDSSectorBend.cc:	  BDSGlobals->GetMagnetPoleRadius());
src/BDSSectorBend.cc:      if(BDSGlobals->GetSynchRadOn()&& BDSGlobals->GetSynchRescale())
src/BDSSectorBend.cc:	  G4double HalfLength =(itsLength/itsAngle)*sin(itsAngle/2)-
src/BDSSectorBend.cc:	  HalfLength =(itsLength/itsAngle)*sin(itsAngle/2)-
src/BDSSectorBend.cc:	    BDSGlobals->GetComponentBoxSize()*tan(abs(itsAngle)/2);
src/BDSSectorBend.cc:	  if(BDSGlobals->GetIncludeIronMagFields())
src/BDSSectorBend.cc:	      polePos[1]=BDSGlobals->GetMagnetPoleRadius();
src/BDSSectorBend.cc:	      polePos[0]=-999.;//flag to use polePos rather than local track
src/BDSSectorBend.cc:	      itsMagField->GetFieldValue(polePos,Bfield);
src/BDSSectorBend.cc:		BDSGlobals->GetMagnetPoleSize()/
src/BDSSectorBend.cc:		(BDSGlobals->GetComponentBoxSize()/2-
src/BDSSectorBend.cc:		 BDSGlobals->GetMagnetPoleRadius());
src/BDSSectorBend.cc:  itsStepper->SetBField(itsBField);
src/BDSSectorBend.cc:  G4double LCComponentBoxSize=BDSGlobals->GetComponentBoxSize();
src/BDSSectorBend.cc:    -LCComponentBoxSize*tan(itsAngle/2)/2
src/BDSSectorBend.cc:    +BDSGlobals->GetLengthSafety()/2;
src/BDSSectorBend.cc:    +BDSGlobals->GetLengthSafety()/2;
src/BDSSectorBend.cc:				  xHalfLengthMinus,     // x hlf lgth at -z
src/BDSSectorBend.cc:				  LCComponentBoxSize/2, // y hlf lgth at -z
src/BDSSectorBend.cc:			theMaterials->LCVacuum,
src/BDSSectorBend.cc:  itsMarkerUserLimits->SetMaxAllowedStep(itsLength);
src/BDSSectorBend.cc:  itsMarkerLogicalVolume->SetUserLimits(itsMarkerUserLimits);
src/BDSSextMagField.cc:  if(Point[3]==-999.)
src/BDSSextMagField.cc:	G4TransportationManager::GetTransportationManager()->
src/BDSSextMagField.cc:      LocalR = SextNavigator->GetCurrentLocalCoordinate();
src/BDSSextMagField.cc:  Bfield[1]=(LocalR.x()*LocalR.x()-LocalR.y()*LocalR.y())*itsBDblePrime/2;
src/BDSSextMagField.cc:  // factor of 2 is actually 2-factorial.
src/BDSSextStepper.cc:// GEANT4 tag $Name:  $
src/BDSSextStepper.cc:   G4double kappa=  -fPtrMagEqOfMot->FCof()*itsBDblPrime/InitMag;
src/BDSSextStepper.cc:   if(abs(kappa)<1.e-12)
src/BDSSextStepper.cc:	 G4TransportationManager::GetTransportationManager()->
src/BDSSextStepper.cc:       G4AffineTransform LocalAffine=SextNavigator->
src/BDSSextStepper.cc:       G4ThreeVector LocalR = SextNavigator->GetCurrentLocalCoordinate();
src/BDSSextStepper.cc:       G4ThreeVector LocalRp= (SextNavigator->ComputeLocalAxis(v0)).unit();
src/BDSSextStepper.cc:       G4double x02My02=(x0*x0-y0*y0);
src/BDSSextStepper.cc:       LocalRpp.setX(- zp*x02My02);
src/BDSSextStepper.cc:       LocalRpp.setZ(xp*x02My02-2*yp*x0*y0);
src/BDSSextStepper.cc:           G4double dz=sqrt(h2*(1.-h2*R_1*R_1/12)-dx*dx-dy*dy);
src/BDSSextupole.cc:      if(BDSGlobals->GetIncludeIronMagFields())
src/BDSSextupole.cc:	  polePos[1]=BDSGlobals->GetMagnetPoleRadius();
src/BDSSextupole.cc:	  polePos[3]=-999.;//flag to use polePos rather than local track
src/BDSSextupole.cc:	  itsMagField->GetFieldValue(polePos,Bfield);
src/BDSSextupole.cc:	    BDSGlobals->GetMagnetPoleSize()/
src/BDSSextupole.cc:	    (BDSGlobals->GetComponentBoxSize()/2-
src/BDSSextupole.cc:	     BDSGlobals->GetMagnetPoleRadius());
src/BDSSextupole.cc:      if(BDSGlobals->GetSynchRadOn()&& BDSGlobals->GetSynchRescale())
src/BDSSextupole.cc:  itsStepper->SetBDblPrime(itsBDblPrime);
src/BDSSkewSextMagField.cc:  if(Point[3]==-999.)
src/BDSSkewSextMagField.cc:	G4TransportationManager::GetTransportationManager()->
src/BDSSkewSextMagField.cc:      LocalR = SkewSextNavigator->GetCurrentLocalCoordinate();
src/BDSSkewSextMagField.cc:  Bfield[0]=(LocalR.x()*LocalR.x()-LocalR.y()*LocalR.y())*itsBDblePrime/2;
src/BDSSkewSextMagField.cc:  Bfield[1]=-2*LocalR.x()*LocalR.y()*itsBDblePrime/2;
src/BDSSkewSextMagField.cc:  // factor of 2 is actually 2-factorial.
src/BDSSkewSextStepper.cc:// GEANT4 tag $Name:  $
src/BDSSkewSextStepper.cc:  G4double kappa= - fPtrMagEqOfMot->FCof()*itsBDblPrime/InitMag;
src/BDSSkewSextStepper.cc:  // This is kappa in (T/m)*m^-2, so convert to standard Geant4 units:
src/BDSSkewSextStepper.cc:  if(abs(kappa)<1.e-12)
src/BDSSkewSextStepper.cc:	G4TransportationManager::GetTransportationManager()->
src/BDSSkewSextStepper.cc:      G4AffineTransform LocalAffine=SkewSextNavigator->
src/BDSSkewSextStepper.cc:       G4ThreeVector LocalR = SkewSextNavigator->GetCurrentLocalCoordinate();
src/BDSSkewSextStepper.cc:       G4ThreeVector LocalRp= (SkewSextNavigator->ComputeLocalAxis(v0)).unit();
src/BDSSkewSextStepper.cc:       G4double x02My02=(x0*x0-y0*y0);
src/BDSSkewSextStepper.cc:       LocalRpp.setZ(-2*xp*x0*y0-yp*x02My02);
src/BDSSkewSextStepper.cc:           G4double dz=sqrt(h2*(1.-h2*R_1*R_1/12)-dx*dx-dy*dy);
src/BDSSkewSextupole.cc:      if(BDSGlobals->GetIncludeIronMagFields())
src/BDSSkewSextupole.cc:	  polePos[0]=-BDSGlobals->GetMagnetPoleRadius()*sin(pi/6);
src/BDSSkewSextupole.cc:	  polePos[1]=BDSGlobals->GetMagnetPoleRadius()*cos(pi/6);
src/BDSSkewSextupole.cc:	  polePos[3]=-999.;//flag to use polePos rather than local track
src/BDSSkewSextupole.cc:	  itsMagField->GetFieldValue(polePos,Bfield);
src/BDSSkewSextupole.cc:	    BDSGlobals->GetMagnetPoleSize()/
src/BDSSkewSextupole.cc:	    (BDSGlobals->GetComponentBoxSize()/2-
src/BDSSkewSextupole.cc:	     BDSGlobals->GetMagnetPoleRadius());
src/BDSSkewSextupole.cc:      if(BDSGlobals->GetSynchRadOn()&& BDSGlobals->GetSynchRescale())
src/BDSSkewSextupole.cc:  itsStepper->SetBDblPrime(itsBDblPrime);
src/BDSSpline.cc://---------------
src/BDSSpline.cc:  tabEntry->y2=0.0;
src/BDSSpline.cc:	tabEntry->x=(*xIn)[i];
src/BDSSpline.cc:	tabEntry->x=log((*xIn)[i]);
src/BDSSpline.cc:	tabEntry->y=(*yIn)[i];
src/BDSSpline.cc:	tabEntry->y=log((*yIn)[i]);
src/BDSSpline.cc:  for (i=1;i<n-1;i++)
src/BDSSpline.cc:      BDSSpline_tab_entry* tab_im1=tab[i-1];
src/BDSSpline.cc:      sig=(tab_i->x-tab_im1->x)/(tab_ip1->x-tab_im1->x);
src/BDSSpline.cc:      p=1.0/(sig*tab_im1->y2+2.0);
src/BDSSpline.cc:      tab_i->y2=(sig-1.0)*p;    
src/BDSSpline.cc:	(6.0*((tab_ip1->y-tab_i->y)/(tab_ip1->x-tab_i->x) 
src/BDSSpline.cc:	      -(tab_i->y-tab_im1->y)/(tab_i->x-tab_im1->x)) 
src/BDSSpline.cc:	 /(tab_ip1->x -tab_im1->x)  - sig*u[i-1])*p;
src/BDSSpline.cc:  BDSSpline_tab_entry* tab_nm1=tab[n-1];
src/BDSSpline.cc:  tab_nm1->y2=0.0;
src/BDSSpline.cc:  for (i=n-2;i>=0;i--)
src/BDSSpline.cc:      tab_i->y2=tab_i->y2*tab_ip1->y2+u[i];
src/BDSSpline.cc:  kmax=n-1;
src/BDSSpline.cc:  if (xIn>tab_kmx->x)
src/BDSSpline.cc:      if (yscal)return exp(tab_kmx->y);
src/BDSSpline.cc:      else return tab_kmx->y; 
src/BDSSpline.cc:  if (xIn<tab_0->x)
src/BDSSpline.cc:      if (yscal) return exp(tab_0->y);
src/BDSSpline.cc:      else return tab_0->y;
src/BDSSpline.cc:  while (kmax-kmin>1){
src/BDSSpline.cc:    if (tab_kpt->x>xIn) kmax=kpoint;
src/BDSSpline.cc:  w=tab_kmx->x - tab_kmn->x;
src/BDSSpline.cc:  a=(tab_kmx->x-xIn)/w;
src/BDSSpline.cc:  b=(xIn-tab_kmn->x)/w;
src/BDSSpline.cc:  G4double x=a*tab_kmn->y+b*tab_kmx->y+
src/BDSSpline.cc:    (a*(a*a-1.0)*tab_kmn->y2
src/BDSSpline.cc:     +b*(b*b-1.0)*tab_kmx->y2)*w*w/6.0;
src/BDSSpoiler.cc:				      BDSGlobals->GetComponentBoxSize()/2,
src/BDSSpoiler.cc:				      BDSGlobals->GetComponentBoxSize()/2,
src/BDSSpoiler.cc:			    theMaterials->LCVacuum,
src/BDSSpoiler.cc:				  BDSGlobals->GetComponentBoxSize()/2,
src/BDSSpoiler.cc:				  BDSGlobals->GetComponentBoxSize()/2,
src/BDSSpoiler.cc:			theMaterials->LCVacuum,
src/BDSSpoiler.cc:  itsSolidLogVol->
src/BDSSpoiler.cc:				       BDSGlobals-> GetThresholdCutCharged()));
src/BDSSteppingAction.cc:// GEANT4 tag $Name:  $
src/BDSSteppingAction.cc:  G4Track* ThisTrack=ThisStep->GetTrack();
src/BDSSteppingAction.cc:    if(ThisTrack->GetTrackID()!=1)
src/BDSSteppingAction.cc:    ThisTrack->SetKineticEnergy(0.);
src/BDSSteppingAction.cc:    ThisTrack->SetTrackStatus(fStopAndKill);
src/BDSSteppingAction.cc:    if(ThisTrack->GetTrackID()==1
src/BDSSteppingAction.cc:    //       &&       ThisTrack->GetTotalEnergy()>2*GeV
src/BDSSteppingAction.cc:       && ThisTrack->GetMaterial()->GetName()!="LCVacuum"
src/BDSSteppingAction.cc:       G4cout<<"This volume="<< ThisTrack->GetVolume()->GetName()<<G4endl;
src/BDSSteppingAction.cc:       G4cout<<" material="<<ThisTrack->GetMaterial()->GetName()<<
src/BDSSteppingAction.cc:       " rad len="<<ThisTrack->GetMaterial()->GetRadlen()/m<<" m"<<G4endl;
src/BDSSteppingAction.cc:       G4LogicalVolume* LogVol=ThisTrack->GetVolume()->GetLogicalVolume();
src/BDSSteppingAction.cc:       G4cout<<"ID="<<ThisTrack->GetTrackID()<<" part="<<
src/BDSSteppingAction.cc:       ThisTrack->GetDefinition()->GetParticleName()<<
src/BDSSteppingAction.cc:       "Energy="<<ThisTrack->GetTotalEnergy()/GeV<<
src/BDSSteppingAction.cc:       <<ThisTrack->GetMomentum()[0]/GeV<<
src/BDSSteppingAction.cc:       " Py="<<ThisTrack->GetMomentum()[1]/GeV<<
src/BDSSteppingAction.cc:       " Pz="<<ThisTrack->GetMomentum()[2]/GeV<<" vol="<<
src/BDSSteppingAction.cc:	  ThisTrack->GetVolume()->GetName()<<G4endl;
src/BDSSteppingAction.cc:	  G4cout<<" Global Position="<<ThisTrack->GetPosition()<<G4endl;
src/BDSSteppingAction.cc:	  G4VProcess* proc=ThisStep->GetPreStepPoint()->
src/BDSSteppingAction.cc:	  if(proc)G4cout<<" process="<<proc->GetProcessName()<<G4endl;
src/BDSSteppingAction.cc:  //  G4cout<<ThisTrack->GetMaterial()->GetName()<<G4endl;
src/BDSSteppingAction.cc:    G4cout<<ThisTrack->GetVolume()->GetLogicalVolume()->GetName()<<
src/BDSSteppingAction.cc:    " fieldMgr="<<ThisTrack->GetVolume()->GetLogicalVolume()->
src/BDSSteppingAction.cc:    if(BDSGlobals->GetUseTimer())
src/BDSSteppingAction.cc:    BDSGlobals->GetTimer()->Stop();
src/BDSSteppingAction.cc:    ElapsedTime=BDSGlobals->GetTimer()->GetRealElapsed();
src/BDSSteppingAction.cc:    //      G4cout<<"RUN Elapsed time="<<*BDSGlobals->GetTimer()<<G4endl;
src/BDSSteppingAction.cc:    " volume="<< ThisStep->GetTrack()->GetVolume()->GetName()<<G4endl;
src/BDSSteppingAction.cc:    BDSGlobals->GetTimer()->Start();
src/BDSSteppingAction.cc:    if(ThisTrack->GetMaterial()->GetName()!="LCVacuum")
src/BDSSteppingAction.cc:    G4cout<<ThisTrack->GetVolume()->GetName()<<G4endl;
src/BDSSteppingAction.cc:    if(ThisTrack->GetMaterial()->GetName()=="LCWeightIron")
src/BDSSteppingAction.cc:    if(ThisTrack->GetDefinition()->GetParticleName()!="gamma")
src/BDSSteppingAction.cc:    ThisTrack->GetDefinition()->GetParticleName()
src/BDSSteppingAction.cc:    <<" mom="<<ThisTrack->GetMomentum()<<G4endl;
src/BDSSteppingAction.cc:    //  G4cout<<" weight="<<ThisTrack->GetWeight()<<G4endl;
src/BDSSteppingAction.cc:  //  if(ThisTrack->GetMaterial()->GetName()!="LCVacuum")
src/BDSSteppingAction.cc:  //   G4cout<<" Edep="<<ThisStep->GetTotalEnergyDeposit()/GeV<<
src/BDSSteppingAction.cc:  //	" Vol="<<ThisTrack->GetVolume()->GetName()<<G4endl;
src/BDSSteppingAction.cc:  if(BDSGlobals->GetVerboseStep())
src/BDSSteppingAction.cc:    if(!BDSGlobals->GetVerboseEventNumber()||
src/BDSSteppingAction.cc:       BDSGlobals->GetVerboseEventNumber()==event_number)
src/BDSSteppingAction.cc:	  htot+=ThisStep->GetStepLength();
src/BDSSteppingAction.cc:	  if(abs(BDSLocalRadiusOfCurvature*(1.-cos(theta))-
src/BDSSteppingAction.cc:	   ThisTrack->GetPosition().x())>1.e-7)
src/BDSSteppingAction.cc:	   BDSLocalRadiusOfCurvature*(1.-cos(theta))/m
src/BDSSteppingAction.cc:	   <<"true x="<<ThisTrack->GetPosition().x()/m<<G4endl;
src/BDSSteppingAction.cc:	   G4cout<<"step length="<< ThisStep->GetStepLength()/m<<" m"<<G4endl;
src/BDSSteppingAction.cc:	//G4cout<<"angle="<<ThisStep->GetPreStepPoint()->GetMomentumDirection().angle
src/BDSSteppingAction.cc:	//  (ThisStep->GetPostStepPoint()->GetMomentumDirection())<<G4endl;
src/BDSSteppingAction.cc:	int ID=ThisTrack->GetTrackID();
src/BDSSteppingAction.cc:	  GetTransportationManager()->GetNavigatorForTracking();
src/BDSSteppingAction.cc:	G4ThreeVector LocalPosVec = StepperNavigator->GetCurrentLocalCoordinate();
src/BDSSteppingAction.cc:	// if((abs(LocalPosVec.x())>1.*mm)&&(ThisTrack->GetVolume()->
src/BDSSteppingAction.cc:	//				    GetLogicalVolume()->GetName())!="World" )
src/BDSSteppingAction.cc:	G4cout<<"This volume="<< ThisTrack->GetVolume()->GetName()<<" Loc pos x="<<LocalPosVec[0]/m<<"y= "<<LocalPosVec[1]/m<<
src/BDSSteppingAction.cc:	G4LogicalVolume* LogVol=ThisTrack->GetVolume()->GetLogicalVolume();
src/BDSSteppingAction.cc:	G4cout<<"This log volume="<<LogVol->GetName() <<G4endl;
src/BDSSteppingAction.cc:	  ThisTrack->GetDefinition()->GetParticleName()<<
src/BDSSteppingAction.cc:	  "Energy="<<ThisTrack->GetTotalEnergy()/GeV<<
src/BDSSteppingAction.cc:	      <<ThisTrack->GetMomentum()[0]/GeV<<
src/BDSSteppingAction.cc:	  " Py="<<ThisTrack->GetMomentum()[1]/GeV<<
src/BDSSteppingAction.cc:	  " Pz="<<ThisTrack->GetMomentum()[2]/GeV<<" vol="<<
src/BDSSteppingAction.cc:	  ThisTrack->GetVolume()->GetName()<<G4endl;
src/BDSSteppingAction.cc:	G4cout<<" Global Position="<<ThisTrack->GetPosition()<<G4endl;
src/BDSSteppingAction.cc:	//if(ThisTrack->GetTotalEnergy()>255*GeV)G4Exception(" BDSStep: bigE");
src/BDSSteppingAction.cc:	if(ThisTrack->GetMaterial()->GetName() !="LCVacuum")
src/BDSSteppingAction.cc:	  G4cout<<"material="<<ThisTrack->GetMaterial()->GetName()<<G4endl;
src/BDSSteppingAction.cc:	  G4VProcess* proc=ThisStep->GetPostStepPoint()->
src/BDSSteppingAction.cc:       	  if(proc)G4cout<<" process="<<proc->GetProcessName()<<G4endl<<G4endl;
src/BDSSteppingAction.cc:  G4String pName=ThisTrack->GetDefinition()->GetParticleName();
src/BDSSteppingAction.cc:  G4VProcess* proc=ThisStep->GetPostStepPoint()->GetProcessDefinedStep();
src/BDSSteppingAction.cc:  G4cout<<pName<<" weight="<<ThisTrack->GetWeight()<<" ID="<<
src/BDSSteppingAction.cc:    ThisTrack->GetTrackID()<<" parentID="<< ThisTrack->GetParentID()<<G4endl;
src/BDSSteppingAction.cc:  if(proc)G4cout<<" process="<<proc->GetProcessName()<<G4endl<<G4endl;
src/BDSSteppingAction.cc:      if(ThisTrack->GetTotalEnergy()<BDSGlobals->GetThresholdCutPhotons())
src/BDSSteppingAction.cc:	  //	  ThisTrack->SetKineticEnergy(0.);
src/BDSSteppingAction.cc:	  // ThisTrack->SetTrackStatus(fStopAndKill);
src/BDSSteppingAction.cc:	  ThisTrack->SetBelowThresholdFlag();
src/BDSSteppingAction.cc:    if(pName=="mu+"||pName=="mu-")
src/BDSSteppingAction.cc:    G4cout<<"muon: mom="<<ThisTrack->GetMomentum()<<" vol="<<
src/BDSSteppingAction.cc:    ThisTrack->GetVolume()->GetName()
src/BDSSteppingAction.cc:    <<" weight="<<ThisTrack->GetWeight() <<G4endl;	
src/BDSSteppingAction.cc:  if(pName=="neutron" && ThisTrack->GetMaterial()->GetName() =="LCVacuum")
src/BDSSteppingAction.cc:      G4VUserTrackInformation* Info=ThisTrack->GetUserInformation();
src/BDSSteppingAction.cc:	    (ThisTrack->GetUserInformation());
src/BDSSteppingAction.cc:	  if(!InfoBDS->GetIsLogged())
src/BDSSteppingAction.cc:	      r[0]=ThisTrack->GetKineticEnergy()/eV; 
src/BDSSteppingAction.cc:	      r[1]= (ThisTrack->GetPosition().z()+
src/BDSSteppingAction.cc:		     BDSGlobals->GetWorldSizeZ())/m;
src/BDSSteppingAction.cc:	      r[2]=ThisTrack->GetMomentum().z()/MeV; 
src/BDSSteppingAction.cc:	      InfoBDS->SetIsLogged(true);
src/BDSSteppingAction.cc:      //ThisTrack->SetKineticEnergy(0.);
src/BDSSteppingAction.cc:      //ThisTrack->SetTrackStatus(fStopAndKill);
src/BDSSteppingAction.cc:	  //	  G4cout<<"material="<<ThisTrack->GetMaterial()->GetName()<<G4endl;
src/BDSSteppingAction.cc:  if(ThisTrack->GetMaterial()->GetName() =="LCIron"   ||
src/BDSSteppingAction.cc:     ThisTrack->GetMaterial()->GetName() =="LCCopper"  )
src/BDSSteppingAction.cc:       ThisTrack->SetTrackStatus(fStopAndKill);
src/BDSSteppingAction.cc:       G4double eTrack=ThisTrack->GetKineticEnergy();
src/BDSSteppingAction.cc:       //ThisStep->AddTotalEnergyDeposit(eTrack);
src/BDSSteppingAction.cc:      //ThisTrack->SetBelowThresholdFlag(true);
src/BDSSynchrotronRadiation.cc://      ------------ BDSSynchrotronRadiation physics process --------
src/BDSSynchrotronRadiation.cc:    GamEnergy=SynGenC(BDSGlobals->GetSynchLowX())*
src/BDSSynchrotronRadiation.cc:  NewKinEnergy -= GamEnergy;
src/BDSSynchrotronRadiation.cc:      if((BDSGlobals->GetSynchTrackPhotons())&&
src/BDSSynchrotronRadiation.cc:	 (GamEnergy>BDSGlobals->GetSynchLowGamE()) )
src/BDSSynchrotronRadiation.cc:	  iBeam!=theBeamline.end() && zpos>=(*iBeam)->GetZUpper(); 
src/BDSSynchrotronRadiation.cc:      if(*iBeam)(*iBeam)->AddSynchEnergyLoss(GamEnergy);
src/BDSSynchrotronRadiation.cc:      G4cout<<" trackdata:"<<trackData.GetVolume()->GetName()<<G4endl;
src/BDSSynchrotronRadiation.cc:      G4cout<<" beamline:"<<(*iBeam)->GetName()<<" z="<<zpos/m<<G4endl;
src/BDSSynchrotronRadiation.cc:	  G4double charge= trackData.GetDynamicParticle()->GetCharge();
src/BDSSynchrotronRadiation.cc://--------------------------------------------------------------------
src/BDSSynchrotronRadiation.cc:  static G4double a1,a2,c1,xlow,ratio,LastXmin=-1.;
src/BDSSynchrotronRadiation.cc:    a1=SynRadC(1.e-38)/pow(1.e-38,-2./3.); // = 2**2/3 GAMMA(2/3)
src/BDSSynchrotronRadiation.cc:    a2=SynRadC(xlow)/exp(-xlow);
src/BDSSynchrotronRadiation.cc:    { G4double sum1ap=3.*a1*(1.-pow(xmin,1./3.)); //     integral xmin --> 1
src/BDSSynchrotronRadiation.cc:      G4double sum2ap=a2*exp(-1.);                    //     integral 1 --> infin
src/BDSSynchrotronRadiation.cc:       a2=SynRadC(xlow)/exp(-xlow);
src/BDSSynchrotronRadiation.cc:     { result=c1+(1.-c1)*G4UniformRand();
src/BDSSynchrotronRadiation.cc:       appr=a1*pow(result,-2./3.);
src/BDSSynchrotronRadiation.cc:     { result=xlow-log(G4UniformRand());
src/BDSSynchrotronRadiation.cc:       appr=a2*exp(-result);
src/BDSSynchrotronRadiation.cc:     principal: Chebyshev series see H.H.Umstaetter CERN/PS/SM/81-13 10-3-1981
src/BDSSynchrotronRadiation.cc:     converted to C++, H.Burkhardt 21-4-1996    */
src/BDSSynchrotronRadiation.cc:       z=x*x/16.-2.;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .00000000000000031738;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+    .00000000000002004426;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .00000000000111455474;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+    .00000000005407460944;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .00000000226722011790;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+    .00000008125130371644;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .00000245751373955212;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+    .00006181256113829740;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .00127066381953661690;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+    .02091216799114667278;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .26880346058164526514;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+   2.61902183794862213818;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+  18.65250896865416256398;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+  92.95232665922707542088;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+ 308.15919413131586030542;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+ 644.86979658236221700714;
src/BDSSynchrotronRadiation.cc:       p=.5*z*a-b+  414.56543648832546975110;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+    .00000000000000019786;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .00000000000001196168;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+    .00000000000063427729;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .00000000002923635681;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+    .00000000115951672806;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .00000003910314748244;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+    .00000110599584794379;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .00002581451439721298;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+    .00048768692916240683;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .00728456195503504923;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+    .08357935463720537773;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+    .71031361199218887514;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+   4.26780261265492264837;
src/BDSSynchrotronRadiation.cc:       b=z*a-b+  17.05540785795221885751;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+  41.83903486779678800040;
src/BDSSynchrotronRadiation.cc:       q=.5*z*a-b+28.41787374362784178164;
src/BDSSynchrotronRadiation.cc:       synrad=(p/y-q*y-1.)*1.81379936423421784215530788143;
src/BDSSynchrotronRadiation.cc:       z=20./x-2.;
src/BDSSynchrotronRadiation.cc:       b=z*a  -.00000000000000000002;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000000000000000006;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00000000000000000020;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000000000000000066;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00000000000000000216;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000000000000000721;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00000000000000002443;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000000000000008441;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00000000000000029752;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000000000000107116;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00000000000000394564;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000000000001489474;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00000000000005773537;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000000000023030657;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00000000000094784973;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000000000403683207;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00000000001785432348;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000000008235329314;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00000000039817923621;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000000203088939238;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00000001101482369622;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000006418902302372;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00000040756144386809;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00000287536465397527;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00002321251614543524;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.00022505317277986004;
src/BDSSynchrotronRadiation.cc:       b=z*a-b-.00287636803664026799;
src/BDSSynchrotronRadiation.cc:       a=z*b-a+.06239591359332750793;
src/BDSSynchrotronRadiation.cc:       p=.5*z*a-b    +1.06552390798340693166;
src/BDSTransportation.cc:// GEANT4 tag $Name:  $
src/BDSTransportation.cc:// ------------------------------------------------------------
src/BDSTransportation.cc:// ------------------------------------------------------------
src/BDSTransportation.cc:// geometrical sub-volumes of the detectors.
src/BDSTransportation.cc://            29 June 2001, J. Apostolakis, D. Cote-Ahern, P. Gumplinger: 
src/BDSTransportation.cc:  fLinearNavigator =   itsTransportationMgr->GetNavigatorForTracking() ; 
src/BDSTransportation.cc:  // fGlobalFieldMgr=    transportMgr->GetFieldManager() ;
src/BDSTransportation.cc:  fFieldPropagator=   itsTransportationMgr->GetPropagatorInField() ;
src/BDSTransportation.cc:  // fFieldExists= transportMgr->GetFieldManager()->DoesFieldExist() ;
src/BDSTransportation.cc:  // Initial value for safety and point-of-origin of safety
src/BDSTransportation.cc:     if ( this->DoesGlobalFieldExist() )
src/BDSTransportation.cc:        fFieldPropagator->GetChordFinder()->ResetStepEstimate();
src/BDSTransportation.cc:  G4ThreeVector startMomentumDir       = pParticle->GetMomentumDirection() ;
src/BDSTransportation.cc:   G4ThreeVector OriginShift = startPosition - fPreviousSftOrigin ;
src/BDSTransportation.cc:     currentSafety = fPreviousSafety - sqrt(MagSqShift) ;
src/BDSTransportation.cc:  G4ParticleDefinition* pParticleDef   = pParticle->GetDefinition() ;
src/BDSTransportation.cc:  G4double              particleCharge = pParticleDef->GetPDGCharge() ; 
src/BDSTransportation.cc:      //    fieldExertsForce= this->DoesGlobalFieldExist() ;      
src/BDSTransportation.cc:      G4LogicalVolume* LogVol=track.GetVolume()->GetLogicalVolume();
src/BDSTransportation.cc:      G4FieldManager* itsFieldMgr=LogVol->GetFieldManager();
src/BDSTransportation.cc:      G4FieldManager* CurrentFldMgr=fFieldPropagator->GetCurrentFieldManager();
src/BDSTransportation.cc:		  itsTransportationMgr->SetPropagatorInField(fFieldPropagator);
src/BDSTransportation.cc:	  fFieldPropagator->SetLocalFieldMgr(itsFieldMgr);
src/BDSTransportation.cc:	  if(BDSGlobals->GetIncludeIronMagFields()&&
src/BDSTransportation.cc:		(*theOuterFieldMap)[LogVol->GetName()];
src/BDSTransportation.cc:	      theOuterFieldManager->
src/BDSTransportation.cc:	      theOuterFieldManager->CreateChordFinder(theField);
src/BDSTransportation.cc:       linearStepLength = fLinearNavigator->ComputeStep( startPosition, 
src/BDSTransportation.cc:       // The safety at the initial point has been re-calculated:
src/BDSTransportation.cc:     G4double       momentumMagnitude = pParticle->GetTotalMomentum() ;
src/BDSTransportation.cc:     G4double       restMass = pParticleDef->GetPDGMass() ;
src/BDSTransportation.cc:     fFieldPropagator->SetChargeMomentumMass( particleCharge,    // charge in e+ units
src/BDSTransportation.cc:        //  Do the Transport in the field (non recti-linear)
src/BDSTransportation.cc:        lengthAlongCurve = fFieldPropagator->ComputeStep( aFieldTrack, 
src/BDSTransportation.cc:     // Get the End-Position and End-Momentum (Dir-ection)
src/BDSTransportation.cc:     // if( (track.GetKineticEnergy() - fTransportEndKineticEnergy) 
src/BDSTransportation.cc:     if( fFieldPropagator->GetCurrentFieldManager()->DoesFieldChangeEnergy() ){
src/BDSTransportation.cc:        //    - so this should have been updated
src/BDSTransportation.cc:     fParticleIsLooping = fFieldPropagator->IsParticleLooping() ;
src/BDSTransportation.cc:     endpointDistance   = (fTransportEndPosition - startPosition).mag() ;
src/BDSTransportation.cc:  //  then a boundary will also limit the step -> we must flag this.
src/BDSTransportation.cc:  // Update the safety starting from the end-point, if it will become 
src/BDSTransportation.cc:  //  negative at the end-point.
src/BDSTransportation.cc:      G4double endSafety = fLinearNavigator->ComputeSafety( fTransportEndPosition) ;
src/BDSTransportation.cc:      G4cout << "  Called Navigator->ComputeSafety at " << fTransportEndPosition
src/BDSTransportation.cc:	     << "   we obtain pseudo-safety= " << currentSafety << G4endl ; 
src/BDSTransportation.cc:     // G4double delta_time = endTime - startTime;
src/BDSTransportation.cc:     G4double initialVelocity = stepData.GetPreStepPoint()->GetVelocity();
src/BDSTransportation.cc:     deltaTime = fCandidateEndGlobalTime - startTime;
src/BDSTransportation.cc:  G4double  restMass       = track.GetDynamicParticle()->GetMass() ;
src/BDSTransportation.cc:  // Another (sometimes better way) is to use a user-limit maximum Step size
src/BDSTransportation.cc:    fLinearNavigator->SetGeometricallyLimitedStep() ;
src/BDSTransportation.cc:    fLinearNavigator->
src/BDSTransportation.cc:    if( fCurrentTouchableHandle->GetVolume() == 0 )
src/BDSTransportation.cc:    //    we perform a full-relocation and check its result 
src/BDSTransportation.cc:             (stepData.GetPreStepPoint()->GetSafety() == 0.0) && 
src/BDSTransportation.cc:       fLinearNavigator->
src/BDSTransportation.cc:       if( fCurrentTouchableHandle->GetVolume() != track.GetVolume() )
src/BDSTransportation.cc:	         << track.GetVolume()->GetName() << G4endl ; 
src/BDSTransportation.cc:         if ( fCurrentTouchableHandle->GetVolume() != 0 )
src/BDSTransportation.cc:	           G4cerr << fCurrentTouchableHandle->GetVolume()->GetName() << G4endl ; 
src/BDSTransportation.cc:         fLinearNavigator->
src/BDSTransportation.cc:         if ( fCurrentTouchableHandle->GetVolume() != 0 )
src/BDSTransportation.cc:	           G4cerr << fCurrentTouchableHandle->GetVolume()->GetName() << G4endl ;
src/BDSTransportation.cc:       assert( fCurrentTouchableHandle->GetVolume()->GetName() ==
src/BDSTransportation.cc:               track.GetVolume()->GetName() ) ;
src/BDSTransportation.cc:    fLinearNavigator->LocateGlobalPointWithinVolume( track.GetPosition()) ;
src/BDSTransportation.cc:    fLinearNavigator->LocateGlobalPointWithinVolume( track.GetPosition()) ;
src/BDSTransportation.cc:  const G4VPhysicalVolume* pNewVol = retCurrentTouchable->GetVolume() ;
src/BDSTransportation.cc:  if( pNewVol != 0 ) pNewMaterial= pNewVol->GetLogicalVolume()->GetMaterial() ; 
src/BDSUserSpecialCuts.cc:// GEANT4 tag $Name:  $
src/BDSUserSpecialCuts.cc:// --------------------------------------------------------------
src/BDSUserSpecialCuts.cc:// 15-04-98 first implementation, mma                   
src/BDSUserSpecialCuts.cc:// --------------------------------------------------------------
src/BDSUserSpecialCuts.cc:   G4UserLimits* pUserLimits = aTrack.GetVolume()->GetLogicalVolume()->GetUserLimits();
src/BDSUserSpecialCuts.cc:       ProposedStep = (pUserLimits->GetUserMaxTrackLength(aTrack) - aTrack.GetTrackLength());
src/BDSUserSpecialCuts.cc:       G4double beta = (aTrack.GetDynamicParticle()->GetTotalMomentum())/(aTrack.GetTotalEnergy());
src/BDSUserSpecialCuts.cc:       G4double dTime= (pUserLimits->GetUserMaxTime(aTrack) - aTrack.GetGlobalTime());
src/BDSUserSpecialCuts.cc:           if (Particle->GetPDGCharge() != 0.)
src/BDSUserSpecialCuts.cc:          temp = (RangeNow - pUserLimits->GetUserMinRange(aTrack));
src/BDSUserSpecialCuts.cc:          G4double Emin = pUserLimits->GetUserMinEkine(aTrack);
src/BDSUserSpecialCuts.cc:          temp = RangeNow - Rmin;
src/BDSUserTrackingAction.cc:    if(BDSGlobals->GetStoreMuonTrajectories())
src/BDSUserTrackingAction.cc:	if( abs(aTrack->GetDefinition()->GetPDGEncoding())==13)
src/BDSUserTrackingAction.cc:	  {fpTrackingManager->SetStoreTrajectory(true); }
src/BDSUserTrackingAction.cc:	  { fpTrackingManager->SetStoreTrajectory(false); }
src/BDSUserTrackingAction.cc:  if(aTrack->GetParentID()==0)
src/BDSUserTrackingAction.cc:  { fpTrackingManager->SetStoreTrajectory(true); }
src/BDSUserTrackingAction.cc:  { fpTrackingManager->SetStoreTrajectory(false); }
src/BDSUserTrackingAction.cc:  if(aTrack->GetDefinition()->GetParticleName()=="neutron")
src/BDSUserTrackingAction.cc:      Info->SetIsLogged(false);
src/BDSUserTrackingAction.cc:      fpTrackingManager->SetUserTrackInformation(Info);
src/BDSVisManager.cc:// GEANT4 tag $Name:  $
