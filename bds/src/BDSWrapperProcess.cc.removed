/* BDSIM code.    Version 1.0
   Author: Grahame A. Blair, Royal Holloway, Univ. of London.
   Last modified 27.4.2003
   Copyright (c) 2003 by G.A.Blair.  ALL RIGHTS RESERVED. 
*/
//      ------------ BDSWrapperProcess --------
//                     by Grahame Blair, 27 April 2003
// coded from a talk of Fan Lei
#include "BDSWrapperProcess.hh" 

BDSWrapperProcess::BDSWrapperProcess(const G4String& aName, G4ProcessType aType):G4WrapperProcess(aName,aType),eFactor(1.0)
{

}



G4double BDSWrapperProcess::
PostStepGetPhysicalInteractionLength( 
				     const G4Track& track,
				     G4double previousStepSize,  
				     G4ForceCondition* condition )
{
  return (1./eFactor) * 
    pRegProcess->PostStepGetPhysicalInteractionLength( track,  
						       previousStepSize, 
						       condition );
}

G4VParticleChange* BDSWrapperProcess::PostStepDoIt( const G4Track& track,
						    const G4Step&  stepData)
{
  G4VParticleChange* pChange = pRegProcess->PostStepDoIt( track, stepData );      
  G4double w =  pChange->GetParentWeight()/eFactor;
  pChange->SetParentWeightByProcess(false);
  pChange->SetParentWeight(w) ;
  for (G4int i = 0; i < pChange->GetNumberOfSecondaries(); i++) 
    pChange->GetSecondary(i)->SetWeight(w);
  return     pChange;
}
G4VParticleChange* BDSWrapperProcess::AlongStepDoIt(const G4Track& track,
                                                    const G4Step& stepData)
{
  G4VParticleChange* pChange = pRegProcess->AlongStepDoIt( track, stepData );
  G4double s = track.GetStepLength();
  G4double x = pRegProcess->GetCurrentInteractionLength();
  pChange->Initialize(track) ;
  G4double w =  exp((-1. + eFactor)*s/x)*pChange->GetParentWeight();  
  pChange->SetParentWeightByProcess(false);
  pChange->SetParentWeight(w) ;
  return pChange ;
}
 
G4VParticleChange* BDSWrapperProcess::AtRestDoIt(const G4Track& track,
                                                 const G4Step& stepData)
{
  G4VParticleChange* pC;
  pC = pRegProcess->AtRestDoIt( track, stepData );
  size_t nSecondary = size_t(pC->GetNumberOfSecondaries());
  for (size_t idx=0; idx < nSecondary; idx+=1){
    (pC->GetSecondary(idx))->SetWeight(track.GetWeight()/eFactor);
  } 
  return pC;
}

void BDSWrapperProcess::RegisterWrapperProcess(G4VProcess* aProcess)
{pRegProcess=aProcess;

}

